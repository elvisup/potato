// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_reply.proto

#include "file_reply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_file_5freply_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5freply_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VerifyFileReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5freply_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WriteFileReply;
}  // namespace protobuf_file_5freply_2eproto
namespace sputnik {
namespace pb {
class VerifyFileReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VerifyFileReply>
      _instance;
} _VerifyFileReply_default_instance_;
class WriteFileReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteFileReply>
      _instance;
} _WriteFileReply_default_instance_;
class FileReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileReply>
      _instance;
  const ::sputnik::pb::VerifyFileReply* verify_file_reply_;
  const ::sputnik::pb::WriteFileReply* write_file_reply_;
} _FileReply_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_file_5freply_2eproto {
static void InitDefaultsVerifyFileReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_VerifyFileReply_default_instance_;
    new (ptr) ::sputnik::pb::VerifyFileReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::VerifyFileReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VerifyFileReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVerifyFileReply}, {}};

static void InitDefaultsWriteFileReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_WriteFileReply_default_instance_;
    new (ptr) ::sputnik::pb::WriteFileReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::WriteFileReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteFileReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteFileReply}, {}};

static void InitDefaultsFileReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FileReply_default_instance_;
    new (ptr) ::sputnik::pb::FileReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FileReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FileReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFileReply}, {
      &protobuf_file_5freply_2eproto::scc_info_VerifyFileReply.base,
      &protobuf_file_5freply_2eproto::scc_info_WriteFileReply.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VerifyFileReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteFileReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileReply.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VerifyFileReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VerifyFileReply, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::WriteFileReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::WriteFileReply, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileReply, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileReply, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileReply, error_message_),
  offsetof(::sputnik::pb::FileReplyDefaultTypeInternal, verify_file_reply_),
  offsetof(::sputnik::pb::FileReplyDefaultTypeInternal, write_file_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileReply, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::VerifyFileReply)},
  { 6, -1, sizeof(::sputnik::pb::WriteFileReply)},
  { 12, -1, sizeof(::sputnik::pb::FileReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_VerifyFileReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_WriteFileReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FileReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "file_reply.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020file_reply.proto\022\nsputnik.pb\"D\n\017Verify"
      "FileReply\0221\n\006status\030\001 \001(\0162!.sputnik.pb.V"
      "erifyFileReplyStatus\"B\n\016WriteFileReply\0220"
      "\n\006status\030\001 \001(\0162 .sputnik.pb.WriteFileRep"
      "lyStatus\"\263\001\n\tFileReply\022\022\n\nrequest_id\030\001 \001"
      "(\005\022\025\n\rerror_message\030\002 \001(\t\0228\n\021verify_file"
      "_reply\030\003 \001(\0132\033.sputnik.pb.VerifyFileRepl"
      "yH\000\0226\n\020write_file_reply\030\004 \001(\0132\032.sputnik."
      "pb.WriteFileReplyH\000B\t\n\007content*`\n\025Verify"
      "FileReplyStatus\022\020\n\014VFRS_UNKNOWN\020\000\022\020\n\014VFR"
      "S_SUCCESS\020\001\022\021\n\rVFRS_MISMATCH\020\002\022\020\n\014VFRS_N"
      "O_FILE\020\003*\204\001\n\024WriteFileReplyStatus\022\020\n\014WFR"
      "S_UNKNOWN\020\000\022\020\n\014WFRS_SUCCESS\020\001\022\026\n\022WFRS_NO"
      "_SPACE_LEFT\020\002\022\025\n\021WFRS_WRITE_FAILED\020\003\022\031\n\025"
      "WFRS_CANNOT_OVERWRITE\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 591);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file_reply.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_file_5freply_2eproto
namespace sputnik {
namespace pb {
const ::google::protobuf::EnumDescriptor* VerifyFileReplyStatus_descriptor() {
  protobuf_file_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_file_5freply_2eproto::file_level_enum_descriptors[0];
}
bool VerifyFileReplyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WriteFileReplyStatus_descriptor() {
  protobuf_file_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_file_5freply_2eproto::file_level_enum_descriptors[1];
}
bool WriteFileReplyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VerifyFileReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyFileReply::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyFileReply::VerifyFileReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5freply_2eproto::scc_info_VerifyFileReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.VerifyFileReply)
}
VerifyFileReply::VerifyFileReply(const VerifyFileReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.VerifyFileReply)
}

void VerifyFileReply::SharedCtor() {
  status_ = 0;
}

VerifyFileReply::~VerifyFileReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.VerifyFileReply)
  SharedDtor();
}

void VerifyFileReply::SharedDtor() {
}

void VerifyFileReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VerifyFileReply::descriptor() {
  ::protobuf_file_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyFileReply& VerifyFileReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5freply_2eproto::scc_info_VerifyFileReply.base);
  return *internal_default_instance();
}


void VerifyFileReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.VerifyFileReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

bool VerifyFileReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.VerifyFileReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.VerifyFileReplyStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::sputnik::pb::VerifyFileReplyStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.VerifyFileReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.VerifyFileReply)
  return false;
#undef DO_
}

void VerifyFileReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.VerifyFileReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.VerifyFileReplyStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.VerifyFileReply)
}

::google::protobuf::uint8* VerifyFileReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.VerifyFileReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.VerifyFileReplyStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.VerifyFileReply)
  return target;
}

size_t VerifyFileReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.VerifyFileReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.VerifyFileReplyStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyFileReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.VerifyFileReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyFileReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyFileReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.VerifyFileReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.VerifyFileReply)
    MergeFrom(*source);
  }
}

void VerifyFileReply::MergeFrom(const VerifyFileReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.VerifyFileReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void VerifyFileReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.VerifyFileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyFileReply::CopyFrom(const VerifyFileReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.VerifyFileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyFileReply::IsInitialized() const {
  return true;
}

void VerifyFileReply::Swap(VerifyFileReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyFileReply::InternalSwap(VerifyFileReply* other) {
  using std::swap;
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VerifyFileReply::GetMetadata() const {
  protobuf_file_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteFileReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteFileReply::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteFileReply::WriteFileReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5freply_2eproto::scc_info_WriteFileReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.WriteFileReply)
}
WriteFileReply::WriteFileReply(const WriteFileReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.WriteFileReply)
}

void WriteFileReply::SharedCtor() {
  status_ = 0;
}

WriteFileReply::~WriteFileReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.WriteFileReply)
  SharedDtor();
}

void WriteFileReply::SharedDtor() {
}

void WriteFileReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteFileReply::descriptor() {
  ::protobuf_file_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteFileReply& WriteFileReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5freply_2eproto::scc_info_WriteFileReply.base);
  return *internal_default_instance();
}


void WriteFileReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.WriteFileReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

bool WriteFileReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.WriteFileReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.WriteFileReplyStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::sputnik::pb::WriteFileReplyStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.WriteFileReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.WriteFileReply)
  return false;
#undef DO_
}

void WriteFileReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.WriteFileReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.WriteFileReplyStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.WriteFileReply)
}

::google::protobuf::uint8* WriteFileReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.WriteFileReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.WriteFileReplyStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.WriteFileReply)
  return target;
}

size_t WriteFileReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.WriteFileReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.WriteFileReplyStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteFileReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.WriteFileReply)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteFileReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteFileReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.WriteFileReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.WriteFileReply)
    MergeFrom(*source);
  }
}

void WriteFileReply::MergeFrom(const WriteFileReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.WriteFileReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void WriteFileReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.WriteFileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteFileReply::CopyFrom(const WriteFileReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.WriteFileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteFileReply::IsInitialized() const {
  return true;
}

void WriteFileReply::Swap(WriteFileReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteFileReply::InternalSwap(WriteFileReply* other) {
  using std::swap;
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteFileReply::GetMetadata() const {
  protobuf_file_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileReply::InitAsDefaultInstance() {
  ::sputnik::pb::_FileReply_default_instance_.verify_file_reply_ = const_cast< ::sputnik::pb::VerifyFileReply*>(
      ::sputnik::pb::VerifyFileReply::internal_default_instance());
  ::sputnik::pb::_FileReply_default_instance_.write_file_reply_ = const_cast< ::sputnik::pb::WriteFileReply*>(
      ::sputnik::pb::WriteFileReply::internal_default_instance());
}
void FileReply::set_allocated_verify_file_reply(::sputnik::pb::VerifyFileReply* verify_file_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (verify_file_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verify_file_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verify_file_reply, submessage_arena);
    }
    set_has_verify_file_reply();
    content_.verify_file_reply_ = verify_file_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FileReply.verify_file_reply)
}
void FileReply::set_allocated_write_file_reply(::sputnik::pb::WriteFileReply* write_file_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (write_file_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      write_file_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, write_file_reply, submessage_arena);
    }
    set_has_write_file_reply();
    content_.write_file_reply_ = write_file_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FileReply.write_file_reply)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileReply::kRequestIdFieldNumber;
const int FileReply::kErrorMessageFieldNumber;
const int FileReply::kVerifyFileReplyFieldNumber;
const int FileReply::kWriteFileReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileReply::FileReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5freply_2eproto::scc_info_FileReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FileReply)
}
FileReply::FileReply(const FileReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  request_id_ = from.request_id_;
  clear_has_content();
  switch (from.content_case()) {
    case kVerifyFileReply: {
      mutable_verify_file_reply()->::sputnik::pb::VerifyFileReply::MergeFrom(from.verify_file_reply());
      break;
    }
    case kWriteFileReply: {
      mutable_write_file_reply()->::sputnik::pb::WriteFileReply::MergeFrom(from.write_file_reply());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FileReply)
}

void FileReply::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_ = 0;
  clear_has_content();
}

FileReply::~FileReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FileReply)
  SharedDtor();
}

void FileReply::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_content()) {
    clear_content();
  }
}

void FileReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileReply::descriptor() {
  ::protobuf_file_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileReply& FileReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5freply_2eproto::scc_info_FileReply.base);
  return *internal_default_instance();
}


void FileReply::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:sputnik.pb.FileReply)
  switch (content_case()) {
    case kVerifyFileReply: {
      delete content_.verify_file_reply_;
      break;
    }
    case kWriteFileReply: {
      delete content_.write_file_reply_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void FileReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FileReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_ = 0;
  clear_content();
  _internal_metadata_.Clear();
}

bool FileReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FileReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.FileReply.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.VerifyFileReply verify_file_reply = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_verify_file_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.WriteFileReply write_file_reply = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_write_file_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FileReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FileReply)
  return false;
#undef DO_
}

void FileReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FileReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request_id(), output);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FileReply.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // .sputnik.pb.VerifyFileReply verify_file_reply = 3;
  if (has_verify_file_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_verify_file_reply(), output);
  }

  // .sputnik.pb.WriteFileReply write_file_reply = 4;
  if (has_write_file_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_write_file_reply(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FileReply)
}

::google::protobuf::uint8* FileReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FileReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request_id(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FileReply.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // .sputnik.pb.VerifyFileReply verify_file_reply = 3;
  if (has_verify_file_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_verify_file_reply(), deterministic, target);
  }

  // .sputnik.pb.WriteFileReply write_file_reply = 4;
  if (has_write_file_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_write_file_reply(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FileReply)
  return target;
}

size_t FileReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FileReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  switch (content_case()) {
    // .sputnik.pb.VerifyFileReply verify_file_reply = 3;
    case kVerifyFileReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.verify_file_reply_);
      break;
    }
    // .sputnik.pb.WriteFileReply write_file_reply = 4;
    case kWriteFileReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.write_file_reply_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FileReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FileReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FileReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FileReply)
    MergeFrom(*source);
  }
}

void FileReply::MergeFrom(const FileReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FileReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  switch (from.content_case()) {
    case kVerifyFileReply: {
      mutable_verify_file_reply()->::sputnik::pb::VerifyFileReply::MergeFrom(from.verify_file_reply());
      break;
    }
    case kWriteFileReply: {
      mutable_write_file_reply()->::sputnik::pb::WriteFileReply::MergeFrom(from.write_file_reply());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void FileReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileReply::CopyFrom(const FileReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileReply::IsInitialized() const {
  return true;
}

void FileReply::Swap(FileReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileReply::InternalSwap(FileReply* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_id_, other->request_id_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileReply::GetMetadata() const {
  protobuf_file_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::VerifyFileReply* Arena::CreateMaybeMessage< ::sputnik::pb::VerifyFileReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::VerifyFileReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::WriteFileReply* Arena::CreateMaybeMessage< ::sputnik::pb::WriteFileReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::WriteFileReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FileReply* Arena::CreateMaybeMessage< ::sputnik::pb::FileReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FileReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
