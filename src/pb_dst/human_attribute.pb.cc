// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: human_attribute.proto

#include "human_attribute.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace sputnik {
namespace pb {
class HumanAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HumanAttribute>
      _instance;
} _HumanAttribute_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_human_5fattribute_2eproto {
static void InitDefaultsHumanAttribute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_HumanAttribute_default_instance_;
    new (ptr) ::sputnik::pb::HumanAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::HumanAttribute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HumanAttribute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHumanAttribute}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HumanAttribute.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, backpack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, human_move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, move_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, ride_bike_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, ride_motorbike_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, human_face_visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, human_facing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::HumanAttribute, human_facing_confidence_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::HumanAttribute)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_HumanAttribute_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "human_attribute.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025human_attribute.proto\022\nsputnik.pb\032\017dir"
      "ection.proto\"\224\002\n\016HumanAttribute\022\016\n\006gende"
      "r\030\001 \001(\005\022\013\n\003age\030\002 \001(\005\022\020\n\010backpack\030\003 \001(\005\022\022"
      "\n\nhuman_move\030\004 \001(\005\022-\n\016move_direction\030\005 \001"
      "(\0162\025.sputnik.pb.Direction\022\021\n\tride_bike\030\006"
      " \001(\005\022\026\n\016ride_motorbike\030\007 \001(\005\022\032\n\022human_fa"
      "ce_visible\030\010 \001(\005\022(\n\014human_facing\030\t \001(\0162\022"
      ".sputnik.pb.Facing\022\037\n\027human_facing_confi"
      "dence\030\n \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 339);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "human_attribute.proto", &protobuf_RegisterTypes);
  ::protobuf_direction_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_human_5fattribute_2eproto
namespace sputnik {
namespace pb {

// ===================================================================

void HumanAttribute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HumanAttribute::kGenderFieldNumber;
const int HumanAttribute::kAgeFieldNumber;
const int HumanAttribute::kBackpackFieldNumber;
const int HumanAttribute::kHumanMoveFieldNumber;
const int HumanAttribute::kMoveDirectionFieldNumber;
const int HumanAttribute::kRideBikeFieldNumber;
const int HumanAttribute::kRideMotorbikeFieldNumber;
const int HumanAttribute::kHumanFaceVisibleFieldNumber;
const int HumanAttribute::kHumanFacingFieldNumber;
const int HumanAttribute::kHumanFacingConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HumanAttribute::HumanAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_human_5fattribute_2eproto::scc_info_HumanAttribute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.HumanAttribute)
}
HumanAttribute::HumanAttribute(const HumanAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gender_, &from.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&human_facing_confidence_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(human_facing_confidence_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.HumanAttribute)
}

void HumanAttribute::SharedCtor() {
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&human_facing_confidence_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(human_facing_confidence_));
}

HumanAttribute::~HumanAttribute() {
  // @@protoc_insertion_point(destructor:sputnik.pb.HumanAttribute)
  SharedDtor();
}

void HumanAttribute::SharedDtor() {
}

void HumanAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HumanAttribute::descriptor() {
  ::protobuf_human_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_human_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HumanAttribute& HumanAttribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_human_5fattribute_2eproto::scc_info_HumanAttribute.base);
  return *internal_default_instance();
}


void HumanAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.HumanAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&human_facing_confidence_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(human_facing_confidence_));
  _internal_metadata_.Clear();
}

bool HumanAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.HumanAttribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 backpack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backpack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 human_move = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &human_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.Direction move_direction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_move_direction(static_cast< ::sputnik::pb::Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ride_bike = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ride_bike_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ride_motorbike = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ride_motorbike_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 human_face_visible = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &human_face_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.Facing human_facing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_human_facing(static_cast< ::sputnik::pb::Facing >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 human_facing_confidence = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &human_facing_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.HumanAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.HumanAttribute)
  return false;
#undef DO_
}

void HumanAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.HumanAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gender = 1;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gender(), output);
  }

  // int32 age = 2;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  // int32 backpack = 3;
  if (this->backpack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->backpack(), output);
  }

  // int32 human_move = 4;
  if (this->human_move() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->human_move(), output);
  }

  // .sputnik.pb.Direction move_direction = 5;
  if (this->move_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->move_direction(), output);
  }

  // int32 ride_bike = 6;
  if (this->ride_bike() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ride_bike(), output);
  }

  // int32 ride_motorbike = 7;
  if (this->ride_motorbike() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ride_motorbike(), output);
  }

  // int32 human_face_visible = 8;
  if (this->human_face_visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->human_face_visible(), output);
  }

  // .sputnik.pb.Facing human_facing = 9;
  if (this->human_facing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->human_facing(), output);
  }

  // int32 human_facing_confidence = 10;
  if (this->human_facing_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->human_facing_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.HumanAttribute)
}

::google::protobuf::uint8* HumanAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.HumanAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gender = 1;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gender(), target);
  }

  // int32 age = 2;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age(), target);
  }

  // int32 backpack = 3;
  if (this->backpack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->backpack(), target);
  }

  // int32 human_move = 4;
  if (this->human_move() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->human_move(), target);
  }

  // .sputnik.pb.Direction move_direction = 5;
  if (this->move_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->move_direction(), target);
  }

  // int32 ride_bike = 6;
  if (this->ride_bike() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ride_bike(), target);
  }

  // int32 ride_motorbike = 7;
  if (this->ride_motorbike() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ride_motorbike(), target);
  }

  // int32 human_face_visible = 8;
  if (this->human_face_visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->human_face_visible(), target);
  }

  // .sputnik.pb.Facing human_facing = 9;
  if (this->human_facing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->human_facing(), target);
  }

  // int32 human_facing_confidence = 10;
  if (this->human_facing_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->human_facing_confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.HumanAttribute)
  return target;
}

size_t HumanAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.HumanAttribute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 gender = 1;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gender());
  }

  // int32 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // int32 backpack = 3;
  if (this->backpack() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->backpack());
  }

  // int32 human_move = 4;
  if (this->human_move() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->human_move());
  }

  // .sputnik.pb.Direction move_direction = 5;
  if (this->move_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->move_direction());
  }

  // int32 ride_bike = 6;
  if (this->ride_bike() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ride_bike());
  }

  // int32 ride_motorbike = 7;
  if (this->ride_motorbike() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ride_motorbike());
  }

  // int32 human_face_visible = 8;
  if (this->human_face_visible() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->human_face_visible());
  }

  // .sputnik.pb.Facing human_facing = 9;
  if (this->human_facing() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->human_facing());
  }

  // int32 human_facing_confidence = 10;
  if (this->human_facing_confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->human_facing_confidence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HumanAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.HumanAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const HumanAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HumanAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.HumanAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.HumanAttribute)
    MergeFrom(*source);
  }
}

void HumanAttribute::MergeFrom(const HumanAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.HumanAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.backpack() != 0) {
    set_backpack(from.backpack());
  }
  if (from.human_move() != 0) {
    set_human_move(from.human_move());
  }
  if (from.move_direction() != 0) {
    set_move_direction(from.move_direction());
  }
  if (from.ride_bike() != 0) {
    set_ride_bike(from.ride_bike());
  }
  if (from.ride_motorbike() != 0) {
    set_ride_motorbike(from.ride_motorbike());
  }
  if (from.human_face_visible() != 0) {
    set_human_face_visible(from.human_face_visible());
  }
  if (from.human_facing() != 0) {
    set_human_facing(from.human_facing());
  }
  if (from.human_facing_confidence() != 0) {
    set_human_facing_confidence(from.human_facing_confidence());
  }
}

void HumanAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.HumanAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanAttribute::CopyFrom(const HumanAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.HumanAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanAttribute::IsInitialized() const {
  return true;
}

void HumanAttribute::Swap(HumanAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HumanAttribute::InternalSwap(HumanAttribute* other) {
  using std::swap;
  swap(gender_, other->gender_);
  swap(age_, other->age_);
  swap(backpack_, other->backpack_);
  swap(human_move_, other->human_move_);
  swap(move_direction_, other->move_direction_);
  swap(ride_bike_, other->ride_bike_);
  swap(ride_motorbike_, other->ride_motorbike_);
  swap(human_face_visible_, other->human_face_visible_);
  swap(human_facing_, other->human_facing_);
  swap(human_facing_confidence_, other->human_facing_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HumanAttribute::GetMetadata() const {
  protobuf_human_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_human_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::HumanAttribute* Arena::CreateMaybeMessage< ::sputnik::pb::HumanAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::HumanAttribute >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
