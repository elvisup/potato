// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face_file.proto

#include "face_file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_face_5ffile_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5ffile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FaceLibrary;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5ffile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FaceRecord;
}  // namespace protobuf_face_5ffile_2eproto
namespace protobuf_face_5freply_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5freply_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FaceFeatureVersion;
}  // namespace protobuf_face_5freply_2eproto
namespace sputnik {
namespace pb {
class FaceRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceRecord>
      _instance;
} _FaceRecord_default_instance_;
class FaceLibraryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceLibrary>
      _instance;
} _FaceLibrary_default_instance_;
class FaceFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceFile>
      _instance;
  const ::sputnik::pb::FaceLibrary* library_;
  ::google::protobuf::internal::ArenaStringPtr model_;
} _FaceFile_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_face_5ffile_2eproto {
static void InitDefaultsFaceRecord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceRecord_default_instance_;
    new (ptr) ::sputnik::pb::FaceRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FaceRecord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFaceRecord}, {
      &protobuf_face_5freply_2eproto::scc_info_FaceFeatureVersion.base,}};

static void InitDefaultsFaceLibrary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceLibrary_default_instance_;
    new (ptr) ::sputnik::pb::FaceLibrary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceLibrary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FaceLibrary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFaceLibrary}, {
      &protobuf_face_5ffile_2eproto::scc_info_FaceRecord.base,}};

static void InitDefaultsFaceFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceFile_default_instance_;
    new (ptr) ::sputnik::pb::FaceFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FaceFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFaceFile}, {
      &protobuf_face_5ffile_2eproto::scc_info_FaceLibrary.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FaceRecord.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceLibrary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceFile.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecord, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecord, activation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecord, blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecord, feature_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecord, checksum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLibrary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLibrary, records_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceFile, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceFile, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sputnik::pb::FaceFileDefaultTypeInternal, library_),
  offsetof(::sputnik::pb::FaceFileDefaultTypeInternal, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceFile, checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceFile, file_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::FaceRecord)},
  { 10, -1, sizeof(::sputnik::pb::FaceLibrary)},
  { 16, -1, sizeof(::sputnik::pb::FaceFile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceLibrary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceFile_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "face_file.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017face_file.proto\022\nsputnik.pb\032\020face_repl"
      "y.proto\"\210\001\n\nFaceRecord\022\r\n\005token\030\001 \001(\005\022\022\n"
      "\nactivation\030\002 \001(\010\022\014\n\004blob\030\003 \001(\014\0227\n\017featu"
      "re_version\030\004 \001(\0132\036.sputnik.pb.FaceFeatur"
      "eVersion\022\020\n\010checksum\030\005 \001(\004\"6\n\013FaceLibrar"
      "y\022\'\n\007records\030\001 \003(\0132\026.sputnik.pb.FaceReco"
      "rd\"a\n\010FaceFile\022*\n\007library\030\001 \001(\0132\027.sputni"
      "k.pb.FaceLibraryH\000\022\017\n\005model\030\002 \001(\014H\000\022\020\n\010c"
      "hecksum\030\003 \001(\004B\006\n\004fileb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 349);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face_file.proto", &protobuf_RegisterTypes);
  ::protobuf_face_5freply_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_face_5ffile_2eproto
namespace sputnik {
namespace pb {

// ===================================================================

void FaceRecord::InitAsDefaultInstance() {
  ::sputnik::pb::_FaceRecord_default_instance_._instance.get_mutable()->feature_version_ = const_cast< ::sputnik::pb::FaceFeatureVersion*>(
      ::sputnik::pb::FaceFeatureVersion::internal_default_instance());
}
void FaceRecord::clear_feature_version() {
  if (GetArenaNoVirtual() == NULL && feature_version_ != NULL) {
    delete feature_version_;
  }
  feature_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceRecord::kTokenFieldNumber;
const int FaceRecord::kActivationFieldNumber;
const int FaceRecord::kBlobFieldNumber;
const int FaceRecord::kFeatureVersionFieldNumber;
const int FaceRecord::kChecksumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceRecord::FaceRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5ffile_2eproto::scc_info_FaceRecord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceRecord)
}
FaceRecord::FaceRecord(const FaceRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blob().size() > 0) {
    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_feature_version()) {
    feature_version_ = new ::sputnik::pb::FaceFeatureVersion(*from.feature_version_);
  } else {
    feature_version_ = NULL;
  }
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&checksum_) -
    reinterpret_cast<char*>(&token_)) + sizeof(checksum_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceRecord)
}

void FaceRecord::SharedCtor() {
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&feature_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checksum_) -
      reinterpret_cast<char*>(&feature_version_)) + sizeof(checksum_));
}

FaceRecord::~FaceRecord() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceRecord)
  SharedDtor();
}

void FaceRecord::SharedDtor() {
  blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete feature_version_;
}

void FaceRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceRecord::descriptor() {
  ::protobuf_face_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5ffile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceRecord& FaceRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5ffile_2eproto::scc_info_FaceRecord.base);
  return *internal_default_instance();
}


void FaceRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && feature_version_ != NULL) {
    delete feature_version_;
  }
  feature_version_ = NULL;
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checksum_) -
      reinterpret_cast<char*>(&token_)) + sizeof(checksum_));
  _internal_metadata_.Clear();
}

bool FaceRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool activation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes blob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceFeatureVersion feature_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 checksum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceRecord)
  return false;
#undef DO_
}

void FaceRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // bool activation = 2;
  if (this->activation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->activation(), output);
  }

  // bytes blob = 3;
  if (this->blob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->blob(), output);
  }

  // .sputnik.pb.FaceFeatureVersion feature_version = 4;
  if (this->has_feature_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_feature_version(), output);
  }

  // uint64 checksum = 5;
  if (this->checksum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->checksum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceRecord)
}

::google::protobuf::uint8* FaceRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // bool activation = 2;
  if (this->activation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->activation(), target);
  }

  // bytes blob = 3;
  if (this->blob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->blob(), target);
  }

  // .sputnik.pb.FaceFeatureVersion feature_version = 4;
  if (this->has_feature_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_feature_version(), deterministic, target);
  }

  // uint64 checksum = 5;
  if (this->checksum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->checksum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceRecord)
  return target;
}

size_t FaceRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes blob = 3;
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blob());
  }

  // .sputnik.pb.FaceFeatureVersion feature_version = 4;
  if (this->has_feature_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *feature_version_);
  }

  // int32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  // bool activation = 2;
  if (this->activation() != 0) {
    total_size += 1 + 1;
  }

  // uint64 checksum = 5;
  if (this->checksum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->checksum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceRecord)
    MergeFrom(*source);
  }
}

void FaceRecord::MergeFrom(const FaceRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_feature_version()) {
    mutable_feature_version()->::sputnik::pb::FaceFeatureVersion::MergeFrom(from.feature_version());
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
  if (from.activation() != 0) {
    set_activation(from.activation());
  }
  if (from.checksum() != 0) {
    set_checksum(from.checksum());
  }
}

void FaceRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceRecord::CopyFrom(const FaceRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecord::IsInitialized() const {
  return true;
}

void FaceRecord::Swap(FaceRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceRecord::InternalSwap(FaceRecord* other) {
  using std::swap;
  blob_.Swap(&other->blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(feature_version_, other->feature_version_);
  swap(token_, other->token_);
  swap(activation_, other->activation_);
  swap(checksum_, other->checksum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceRecord::GetMetadata() const {
  protobuf_face_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5ffile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceLibrary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceLibrary::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceLibrary::FaceLibrary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5ffile_2eproto::scc_info_FaceLibrary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceLibrary)
}
FaceLibrary::FaceLibrary(const FaceLibrary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      records_(from.records_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceLibrary)
}

void FaceLibrary::SharedCtor() {
}

FaceLibrary::~FaceLibrary() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceLibrary)
  SharedDtor();
}

void FaceLibrary::SharedDtor() {
}

void FaceLibrary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceLibrary::descriptor() {
  ::protobuf_face_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5ffile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceLibrary& FaceLibrary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5ffile_2eproto::scc_info_FaceLibrary.base);
  return *internal_default_instance();
}


void FaceLibrary::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceLibrary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  _internal_metadata_.Clear();
}

bool FaceLibrary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceLibrary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sputnik.pb.FaceRecord records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceLibrary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceLibrary)
  return false;
#undef DO_
}

void FaceLibrary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceLibrary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sputnik.pb.FaceRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->records(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceLibrary)
}

::google::protobuf::uint8* FaceLibrary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceLibrary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sputnik.pb.FaceRecord records = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->records(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceLibrary)
  return target;
}

size_t FaceLibrary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceLibrary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sputnik.pb.FaceRecord records = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->records(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceLibrary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceLibrary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceLibrary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceLibrary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceLibrary)
    MergeFrom(*source);
  }
}

void FaceLibrary::MergeFrom(const FaceLibrary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
}

void FaceLibrary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceLibrary::CopyFrom(const FaceLibrary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceLibrary::IsInitialized() const {
  return true;
}

void FaceLibrary::Swap(FaceLibrary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceLibrary::InternalSwap(FaceLibrary* other) {
  using std::swap;
  CastToBase(&records_)->InternalSwap(CastToBase(&other->records_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceLibrary::GetMetadata() const {
  protobuf_face_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5ffile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceFile::InitAsDefaultInstance() {
  ::sputnik::pb::_FaceFile_default_instance_.library_ = const_cast< ::sputnik::pb::FaceLibrary*>(
      ::sputnik::pb::FaceLibrary::internal_default_instance());
  ::sputnik::pb::_FaceFile_default_instance_.model_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaceFile::set_allocated_library(::sputnik::pb::FaceLibrary* library) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_file();
  if (library) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      library = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, library, submessage_arena);
    }
    set_has_library();
    file_.library_ = library;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FaceFile.library)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceFile::kLibraryFieldNumber;
const int FaceFile::kModelFieldNumber;
const int FaceFile::kChecksumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceFile::FaceFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5ffile_2eproto::scc_info_FaceFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceFile)
}
FaceFile::FaceFile(const FaceFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  checksum_ = from.checksum_;
  clear_has_file();
  switch (from.file_case()) {
    case kLibrary: {
      mutable_library()->::sputnik::pb::FaceLibrary::MergeFrom(from.library());
      break;
    }
    case kModel: {
      set_model(from.model());
      break;
    }
    case FILE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceFile)
}

void FaceFile::SharedCtor() {
  checksum_ = GOOGLE_ULONGLONG(0);
  clear_has_file();
}

FaceFile::~FaceFile() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceFile)
  SharedDtor();
}

void FaceFile::SharedDtor() {
  if (has_file()) {
    clear_file();
  }
}

void FaceFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceFile::descriptor() {
  ::protobuf_face_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5ffile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceFile& FaceFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5ffile_2eproto::scc_info_FaceFile.base);
  return *internal_default_instance();
}


void FaceFile::clear_file() {
// @@protoc_insertion_point(one_of_clear_start:sputnik.pb.FaceFile)
  switch (file_case()) {
    case kLibrary: {
      delete file_.library_;
      break;
    }
    case kModel: {
      file_.model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case FILE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILE_NOT_SET;
}


void FaceFile::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checksum_ = GOOGLE_ULONGLONG(0);
  clear_file();
  _internal_metadata_.Clear();
}

bool FaceFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.FaceLibrary library = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_library()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 checksum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceFile)
  return false;
#undef DO_
}

void FaceFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceLibrary library = 1;
  if (has_library()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_library(), output);
  }

  // bytes model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->model(), output);
  }

  // uint64 checksum = 3;
  if (this->checksum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->checksum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceFile)
}

::google::protobuf::uint8* FaceFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceLibrary library = 1;
  if (has_library()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_library(), deterministic, target);
  }

  // bytes model = 2;
  if (has_model()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->model(), target);
  }

  // uint64 checksum = 3;
  if (this->checksum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->checksum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceFile)
  return target;
}

size_t FaceFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceFile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 checksum = 3;
  if (this->checksum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->checksum());
  }

  switch (file_case()) {
    // .sputnik.pb.FaceLibrary library = 1;
    case kLibrary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *file_.library_);
      break;
    }
    // bytes model = 2;
    case kModel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model());
      break;
    }
    case FILE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceFile)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceFile)
    MergeFrom(*source);
  }
}

void FaceFile::MergeFrom(const FaceFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checksum() != 0) {
    set_checksum(from.checksum());
  }
  switch (from.file_case()) {
    case kLibrary: {
      mutable_library()->::sputnik::pb::FaceLibrary::MergeFrom(from.library());
      break;
    }
    case kModel: {
      set_model(from.model());
      break;
    }
    case FILE_NOT_SET: {
      break;
    }
  }
}

void FaceFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceFile::CopyFrom(const FaceFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceFile::IsInitialized() const {
  return true;
}

void FaceFile::Swap(FaceFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceFile::InternalSwap(FaceFile* other) {
  using std::swap;
  swap(checksum_, other->checksum_);
  swap(file_, other->file_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceFile::GetMetadata() const {
  protobuf_face_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5ffile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceRecord* Arena::CreateMaybeMessage< ::sputnik::pb::FaceRecord >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceRecord >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceLibrary* Arena::CreateMaybeMessage< ::sputnik::pb::FaceLibrary >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceLibrary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceFile* Arena::CreateMaybeMessage< ::sputnik::pb::FaceFile >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceFile >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
