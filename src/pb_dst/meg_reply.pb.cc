// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meg_reply.proto

#include "meg_reply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_face_5freply_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5freply_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FaceReply;
}  // namespace protobuf_face_5freply_2eproto
namespace protobuf_token_5freply_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_token_5freply_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeleteTokenReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_token_5freply_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TokenActivationReply;
}  // namespace protobuf_token_5freply_2eproto
namespace sputnik {
namespace pb {
class MegReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MegReply>
      _instance;
  const ::sputnik::pb::FaceReply* face_reply_;
  const ::sputnik::pb::TokenActivationReply* token_activation_replay_;
  const ::sputnik::pb::DeleteTokenReply* delete_token_reply_;
} _MegReply_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_meg_5freply_2eproto {
static void InitDefaultsMegReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_MegReply_default_instance_;
    new (ptr) ::sputnik::pb::MegReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::MegReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MegReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMegReply}, {
      &protobuf_face_5freply_2eproto::scc_info_FaceReply.base,
      &protobuf_token_5freply_2eproto::scc_info_TokenActivationReply.base,
      &protobuf_token_5freply_2eproto::scc_info_DeleteTokenReply.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MegReply.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegReply, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegReply, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegReply, error_message_),
  offsetof(::sputnik::pb::MegReplyDefaultTypeInternal, face_reply_),
  offsetof(::sputnik::pb::MegReplyDefaultTypeInternal, token_activation_replay_),
  offsetof(::sputnik::pb::MegReplyDefaultTypeInternal, delete_token_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegReply, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::MegReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_MegReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "meg_reply.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017meg_reply.proto\022\nsputnik.pb\032\020face_repl"
      "y.proto\032\021token_reply.proto\"\356\001\n\010MegReply\022"
      "\022\n\nrequest_id\030\001 \001(\005\022\025\n\rerror_message\030\002 \001"
      "(\t\022+\n\nface_reply\030\003 \001(\0132\025.sputnik.pb.Face"
      "ReplyH\000\022C\n\027token_activation_replay\030\004 \001(\013"
      "2 .sputnik.pb.TokenActivationReplyH\000\022:\n\022"
      "delete_token_reply\030\005 \001(\0132\034.sputnik.pb.De"
      "leteTokenReplyH\000B\t\n\007contentb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "meg_reply.proto", &protobuf_RegisterTypes);
  ::protobuf_face_5freply_2eproto::AddDescriptors();
  ::protobuf_token_5freply_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_meg_5freply_2eproto
namespace sputnik {
namespace pb {

// ===================================================================

void MegReply::InitAsDefaultInstance() {
  ::sputnik::pb::_MegReply_default_instance_.face_reply_ = const_cast< ::sputnik::pb::FaceReply*>(
      ::sputnik::pb::FaceReply::internal_default_instance());
  ::sputnik::pb::_MegReply_default_instance_.token_activation_replay_ = const_cast< ::sputnik::pb::TokenActivationReply*>(
      ::sputnik::pb::TokenActivationReply::internal_default_instance());
  ::sputnik::pb::_MegReply_default_instance_.delete_token_reply_ = const_cast< ::sputnik::pb::DeleteTokenReply*>(
      ::sputnik::pb::DeleteTokenReply::internal_default_instance());
}
void MegReply::set_allocated_face_reply(::sputnik::pb::FaceReply* face_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (face_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      face_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, face_reply, submessage_arena);
    }
    set_has_face_reply();
    content_.face_reply_ = face_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.MegReply.face_reply)
}
void MegReply::clear_face_reply() {
  if (has_face_reply()) {
    delete content_.face_reply_;
    clear_has_content();
  }
}
void MegReply::set_allocated_token_activation_replay(::sputnik::pb::TokenActivationReply* token_activation_replay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (token_activation_replay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      token_activation_replay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, token_activation_replay, submessage_arena);
    }
    set_has_token_activation_replay();
    content_.token_activation_replay_ = token_activation_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.MegReply.token_activation_replay)
}
void MegReply::clear_token_activation_replay() {
  if (has_token_activation_replay()) {
    delete content_.token_activation_replay_;
    clear_has_content();
  }
}
void MegReply::set_allocated_delete_token_reply(::sputnik::pb::DeleteTokenReply* delete_token_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (delete_token_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delete_token_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_token_reply, submessage_arena);
    }
    set_has_delete_token_reply();
    content_.delete_token_reply_ = delete_token_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.MegReply.delete_token_reply)
}
void MegReply::clear_delete_token_reply() {
  if (has_delete_token_reply()) {
    delete content_.delete_token_reply_;
    clear_has_content();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MegReply::kRequestIdFieldNumber;
const int MegReply::kErrorMessageFieldNumber;
const int MegReply::kFaceReplyFieldNumber;
const int MegReply::kTokenActivationReplayFieldNumber;
const int MegReply::kDeleteTokenReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MegReply::MegReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meg_5freply_2eproto::scc_info_MegReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.MegReply)
}
MegReply::MegReply(const MegReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  request_id_ = from.request_id_;
  clear_has_content();
  switch (from.content_case()) {
    case kFaceReply: {
      mutable_face_reply()->::sputnik::pb::FaceReply::MergeFrom(from.face_reply());
      break;
    }
    case kTokenActivationReplay: {
      mutable_token_activation_replay()->::sputnik::pb::TokenActivationReply::MergeFrom(from.token_activation_replay());
      break;
    }
    case kDeleteTokenReply: {
      mutable_delete_token_reply()->::sputnik::pb::DeleteTokenReply::MergeFrom(from.delete_token_reply());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.MegReply)
}

void MegReply::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_ = 0;
  clear_has_content();
}

MegReply::~MegReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.MegReply)
  SharedDtor();
}

void MegReply::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_content()) {
    clear_content();
  }
}

void MegReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MegReply::descriptor() {
  ::protobuf_meg_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meg_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MegReply& MegReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meg_5freply_2eproto::scc_info_MegReply.base);
  return *internal_default_instance();
}


void MegReply::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:sputnik.pb.MegReply)
  switch (content_case()) {
    case kFaceReply: {
      delete content_.face_reply_;
      break;
    }
    case kTokenActivationReplay: {
      delete content_.token_activation_replay_;
      break;
    }
    case kDeleteTokenReply: {
      delete content_.delete_token_reply_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void MegReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.MegReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_ = 0;
  clear_content();
  _internal_metadata_.Clear();
}

bool MegReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.MegReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.MegReply.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceReply face_reply = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_face_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.TokenActivationReply token_activation_replay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_token_activation_replay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.DeleteTokenReply delete_token_reply = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_token_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.MegReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.MegReply)
  return false;
#undef DO_
}

void MegReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.MegReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request_id(), output);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.MegReply.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // .sputnik.pb.FaceReply face_reply = 3;
  if (has_face_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_face_reply(), output);
  }

  // .sputnik.pb.TokenActivationReply token_activation_replay = 4;
  if (has_token_activation_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_token_activation_replay(), output);
  }

  // .sputnik.pb.DeleteTokenReply delete_token_reply = 5;
  if (has_delete_token_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_delete_token_reply(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.MegReply)
}

::google::protobuf::uint8* MegReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.MegReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request_id(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.MegReply.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // .sputnik.pb.FaceReply face_reply = 3;
  if (has_face_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_face_reply(), deterministic, target);
  }

  // .sputnik.pb.TokenActivationReply token_activation_replay = 4;
  if (has_token_activation_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_token_activation_replay(), deterministic, target);
  }

  // .sputnik.pb.DeleteTokenReply delete_token_reply = 5;
  if (has_delete_token_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_delete_token_reply(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.MegReply)
  return target;
}

size_t MegReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.MegReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  switch (content_case()) {
    // .sputnik.pb.FaceReply face_reply = 3;
    case kFaceReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.face_reply_);
      break;
    }
    // .sputnik.pb.TokenActivationReply token_activation_replay = 4;
    case kTokenActivationReplay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.token_activation_replay_);
      break;
    }
    // .sputnik.pb.DeleteTokenReply delete_token_reply = 5;
    case kDeleteTokenReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.delete_token_reply_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MegReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.MegReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MegReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MegReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.MegReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.MegReply)
    MergeFrom(*source);
  }
}

void MegReply::MergeFrom(const MegReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.MegReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  switch (from.content_case()) {
    case kFaceReply: {
      mutable_face_reply()->::sputnik::pb::FaceReply::MergeFrom(from.face_reply());
      break;
    }
    case kTokenActivationReplay: {
      mutable_token_activation_replay()->::sputnik::pb::TokenActivationReply::MergeFrom(from.token_activation_replay());
      break;
    }
    case kDeleteTokenReply: {
      mutable_delete_token_reply()->::sputnik::pb::DeleteTokenReply::MergeFrom(from.delete_token_reply());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void MegReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.MegReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MegReply::CopyFrom(const MegReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.MegReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MegReply::IsInitialized() const {
  return true;
}

void MegReply::Swap(MegReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MegReply::InternalSwap(MegReply* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_id_, other->request_id_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MegReply::GetMetadata() const {
  protobuf_meg_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meg_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::MegReply* Arena::CreateMaybeMessage< ::sputnik::pb::MegReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::MegReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
