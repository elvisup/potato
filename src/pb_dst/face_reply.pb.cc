// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face_reply.proto

#include "face_reply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_face_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FaceAttribute;
}  // namespace protobuf_face_5fattribute_2eproto
namespace protobuf_face_5freply_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5freply_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FaceFeatureVersion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5freply_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FaceTokenReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5freply_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TokenScore;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5freply_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FaceAttributeReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5freply_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_FaceRecognitionReply;
}  // namespace protobuf_face_5freply_2eproto
namespace sputnik {
namespace pb {
class TokenScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TokenScore>
      _instance;
} _TokenScore_default_instance_;
class FaceAttributeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceAttributeReply>
      _instance;
} _FaceAttributeReply_default_instance_;
class FaceFeatureVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceFeatureVersion>
      _instance;
} _FaceFeatureVersion_default_instance_;
class FaceTokenReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceTokenReply>
      _instance;
} _FaceTokenReply_default_instance_;
class FaceRecognitionReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceRecognitionReply>
      _instance;
} _FaceRecognitionReply_default_instance_;
class FaceReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceReply>
      _instance;
} _FaceReply_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_face_5freply_2eproto {
static void InitDefaultsTokenScore() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_TokenScore_default_instance_;
    new (ptr) ::sputnik::pb::TokenScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::TokenScore::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TokenScore =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTokenScore}, {}};

static void InitDefaultsFaceAttributeReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceAttributeReply_default_instance_;
    new (ptr) ::sputnik::pb::FaceAttributeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceAttributeReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FaceAttributeReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFaceAttributeReply}, {
      &protobuf_face_5fattribute_2eproto::scc_info_FaceAttribute.base,}};

static void InitDefaultsFaceFeatureVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceFeatureVersion_default_instance_;
    new (ptr) ::sputnik::pb::FaceFeatureVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceFeatureVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FaceFeatureVersion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFaceFeatureVersion}, {}};

static void InitDefaultsFaceTokenReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceTokenReply_default_instance_;
    new (ptr) ::sputnik::pb::FaceTokenReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceTokenReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FaceTokenReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFaceTokenReply}, {}};

static void InitDefaultsFaceRecognitionReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceRecognitionReply_default_instance_;
    new (ptr) ::sputnik::pb::FaceRecognitionReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceRecognitionReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_FaceRecognitionReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsFaceRecognitionReply}, {
      &protobuf_face_5freply_2eproto::scc_info_FaceTokenReply.base,
      &protobuf_face_5freply_2eproto::scc_info_TokenScore.base,
      &protobuf_face_5freply_2eproto::scc_info_FaceFeatureVersion.base,}};

static void InitDefaultsFaceReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceReply_default_instance_;
    new (ptr) ::sputnik::pb::FaceReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FaceReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFaceReply}, {
      &protobuf_face_5freply_2eproto::scc_info_FaceAttributeReply.base,
      &protobuf_face_5freply_2eproto::scc_info_FaceRecognitionReply.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TokenScore.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceAttributeReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceFeatureVersion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceTokenReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceRecognitionReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceReply.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::TokenScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::TokenScore, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::TokenScore, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttributeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttributeReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttributeReply, attribute_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceFeatureVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceFeatureVersion, model_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceFeatureVersion, method_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenReply, face_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenReply, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenReply, blob_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecognitionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecognitionReply, token_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecognitionReply, scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecognitionReply, feature_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceReply, face_attribute_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceReply, face_recognition_reply_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::TokenScore)},
  { 7, -1, sizeof(::sputnik::pb::FaceAttributeReply)},
  { 14, -1, sizeof(::sputnik::pb::FaceFeatureVersion)},
  { 21, -1, sizeof(::sputnik::pb::FaceTokenReply)},
  { 30, -1, sizeof(::sputnik::pb::FaceRecognitionReply)},
  { 38, -1, sizeof(::sputnik::pb::FaceReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_TokenScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceAttributeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceFeatureVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceTokenReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceRecognitionReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "face_reply.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020face_reply.proto\022\nsputnik.pb\032\024face_att"
      "ribute.proto\"*\n\nTokenScore\022\r\n\005token\030\001 \001("
      "\005\022\r\n\005score\030\002 \001(\001\"x\n\022FaceAttributeReply\0224"
      "\n\006status\030\001 \001(\0162$.sputnik.pb.FaceAttribut"
      "eReplyStatus\022,\n\tattribute\030\002 \001(\0132\031.sputni"
      "k.pb.FaceAttribute\";\n\022FaceFeatureVersion"
      "\022\025\n\rmodel_version\030\001 \001(\t\022\016\n\006method\030\002 \001(\t\""
      "\216\001\n\016FaceTokenReply\0220\n\006status\030\001 \001(\0162 .spu"
      "tnik.pb.FaceTokenReplyStatus\022-\n\014face_qua"
      "lity\030\002 \001(\0162\027.sputnik.pb.FaceQuality\022\r\n\005t"
      "oken\030\003 \001(\005\022\014\n\004blob\030\004 \001(\014\"\250\001\n\024FaceRecogni"
      "tionReply\022/\n\013token_reply\030\001 \001(\0132\032.sputnik"
      ".pb.FaceTokenReply\022&\n\006scores\030\002 \003(\0132\026.spu"
      "tnik.pb.TokenScore\0227\n\017feature_version\030\003 "
      "\001(\0132\036.sputnik.pb.FaceFeatureVersion\"\213\001\n\t"
      "FaceReply\022<\n\024face_attribute_reply\030\001 \001(\0132"
      "\036.sputnik.pb.FaceAttributeReply\022@\n\026face_"
      "recognition_reply\030\002 \001(\0132 .sputnik.pb.Fac"
      "eRecognitionReply*_\n\030FaceAttributeReplyS"
      "tatus\022\017\n\013ARS_UNKNOWN\020\000\022\017\n\013ARS_SUCCESS\020\001\022"
      "\017\n\013ARS_NO_FACE\020\002\022\020\n\014ARS_NO_MODEL\020\003*\242\001\n\013F"
      "aceQuality\022\016\n\nFQ_UNKNOWN\020\000\022\013\n\007FQ_GOOD\020\001\022"
      "\020\n\014FQ_TOO_SMALL\020\002\022\026\n\022FQ_TOO_LARGE_PITCH\020"
      "\003\022\024\n\020FQ_TOO_LARGE_YAW\020\004\022\025\n\021FQ_TOO_LARGE_"
      "ROLL\020\005\022\017\n\013FQ_TOO_BLUR\020\006\022\016\n\nFQ_NO_FACE\020\007*"
      "\245\001\n\024FaceTokenReplyStatus\022\020\n\014FTRS_UNKNOWN"
      "\020\000\022\020\n\014FTRS_SUCCESS\020\001\022\020\n\014FTRS_NO_FACE\020\002\022\027"
      "\n\023FTRS_MULTIPLE_FACES\020\003\022\031\n\025FTRS_LOW_QUAL"
      "ITY_FACE\020\004\022\020\n\014FTRS_TIMEOUT\020\005\022\021\n\rFTRS_NO_"
      "MODEL\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face_reply.proto", &protobuf_RegisterTypes);
  ::protobuf_face_5fattribute_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_face_5freply_2eproto
namespace sputnik {
namespace pb {
const ::google::protobuf::EnumDescriptor* FaceAttributeReplyStatus_descriptor() {
  protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_face_5freply_2eproto::file_level_enum_descriptors[0];
}
bool FaceAttributeReplyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FaceQuality_descriptor() {
  protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_face_5freply_2eproto::file_level_enum_descriptors[1];
}
bool FaceQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FaceTokenReplyStatus_descriptor() {
  protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_face_5freply_2eproto::file_level_enum_descriptors[2];
}
bool FaceTokenReplyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TokenScore::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TokenScore::kTokenFieldNumber;
const int TokenScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TokenScore::TokenScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5freply_2eproto::scc_info_TokenScore.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.TokenScore)
}
TokenScore::TokenScore(const TokenScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&score_)) + sizeof(token_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.TokenScore)
}

void TokenScore::SharedCtor() {
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&score_)) + sizeof(token_));
}

TokenScore::~TokenScore() {
  // @@protoc_insertion_point(destructor:sputnik.pb.TokenScore)
  SharedDtor();
}

void TokenScore::SharedDtor() {
}

void TokenScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TokenScore::descriptor() {
  ::protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TokenScore& TokenScore::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5freply_2eproto::scc_info_TokenScore.base);
  return *internal_default_instance();
}


void TokenScore::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.TokenScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&score_)) + sizeof(token_));
  _internal_metadata_.Clear();
}

bool TokenScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.TokenScore)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.TokenScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.TokenScore)
  return false;
#undef DO_
}

void TokenScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.TokenScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // double score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.TokenScore)
}

::google::protobuf::uint8* TokenScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.TokenScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // double score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.TokenScore)
  return target;
}

size_t TokenScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.TokenScore)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double score = 2;
  if (this->score() != 0) {
    total_size += 1 + 8;
  }

  // int32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.TokenScore)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TokenScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.TokenScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.TokenScore)
    MergeFrom(*source);
  }
}

void TokenScore::MergeFrom(const TokenScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.TokenScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
}

void TokenScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.TokenScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenScore::CopyFrom(const TokenScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.TokenScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenScore::IsInitialized() const {
  return true;
}

void TokenScore::Swap(TokenScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TokenScore::InternalSwap(TokenScore* other) {
  using std::swap;
  swap(score_, other->score_);
  swap(token_, other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TokenScore::GetMetadata() const {
  protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceAttributeReply::InitAsDefaultInstance() {
  ::sputnik::pb::_FaceAttributeReply_default_instance_._instance.get_mutable()->attribute_ = const_cast< ::sputnik::pb::FaceAttribute*>(
      ::sputnik::pb::FaceAttribute::internal_default_instance());
}
void FaceAttributeReply::clear_attribute() {
  if (GetArenaNoVirtual() == NULL && attribute_ != NULL) {
    delete attribute_;
  }
  attribute_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceAttributeReply::kStatusFieldNumber;
const int FaceAttributeReply::kAttributeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceAttributeReply::FaceAttributeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5freply_2eproto::scc_info_FaceAttributeReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceAttributeReply)
}
FaceAttributeReply::FaceAttributeReply(const FaceAttributeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attribute()) {
    attribute_ = new ::sputnik::pb::FaceAttribute(*from.attribute_);
  } else {
    attribute_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceAttributeReply)
}

void FaceAttributeReply::SharedCtor() {
  ::memset(&attribute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&attribute_)) + sizeof(status_));
}

FaceAttributeReply::~FaceAttributeReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceAttributeReply)
  SharedDtor();
}

void FaceAttributeReply::SharedDtor() {
  if (this != internal_default_instance()) delete attribute_;
}

void FaceAttributeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceAttributeReply::descriptor() {
  ::protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceAttributeReply& FaceAttributeReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5freply_2eproto::scc_info_FaceAttributeReply.base);
  return *internal_default_instance();
}


void FaceAttributeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceAttributeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && attribute_ != NULL) {
    delete attribute_;
  }
  attribute_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

bool FaceAttributeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceAttributeReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.FaceAttributeReplyStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::sputnik::pb::FaceAttributeReplyStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceAttribute attribute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceAttributeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceAttributeReply)
  return false;
#undef DO_
}

void FaceAttributeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceAttributeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceAttributeReplyStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // .sputnik.pb.FaceAttribute attribute = 2;
  if (this->has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_attribute(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceAttributeReply)
}

::google::protobuf::uint8* FaceAttributeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceAttributeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceAttributeReplyStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // .sputnik.pb.FaceAttribute attribute = 2;
  if (this->has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_attribute(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceAttributeReply)
  return target;
}

size_t FaceAttributeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceAttributeReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.FaceAttribute attribute = 2;
  if (this->has_attribute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attribute_);
  }

  // .sputnik.pb.FaceAttributeReplyStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceAttributeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceAttributeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceAttributeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceAttributeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceAttributeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceAttributeReply)
    MergeFrom(*source);
  }
}

void FaceAttributeReply::MergeFrom(const FaceAttributeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceAttributeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attribute()) {
    mutable_attribute()->::sputnik::pb::FaceAttribute::MergeFrom(from.attribute());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void FaceAttributeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceAttributeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceAttributeReply::CopyFrom(const FaceAttributeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceAttributeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceAttributeReply::IsInitialized() const {
  return true;
}

void FaceAttributeReply::Swap(FaceAttributeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceAttributeReply::InternalSwap(FaceAttributeReply* other) {
  using std::swap;
  swap(attribute_, other->attribute_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceAttributeReply::GetMetadata() const {
  protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceFeatureVersion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceFeatureVersion::kModelVersionFieldNumber;
const int FaceFeatureVersion::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceFeatureVersion::FaceFeatureVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5freply_2eproto::scc_info_FaceFeatureVersion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceFeatureVersion)
}
FaceFeatureVersion::FaceFeatureVersion(const FaceFeatureVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_version().size() > 0) {
    model_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_version_);
  }
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method().size() > 0) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceFeatureVersion)
}

void FaceFeatureVersion::SharedCtor() {
  model_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FaceFeatureVersion::~FaceFeatureVersion() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceFeatureVersion)
  SharedDtor();
}

void FaceFeatureVersion::SharedDtor() {
  model_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FaceFeatureVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceFeatureVersion::descriptor() {
  ::protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceFeatureVersion& FaceFeatureVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5freply_2eproto::scc_info_FaceFeatureVersion.base);
  return *internal_default_instance();
}


void FaceFeatureVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceFeatureVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FaceFeatureVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceFeatureVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_version().data(), static_cast<int>(this->model_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.FaceFeatureVersion.model_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), static_cast<int>(this->method().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.FaceFeatureVersion.method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceFeatureVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceFeatureVersion)
  return false;
#undef DO_
}

void FaceFeatureVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceFeatureVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_version = 1;
  if (this->model_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_version().data(), static_cast<int>(this->model_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceFeatureVersion.model_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_version(), output);
  }

  // string method = 2;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceFeatureVersion.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceFeatureVersion)
}

::google::protobuf::uint8* FaceFeatureVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceFeatureVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_version = 1;
  if (this->model_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_version().data(), static_cast<int>(this->model_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceFeatureVersion.model_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_version(), target);
  }

  // string method = 2;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceFeatureVersion.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceFeatureVersion)
  return target;
}

size_t FaceFeatureVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceFeatureVersion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string model_version = 1;
  if (this->model_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_version());
  }

  // string method = 2;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceFeatureVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceFeatureVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceFeatureVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceFeatureVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceFeatureVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceFeatureVersion)
    MergeFrom(*source);
  }
}

void FaceFeatureVersion::MergeFrom(const FaceFeatureVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceFeatureVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_version().size() > 0) {

    model_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_version_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
}

void FaceFeatureVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceFeatureVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceFeatureVersion::CopyFrom(const FaceFeatureVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceFeatureVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceFeatureVersion::IsInitialized() const {
  return true;
}

void FaceFeatureVersion::Swap(FaceFeatureVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceFeatureVersion::InternalSwap(FaceFeatureVersion* other) {
  using std::swap;
  model_version_.Swap(&other->model_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_.Swap(&other->method_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceFeatureVersion::GetMetadata() const {
  protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceTokenReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceTokenReply::kStatusFieldNumber;
const int FaceTokenReply::kFaceQualityFieldNumber;
const int FaceTokenReply::kTokenFieldNumber;
const int FaceTokenReply::kBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceTokenReply::FaceTokenReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5freply_2eproto::scc_info_FaceTokenReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceTokenReply)
}
FaceTokenReply::FaceTokenReply(const FaceTokenReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blob().size() > 0) {
    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&status_)) + sizeof(token_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceTokenReply)
}

void FaceTokenReply::SharedCtor() {
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&status_)) + sizeof(token_));
}

FaceTokenReply::~FaceTokenReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceTokenReply)
  SharedDtor();
}

void FaceTokenReply::SharedDtor() {
  blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FaceTokenReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceTokenReply::descriptor() {
  ::protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceTokenReply& FaceTokenReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5freply_2eproto::scc_info_FaceTokenReply.base);
  return *internal_default_instance();
}


void FaceTokenReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceTokenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&status_)) + sizeof(token_));
  _internal_metadata_.Clear();
}

bool FaceTokenReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceTokenReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.FaceTokenReplyStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::sputnik::pb::FaceTokenReplyStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceQuality face_quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_face_quality(static_cast< ::sputnik::pb::FaceQuality >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes blob = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceTokenReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceTokenReply)
  return false;
#undef DO_
}

void FaceTokenReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceTokenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceTokenReplyStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // .sputnik.pb.FaceQuality face_quality = 2;
  if (this->face_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->face_quality(), output);
  }

  // int32 token = 3;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->token(), output);
  }

  // bytes blob = 4;
  if (this->blob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->blob(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceTokenReply)
}

::google::protobuf::uint8* FaceTokenReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceTokenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceTokenReplyStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // .sputnik.pb.FaceQuality face_quality = 2;
  if (this->face_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->face_quality(), target);
  }

  // int32 token = 3;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->token(), target);
  }

  // bytes blob = 4;
  if (this->blob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->blob(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceTokenReply)
  return target;
}

size_t FaceTokenReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceTokenReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes blob = 4;
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blob());
  }

  // .sputnik.pb.FaceTokenReplyStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .sputnik.pb.FaceQuality face_quality = 2;
  if (this->face_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_quality());
  }

  // int32 token = 3;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceTokenReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceTokenReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceTokenReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceTokenReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceTokenReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceTokenReply)
    MergeFrom(*source);
  }
}

void FaceTokenReply::MergeFrom(const FaceTokenReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceTokenReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.face_quality() != 0) {
    set_face_quality(from.face_quality());
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
}

void FaceTokenReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceTokenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceTokenReply::CopyFrom(const FaceTokenReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceTokenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceTokenReply::IsInitialized() const {
  return true;
}

void FaceTokenReply::Swap(FaceTokenReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceTokenReply::InternalSwap(FaceTokenReply* other) {
  using std::swap;
  blob_.Swap(&other->blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(face_quality_, other->face_quality_);
  swap(token_, other->token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceTokenReply::GetMetadata() const {
  protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceRecognitionReply::InitAsDefaultInstance() {
  ::sputnik::pb::_FaceRecognitionReply_default_instance_._instance.get_mutable()->token_reply_ = const_cast< ::sputnik::pb::FaceTokenReply*>(
      ::sputnik::pb::FaceTokenReply::internal_default_instance());
  ::sputnik::pb::_FaceRecognitionReply_default_instance_._instance.get_mutable()->feature_version_ = const_cast< ::sputnik::pb::FaceFeatureVersion*>(
      ::sputnik::pb::FaceFeatureVersion::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceRecognitionReply::kTokenReplyFieldNumber;
const int FaceRecognitionReply::kScoresFieldNumber;
const int FaceRecognitionReply::kFeatureVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceRecognitionReply::FaceRecognitionReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5freply_2eproto::scc_info_FaceRecognitionReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceRecognitionReply)
}
FaceRecognitionReply::FaceRecognitionReply(const FaceRecognitionReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scores_(from.scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_token_reply()) {
    token_reply_ = new ::sputnik::pb::FaceTokenReply(*from.token_reply_);
  } else {
    token_reply_ = NULL;
  }
  if (from.has_feature_version()) {
    feature_version_ = new ::sputnik::pb::FaceFeatureVersion(*from.feature_version_);
  } else {
    feature_version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceRecognitionReply)
}

void FaceRecognitionReply::SharedCtor() {
  ::memset(&token_reply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_version_) -
      reinterpret_cast<char*>(&token_reply_)) + sizeof(feature_version_));
}

FaceRecognitionReply::~FaceRecognitionReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceRecognitionReply)
  SharedDtor();
}

void FaceRecognitionReply::SharedDtor() {
  if (this != internal_default_instance()) delete token_reply_;
  if (this != internal_default_instance()) delete feature_version_;
}

void FaceRecognitionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceRecognitionReply::descriptor() {
  ::protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceRecognitionReply& FaceRecognitionReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5freply_2eproto::scc_info_FaceRecognitionReply.base);
  return *internal_default_instance();
}


void FaceRecognitionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceRecognitionReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scores_.Clear();
  if (GetArenaNoVirtual() == NULL && token_reply_ != NULL) {
    delete token_reply_;
  }
  token_reply_ = NULL;
  if (GetArenaNoVirtual() == NULL && feature_version_ != NULL) {
    delete feature_version_;
  }
  feature_version_ = NULL;
  _internal_metadata_.Clear();
}

bool FaceRecognitionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceRecognitionReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.FaceTokenReply token_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_token_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.TokenScore scores = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceFeatureVersion feature_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceRecognitionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceRecognitionReply)
  return false;
#undef DO_
}

void FaceRecognitionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceRecognitionReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceTokenReply token_reply = 1;
  if (this->has_token_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_token_reply(), output);
  }

  // repeated .sputnik.pb.TokenScore scores = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scores_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->scores(static_cast<int>(i)),
      output);
  }

  // .sputnik.pb.FaceFeatureVersion feature_version = 3;
  if (this->has_feature_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_feature_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceRecognitionReply)
}

::google::protobuf::uint8* FaceRecognitionReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceRecognitionReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceTokenReply token_reply = 1;
  if (this->has_token_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_token_reply(), deterministic, target);
  }

  // repeated .sputnik.pb.TokenScore scores = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scores_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->scores(static_cast<int>(i)), deterministic, target);
  }

  // .sputnik.pb.FaceFeatureVersion feature_version = 3;
  if (this->has_feature_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_feature_version(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceRecognitionReply)
  return target;
}

size_t FaceRecognitionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceRecognitionReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sputnik.pb.TokenScore scores = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->scores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->scores(static_cast<int>(i)));
    }
  }

  // .sputnik.pb.FaceTokenReply token_reply = 1;
  if (this->has_token_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *token_reply_);
  }

  // .sputnik.pb.FaceFeatureVersion feature_version = 3;
  if (this->has_feature_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *feature_version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceRecognitionReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceRecognitionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceRecognitionReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceRecognitionReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceRecognitionReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceRecognitionReply)
    MergeFrom(*source);
  }
}

void FaceRecognitionReply::MergeFrom(const FaceRecognitionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceRecognitionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scores_.MergeFrom(from.scores_);
  if (from.has_token_reply()) {
    mutable_token_reply()->::sputnik::pb::FaceTokenReply::MergeFrom(from.token_reply());
  }
  if (from.has_feature_version()) {
    mutable_feature_version()->::sputnik::pb::FaceFeatureVersion::MergeFrom(from.feature_version());
  }
}

void FaceRecognitionReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceRecognitionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceRecognitionReply::CopyFrom(const FaceRecognitionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceRecognitionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecognitionReply::IsInitialized() const {
  return true;
}

void FaceRecognitionReply::Swap(FaceRecognitionReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceRecognitionReply::InternalSwap(FaceRecognitionReply* other) {
  using std::swap;
  CastToBase(&scores_)->InternalSwap(CastToBase(&other->scores_));
  swap(token_reply_, other->token_reply_);
  swap(feature_version_, other->feature_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceRecognitionReply::GetMetadata() const {
  protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceReply::InitAsDefaultInstance() {
  ::sputnik::pb::_FaceReply_default_instance_._instance.get_mutable()->face_attribute_reply_ = const_cast< ::sputnik::pb::FaceAttributeReply*>(
      ::sputnik::pb::FaceAttributeReply::internal_default_instance());
  ::sputnik::pb::_FaceReply_default_instance_._instance.get_mutable()->face_recognition_reply_ = const_cast< ::sputnik::pb::FaceRecognitionReply*>(
      ::sputnik::pb::FaceRecognitionReply::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceReply::kFaceAttributeReplyFieldNumber;
const int FaceReply::kFaceRecognitionReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceReply::FaceReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5freply_2eproto::scc_info_FaceReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceReply)
}
FaceReply::FaceReply(const FaceReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_face_attribute_reply()) {
    face_attribute_reply_ = new ::sputnik::pb::FaceAttributeReply(*from.face_attribute_reply_);
  } else {
    face_attribute_reply_ = NULL;
  }
  if (from.has_face_recognition_reply()) {
    face_recognition_reply_ = new ::sputnik::pb::FaceRecognitionReply(*from.face_recognition_reply_);
  } else {
    face_recognition_reply_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceReply)
}

void FaceReply::SharedCtor() {
  ::memset(&face_attribute_reply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_recognition_reply_) -
      reinterpret_cast<char*>(&face_attribute_reply_)) + sizeof(face_recognition_reply_));
}

FaceReply::~FaceReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceReply)
  SharedDtor();
}

void FaceReply::SharedDtor() {
  if (this != internal_default_instance()) delete face_attribute_reply_;
  if (this != internal_default_instance()) delete face_recognition_reply_;
}

void FaceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceReply::descriptor() {
  ::protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceReply& FaceReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5freply_2eproto::scc_info_FaceReply.base);
  return *internal_default_instance();
}


void FaceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && face_attribute_reply_ != NULL) {
    delete face_attribute_reply_;
  }
  face_attribute_reply_ = NULL;
  if (GetArenaNoVirtual() == NULL && face_recognition_reply_ != NULL) {
    delete face_recognition_reply_;
  }
  face_recognition_reply_ = NULL;
  _internal_metadata_.Clear();
}

bool FaceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.FaceAttributeReply face_attribute_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_face_attribute_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceRecognitionReply face_recognition_reply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_face_recognition_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceReply)
  return false;
#undef DO_
}

void FaceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceAttributeReply face_attribute_reply = 1;
  if (this->has_face_attribute_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_face_attribute_reply(), output);
  }

  // .sputnik.pb.FaceRecognitionReply face_recognition_reply = 2;
  if (this->has_face_recognition_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_face_recognition_reply(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceReply)
}

::google::protobuf::uint8* FaceReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.FaceAttributeReply face_attribute_reply = 1;
  if (this->has_face_attribute_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_face_attribute_reply(), deterministic, target);
  }

  // .sputnik.pb.FaceRecognitionReply face_recognition_reply = 2;
  if (this->has_face_recognition_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_face_recognition_reply(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceReply)
  return target;
}

size_t FaceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.FaceAttributeReply face_attribute_reply = 1;
  if (this->has_face_attribute_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *face_attribute_reply_);
  }

  // .sputnik.pb.FaceRecognitionReply face_recognition_reply = 2;
  if (this->has_face_recognition_reply()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *face_recognition_reply_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceReply)
    MergeFrom(*source);
  }
}

void FaceReply::MergeFrom(const FaceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_face_attribute_reply()) {
    mutable_face_attribute_reply()->::sputnik::pb::FaceAttributeReply::MergeFrom(from.face_attribute_reply());
  }
  if (from.has_face_recognition_reply()) {
    mutable_face_recognition_reply()->::sputnik::pb::FaceRecognitionReply::MergeFrom(from.face_recognition_reply());
  }
}

void FaceReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceReply::CopyFrom(const FaceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceReply::IsInitialized() const {
  return true;
}

void FaceReply::Swap(FaceReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceReply::InternalSwap(FaceReply* other) {
  using std::swap;
  swap(face_attribute_reply_, other->face_attribute_reply_);
  swap(face_recognition_reply_, other->face_recognition_reply_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceReply::GetMetadata() const {
  protobuf_face_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::TokenScore* Arena::CreateMaybeMessage< ::sputnik::pb::TokenScore >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::TokenScore >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceAttributeReply* Arena::CreateMaybeMessage< ::sputnik::pb::FaceAttributeReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceAttributeReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceFeatureVersion* Arena::CreateMaybeMessage< ::sputnik::pb::FaceFeatureVersion >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceFeatureVersion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceTokenReply* Arena::CreateMaybeMessage< ::sputnik::pb::FaceTokenReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceTokenReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceRecognitionReply* Arena::CreateMaybeMessage< ::sputnik::pb::FaceRecognitionReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceRecognitionReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceReply* Arena::CreateMaybeMessage< ::sputnik::pb::FaceReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
