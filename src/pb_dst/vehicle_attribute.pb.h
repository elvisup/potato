// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_attribute.proto

#ifndef PROTOBUF_INCLUDED_vehicle_5fattribute_2eproto
#define PROTOBUF_INCLUDED_vehicle_5fattribute_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "box.pb.h"
#include "plate_attribute.pb.h"
#include "direction.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fattribute_2eproto 

namespace protobuf_vehicle_5fattribute_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vehicle_5fattribute_2eproto
namespace sputnik {
namespace pb {
class VehicleAttribute;
class VehicleAttributeDefaultTypeInternal;
extern VehicleAttributeDefaultTypeInternal _VehicleAttribute_default_instance_;
class VehicleAttribute_PlatePredict;
class VehicleAttribute_PlatePredictDefaultTypeInternal;
extern VehicleAttribute_PlatePredictDefaultTypeInternal _VehicleAttribute_PlatePredict_default_instance_;
class VehicleAttribute_VehicleColorPredict;
class VehicleAttribute_VehicleColorPredictDefaultTypeInternal;
extern VehicleAttribute_VehicleColorPredictDefaultTypeInternal _VehicleAttribute_VehicleColorPredict_default_instance_;
class VehicleAttribute_VehicleTypePredict;
class VehicleAttribute_VehicleTypePredictDefaultTypeInternal;
extern VehicleAttribute_VehicleTypePredictDefaultTypeInternal _VehicleAttribute_VehicleTypePredict_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::VehicleAttribute* Arena::CreateMaybeMessage<::sputnik::pb::VehicleAttribute>(Arena*);
template<> ::sputnik::pb::VehicleAttribute_PlatePredict* Arena::CreateMaybeMessage<::sputnik::pb::VehicleAttribute_PlatePredict>(Arena*);
template<> ::sputnik::pb::VehicleAttribute_VehicleColorPredict* Arena::CreateMaybeMessage<::sputnik::pb::VehicleAttribute_VehicleColorPredict>(Arena*);
template<> ::sputnik::pb::VehicleAttribute_VehicleTypePredict* Arena::CreateMaybeMessage<::sputnik::pb::VehicleAttribute_VehicleTypePredict>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

enum VehicleType {
  CAR = 0,
  SUV = 1,
  MICROBUS = 2,
  MINIBUS = 3,
  BUS = 4,
  PICKUP = 5,
  TRUCK = 6,
  VehicleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleType_IsValid(int value);
const VehicleType VehicleType_MIN = CAR;
const VehicleType VehicleType_MAX = TRUCK;
const int VehicleType_ARRAYSIZE = VehicleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleType_descriptor();
inline const ::std::string& VehicleType_Name(VehicleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleType_descriptor(), value);
}
inline bool VehicleType_Parse(
    const ::std::string& name, VehicleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleType>(
    VehicleType_descriptor(), name, value);
}
enum VehicleColor {
  BLUE = 0,
  YELLOW = 1,
  BLACK = 2,
  WHITE = 3,
  GREEN = 4,
  RED = 5,
  GRAY = 6,
  PURPLE = 7,
  PINK = 8,
  BROWN = 9,
  CYAN = 10,
  COLORFUL = 11,
  VehicleColor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleColor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleColor_IsValid(int value);
const VehicleColor VehicleColor_MIN = BLUE;
const VehicleColor VehicleColor_MAX = COLORFUL;
const int VehicleColor_ARRAYSIZE = VehicleColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleColor_descriptor();
inline const ::std::string& VehicleColor_Name(VehicleColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleColor_descriptor(), value);
}
inline bool VehicleColor_Parse(
    const ::std::string& name, VehicleColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleColor>(
    VehicleColor_descriptor(), name, value);
}
// ===================================================================

class VehicleAttribute_PlatePredict : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.VehicleAttribute.PlatePredict) */ {
 public:
  VehicleAttribute_PlatePredict();
  virtual ~VehicleAttribute_PlatePredict();

  VehicleAttribute_PlatePredict(const VehicleAttribute_PlatePredict& from);

  inline VehicleAttribute_PlatePredict& operator=(const VehicleAttribute_PlatePredict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleAttribute_PlatePredict(VehicleAttribute_PlatePredict&& from) noexcept
    : VehicleAttribute_PlatePredict() {
    *this = ::std::move(from);
  }

  inline VehicleAttribute_PlatePredict& operator=(VehicleAttribute_PlatePredict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleAttribute_PlatePredict& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleAttribute_PlatePredict* internal_default_instance() {
    return reinterpret_cast<const VehicleAttribute_PlatePredict*>(
               &_VehicleAttribute_PlatePredict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VehicleAttribute_PlatePredict* other);
  friend void swap(VehicleAttribute_PlatePredict& a, VehicleAttribute_PlatePredict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleAttribute_PlatePredict* New() const final {
    return CreateMaybeMessage<VehicleAttribute_PlatePredict>(NULL);
  }

  VehicleAttribute_PlatePredict* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleAttribute_PlatePredict>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleAttribute_PlatePredict& from);
  void MergeFrom(const VehicleAttribute_PlatePredict& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleAttribute_PlatePredict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sputnik.pb.Box plate_relative_box = 1;
  bool has_plate_relative_box() const;
  void clear_plate_relative_box();
  static const int kPlateRelativeBoxFieldNumber = 1;
  private:
  const ::sputnik::pb::Box& _internal_plate_relative_box() const;
  public:
  const ::sputnik::pb::Box& plate_relative_box() const;
  ::sputnik::pb::Box* release_plate_relative_box();
  ::sputnik::pb::Box* mutable_plate_relative_box();
  void set_allocated_plate_relative_box(::sputnik::pb::Box* plate_relative_box);

  // .sputnik.pb.PlateAttribute plate_attribute = 2;
  bool has_plate_attribute() const;
  void clear_plate_attribute();
  static const int kPlateAttributeFieldNumber = 2;
  private:
  const ::sputnik::pb::PlateAttribute& _internal_plate_attribute() const;
  public:
  const ::sputnik::pb::PlateAttribute& plate_attribute() const;
  ::sputnik::pb::PlateAttribute* release_plate_attribute();
  ::sputnik::pb::PlateAttribute* mutable_plate_attribute();
  void set_allocated_plate_attribute(::sputnik::pb::PlateAttribute* plate_attribute);

  // @@protoc_insertion_point(class_scope:sputnik.pb.VehicleAttribute.PlatePredict)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sputnik::pb::Box* plate_relative_box_;
  ::sputnik::pb::PlateAttribute* plate_attribute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vehicle_5fattribute_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleAttribute_VehicleTypePredict : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.VehicleAttribute.VehicleTypePredict) */ {
 public:
  VehicleAttribute_VehicleTypePredict();
  virtual ~VehicleAttribute_VehicleTypePredict();

  VehicleAttribute_VehicleTypePredict(const VehicleAttribute_VehicleTypePredict& from);

  inline VehicleAttribute_VehicleTypePredict& operator=(const VehicleAttribute_VehicleTypePredict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleAttribute_VehicleTypePredict(VehicleAttribute_VehicleTypePredict&& from) noexcept
    : VehicleAttribute_VehicleTypePredict() {
    *this = ::std::move(from);
  }

  inline VehicleAttribute_VehicleTypePredict& operator=(VehicleAttribute_VehicleTypePredict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleAttribute_VehicleTypePredict& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleAttribute_VehicleTypePredict* internal_default_instance() {
    return reinterpret_cast<const VehicleAttribute_VehicleTypePredict*>(
               &_VehicleAttribute_VehicleTypePredict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VehicleAttribute_VehicleTypePredict* other);
  friend void swap(VehicleAttribute_VehicleTypePredict& a, VehicleAttribute_VehicleTypePredict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleAttribute_VehicleTypePredict* New() const final {
    return CreateMaybeMessage<VehicleAttribute_VehicleTypePredict>(NULL);
  }

  VehicleAttribute_VehicleTypePredict* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleAttribute_VehicleTypePredict>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleAttribute_VehicleTypePredict& from);
  void MergeFrom(const VehicleAttribute_VehicleTypePredict& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleAttribute_VehicleTypePredict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sputnik.pb.VehicleType vehicle_type = 1;
  void clear_vehicle_type();
  static const int kVehicleTypeFieldNumber = 1;
  ::sputnik::pb::VehicleType vehicle_type() const;
  void set_vehicle_type(::sputnik::pb::VehicleType value);

  // int32 type_confidence = 2;
  void clear_type_confidence();
  static const int kTypeConfidenceFieldNumber = 2;
  ::google::protobuf::int32 type_confidence() const;
  void set_type_confidence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.VehicleAttribute.VehicleTypePredict)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int vehicle_type_;
  ::google::protobuf::int32 type_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vehicle_5fattribute_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleAttribute_VehicleColorPredict : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.VehicleAttribute.VehicleColorPredict) */ {
 public:
  VehicleAttribute_VehicleColorPredict();
  virtual ~VehicleAttribute_VehicleColorPredict();

  VehicleAttribute_VehicleColorPredict(const VehicleAttribute_VehicleColorPredict& from);

  inline VehicleAttribute_VehicleColorPredict& operator=(const VehicleAttribute_VehicleColorPredict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleAttribute_VehicleColorPredict(VehicleAttribute_VehicleColorPredict&& from) noexcept
    : VehicleAttribute_VehicleColorPredict() {
    *this = ::std::move(from);
  }

  inline VehicleAttribute_VehicleColorPredict& operator=(VehicleAttribute_VehicleColorPredict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleAttribute_VehicleColorPredict& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleAttribute_VehicleColorPredict* internal_default_instance() {
    return reinterpret_cast<const VehicleAttribute_VehicleColorPredict*>(
               &_VehicleAttribute_VehicleColorPredict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VehicleAttribute_VehicleColorPredict* other);
  friend void swap(VehicleAttribute_VehicleColorPredict& a, VehicleAttribute_VehicleColorPredict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleAttribute_VehicleColorPredict* New() const final {
    return CreateMaybeMessage<VehicleAttribute_VehicleColorPredict>(NULL);
  }

  VehicleAttribute_VehicleColorPredict* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleAttribute_VehicleColorPredict>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleAttribute_VehicleColorPredict& from);
  void MergeFrom(const VehicleAttribute_VehicleColorPredict& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleAttribute_VehicleColorPredict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sputnik.pb.VehicleColor vehicle_color = 1;
  void clear_vehicle_color();
  static const int kVehicleColorFieldNumber = 1;
  ::sputnik::pb::VehicleColor vehicle_color() const;
  void set_vehicle_color(::sputnik::pb::VehicleColor value);

  // int32 color_confidence = 2;
  void clear_color_confidence();
  static const int kColorConfidenceFieldNumber = 2;
  ::google::protobuf::int32 color_confidence() const;
  void set_color_confidence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.VehicleAttribute.VehicleColorPredict)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int vehicle_color_;
  ::google::protobuf::int32 color_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vehicle_5fattribute_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.VehicleAttribute) */ {
 public:
  VehicleAttribute();
  virtual ~VehicleAttribute();

  VehicleAttribute(const VehicleAttribute& from);

  inline VehicleAttribute& operator=(const VehicleAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleAttribute(VehicleAttribute&& from) noexcept
    : VehicleAttribute() {
    *this = ::std::move(from);
  }

  inline VehicleAttribute& operator=(VehicleAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleAttribute* internal_default_instance() {
    return reinterpret_cast<const VehicleAttribute*>(
               &_VehicleAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VehicleAttribute* other);
  friend void swap(VehicleAttribute& a, VehicleAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleAttribute* New() const final {
    return CreateMaybeMessage<VehicleAttribute>(NULL);
  }

  VehicleAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleAttribute& from);
  void MergeFrom(const VehicleAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VehicleAttribute_PlatePredict PlatePredict;
  typedef VehicleAttribute_VehicleTypePredict VehicleTypePredict;
  typedef VehicleAttribute_VehicleColorPredict VehicleColorPredict;

  // accessors -------------------------------------------------------

  // repeated .sputnik.pb.VehicleAttribute.PlatePredict plate_predicts = 2;
  int plate_predicts_size() const;
  void clear_plate_predicts();
  static const int kPlatePredictsFieldNumber = 2;
  ::sputnik::pb::VehicleAttribute_PlatePredict* mutable_plate_predicts(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_PlatePredict >*
      mutable_plate_predicts();
  const ::sputnik::pb::VehicleAttribute_PlatePredict& plate_predicts(int index) const;
  ::sputnik::pb::VehicleAttribute_PlatePredict* add_plate_predicts();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_PlatePredict >&
      plate_predicts() const;

  // repeated .sputnik.pb.VehicleAttribute.VehicleTypePredict type_predicts = 3;
  int type_predicts_size() const;
  void clear_type_predicts();
  static const int kTypePredictsFieldNumber = 3;
  ::sputnik::pb::VehicleAttribute_VehicleTypePredict* mutable_type_predicts(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleTypePredict >*
      mutable_type_predicts();
  const ::sputnik::pb::VehicleAttribute_VehicleTypePredict& type_predicts(int index) const;
  ::sputnik::pb::VehicleAttribute_VehicleTypePredict* add_type_predicts();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleTypePredict >&
      type_predicts() const;

  // repeated .sputnik.pb.VehicleAttribute.VehicleColorPredict color_predicts = 4;
  int color_predicts_size() const;
  void clear_color_predicts();
  static const int kColorPredictsFieldNumber = 4;
  ::sputnik::pb::VehicleAttribute_VehicleColorPredict* mutable_color_predicts(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleColorPredict >*
      mutable_color_predicts();
  const ::sputnik::pb::VehicleAttribute_VehicleColorPredict& color_predicts(int index) const;
  ::sputnik::pb::VehicleAttribute_VehicleColorPredict* add_color_predicts();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleColorPredict >&
      color_predicts() const;

  // string trademark_utf8 = 5;
  void clear_trademark_utf8();
  static const int kTrademarkUtf8FieldNumber = 5;
  const ::std::string& trademark_utf8() const;
  void set_trademark_utf8(const ::std::string& value);
  #if LANG_CXX11
  void set_trademark_utf8(::std::string&& value);
  #endif
  void set_trademark_utf8(const char* value);
  void set_trademark_utf8(const char* value, size_t size);
  ::std::string* mutable_trademark_utf8();
  ::std::string* release_trademark_utf8();
  void set_allocated_trademark_utf8(::std::string* trademark_utf8);

  // int32 vehicle_plateless = 6;
  void clear_vehicle_plateless();
  static const int kVehiclePlatelessFieldNumber = 6;
  ::google::protobuf::int32 vehicle_plateless() const;
  void set_vehicle_plateless(::google::protobuf::int32 value);

  // int32 vehicle_moving = 7;
  void clear_vehicle_moving();
  static const int kVehicleMovingFieldNumber = 7;
  ::google::protobuf::int32 vehicle_moving() const;
  void set_vehicle_moving(::google::protobuf::int32 value);

  // .sputnik.pb.Direction move_direction = 8;
  void clear_move_direction();
  static const int kMoveDirectionFieldNumber = 8;
  ::sputnik::pb::Direction move_direction() const;
  void set_move_direction(::sputnik::pb::Direction value);

  // int32 move_direction_confidence = 10;
  void clear_move_direction_confidence();
  static const int kMoveDirectionConfidenceFieldNumber = 10;
  ::google::protobuf::int32 move_direction_confidence() const;
  void set_move_direction_confidence(::google::protobuf::int32 value);

  // int32 trademark_utf8_confidence = 11;
  void clear_trademark_utf8_confidence();
  static const int kTrademarkUtf8ConfidenceFieldNumber = 11;
  ::google::protobuf::int32 trademark_utf8_confidence() const;
  void set_trademark_utf8_confidence(::google::protobuf::int32 value);

  // .sputnik.pb.Facing vehicle_facing = 12;
  void clear_vehicle_facing();
  static const int kVehicleFacingFieldNumber = 12;
  ::sputnik::pb::Facing vehicle_facing() const;
  void set_vehicle_facing(::sputnik::pb::Facing value);

  // int32 vehicle_facing_confidence = 13;
  void clear_vehicle_facing_confidence();
  static const int kVehicleFacingConfidenceFieldNumber = 13;
  ::google::protobuf::int32 vehicle_facing_confidence() const;
  void set_vehicle_facing_confidence(::google::protobuf::int32 value);

  // .sputnik.pb.Direction pointing_direction = 14;
  void clear_pointing_direction();
  static const int kPointingDirectionFieldNumber = 14;
  ::sputnik::pb::Direction pointing_direction() const;
  void set_pointing_direction(::sputnik::pb::Direction value);

  // int32 pointing_direction_confidence = 15;
  void clear_pointing_direction_confidence();
  static const int kPointingDirectionConfidenceFieldNumber = 15;
  ::google::protobuf::int32 pointing_direction_confidence() const;
  void set_pointing_direction_confidence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.VehicleAttribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_PlatePredict > plate_predicts_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleTypePredict > type_predicts_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleColorPredict > color_predicts_;
  ::google::protobuf::internal::ArenaStringPtr trademark_utf8_;
  ::google::protobuf::int32 vehicle_plateless_;
  ::google::protobuf::int32 vehicle_moving_;
  int move_direction_;
  ::google::protobuf::int32 move_direction_confidence_;
  ::google::protobuf::int32 trademark_utf8_confidence_;
  int vehicle_facing_;
  ::google::protobuf::int32 vehicle_facing_confidence_;
  int pointing_direction_;
  ::google::protobuf::int32 pointing_direction_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vehicle_5fattribute_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleAttribute_PlatePredict

// .sputnik.pb.Box plate_relative_box = 1;
inline bool VehicleAttribute_PlatePredict::has_plate_relative_box() const {
  return this != internal_default_instance() && plate_relative_box_ != NULL;
}
inline const ::sputnik::pb::Box& VehicleAttribute_PlatePredict::_internal_plate_relative_box() const {
  return *plate_relative_box_;
}
inline const ::sputnik::pb::Box& VehicleAttribute_PlatePredict::plate_relative_box() const {
  const ::sputnik::pb::Box* p = plate_relative_box_;
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.PlatePredict.plate_relative_box)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::Box*>(
      &::sputnik::pb::_Box_default_instance_);
}
inline ::sputnik::pb::Box* VehicleAttribute_PlatePredict::release_plate_relative_box() {
  // @@protoc_insertion_point(field_release:sputnik.pb.VehicleAttribute.PlatePredict.plate_relative_box)
  
  ::sputnik::pb::Box* temp = plate_relative_box_;
  plate_relative_box_ = NULL;
  return temp;
}
inline ::sputnik::pb::Box* VehicleAttribute_PlatePredict::mutable_plate_relative_box() {
  
  if (plate_relative_box_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::Box>(GetArenaNoVirtual());
    plate_relative_box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.VehicleAttribute.PlatePredict.plate_relative_box)
  return plate_relative_box_;
}
inline void VehicleAttribute_PlatePredict::set_allocated_plate_relative_box(::sputnik::pb::Box* plate_relative_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(plate_relative_box_);
  }
  if (plate_relative_box) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plate_relative_box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plate_relative_box, submessage_arena);
    }
    
  } else {
    
  }
  plate_relative_box_ = plate_relative_box;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.VehicleAttribute.PlatePredict.plate_relative_box)
}

// .sputnik.pb.PlateAttribute plate_attribute = 2;
inline bool VehicleAttribute_PlatePredict::has_plate_attribute() const {
  return this != internal_default_instance() && plate_attribute_ != NULL;
}
inline const ::sputnik::pb::PlateAttribute& VehicleAttribute_PlatePredict::_internal_plate_attribute() const {
  return *plate_attribute_;
}
inline const ::sputnik::pb::PlateAttribute& VehicleAttribute_PlatePredict::plate_attribute() const {
  const ::sputnik::pb::PlateAttribute* p = plate_attribute_;
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.PlatePredict.plate_attribute)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::PlateAttribute*>(
      &::sputnik::pb::_PlateAttribute_default_instance_);
}
inline ::sputnik::pb::PlateAttribute* VehicleAttribute_PlatePredict::release_plate_attribute() {
  // @@protoc_insertion_point(field_release:sputnik.pb.VehicleAttribute.PlatePredict.plate_attribute)
  
  ::sputnik::pb::PlateAttribute* temp = plate_attribute_;
  plate_attribute_ = NULL;
  return temp;
}
inline ::sputnik::pb::PlateAttribute* VehicleAttribute_PlatePredict::mutable_plate_attribute() {
  
  if (plate_attribute_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::PlateAttribute>(GetArenaNoVirtual());
    plate_attribute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.VehicleAttribute.PlatePredict.plate_attribute)
  return plate_attribute_;
}
inline void VehicleAttribute_PlatePredict::set_allocated_plate_attribute(::sputnik::pb::PlateAttribute* plate_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(plate_attribute_);
  }
  if (plate_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plate_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plate_attribute, submessage_arena);
    }
    
  } else {
    
  }
  plate_attribute_ = plate_attribute;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.VehicleAttribute.PlatePredict.plate_attribute)
}

// -------------------------------------------------------------------

// VehicleAttribute_VehicleTypePredict

// .sputnik.pb.VehicleType vehicle_type = 1;
inline void VehicleAttribute_VehicleTypePredict::clear_vehicle_type() {
  vehicle_type_ = 0;
}
inline ::sputnik::pb::VehicleType VehicleAttribute_VehicleTypePredict::vehicle_type() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.VehicleTypePredict.vehicle_type)
  return static_cast< ::sputnik::pb::VehicleType >(vehicle_type_);
}
inline void VehicleAttribute_VehicleTypePredict::set_vehicle_type(::sputnik::pb::VehicleType value) {
  
  vehicle_type_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.VehicleTypePredict.vehicle_type)
}

// int32 type_confidence = 2;
inline void VehicleAttribute_VehicleTypePredict::clear_type_confidence() {
  type_confidence_ = 0;
}
inline ::google::protobuf::int32 VehicleAttribute_VehicleTypePredict::type_confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.VehicleTypePredict.type_confidence)
  return type_confidence_;
}
inline void VehicleAttribute_VehicleTypePredict::set_type_confidence(::google::protobuf::int32 value) {
  
  type_confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.VehicleTypePredict.type_confidence)
}

// -------------------------------------------------------------------

// VehicleAttribute_VehicleColorPredict

// .sputnik.pb.VehicleColor vehicle_color = 1;
inline void VehicleAttribute_VehicleColorPredict::clear_vehicle_color() {
  vehicle_color_ = 0;
}
inline ::sputnik::pb::VehicleColor VehicleAttribute_VehicleColorPredict::vehicle_color() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.VehicleColorPredict.vehicle_color)
  return static_cast< ::sputnik::pb::VehicleColor >(vehicle_color_);
}
inline void VehicleAttribute_VehicleColorPredict::set_vehicle_color(::sputnik::pb::VehicleColor value) {
  
  vehicle_color_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.VehicleColorPredict.vehicle_color)
}

// int32 color_confidence = 2;
inline void VehicleAttribute_VehicleColorPredict::clear_color_confidence() {
  color_confidence_ = 0;
}
inline ::google::protobuf::int32 VehicleAttribute_VehicleColorPredict::color_confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.VehicleColorPredict.color_confidence)
  return color_confidence_;
}
inline void VehicleAttribute_VehicleColorPredict::set_color_confidence(::google::protobuf::int32 value) {
  
  color_confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.VehicleColorPredict.color_confidence)
}

// -------------------------------------------------------------------

// VehicleAttribute

// repeated .sputnik.pb.VehicleAttribute.PlatePredict plate_predicts = 2;
inline int VehicleAttribute::plate_predicts_size() const {
  return plate_predicts_.size();
}
inline void VehicleAttribute::clear_plate_predicts() {
  plate_predicts_.Clear();
}
inline ::sputnik::pb::VehicleAttribute_PlatePredict* VehicleAttribute::mutable_plate_predicts(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.VehicleAttribute.plate_predicts)
  return plate_predicts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_PlatePredict >*
VehicleAttribute::mutable_plate_predicts() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.VehicleAttribute.plate_predicts)
  return &plate_predicts_;
}
inline const ::sputnik::pb::VehicleAttribute_PlatePredict& VehicleAttribute::plate_predicts(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.plate_predicts)
  return plate_predicts_.Get(index);
}
inline ::sputnik::pb::VehicleAttribute_PlatePredict* VehicleAttribute::add_plate_predicts() {
  // @@protoc_insertion_point(field_add:sputnik.pb.VehicleAttribute.plate_predicts)
  return plate_predicts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_PlatePredict >&
VehicleAttribute::plate_predicts() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.VehicleAttribute.plate_predicts)
  return plate_predicts_;
}

// repeated .sputnik.pb.VehicleAttribute.VehicleTypePredict type_predicts = 3;
inline int VehicleAttribute::type_predicts_size() const {
  return type_predicts_.size();
}
inline void VehicleAttribute::clear_type_predicts() {
  type_predicts_.Clear();
}
inline ::sputnik::pb::VehicleAttribute_VehicleTypePredict* VehicleAttribute::mutable_type_predicts(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.VehicleAttribute.type_predicts)
  return type_predicts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleTypePredict >*
VehicleAttribute::mutable_type_predicts() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.VehicleAttribute.type_predicts)
  return &type_predicts_;
}
inline const ::sputnik::pb::VehicleAttribute_VehicleTypePredict& VehicleAttribute::type_predicts(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.type_predicts)
  return type_predicts_.Get(index);
}
inline ::sputnik::pb::VehicleAttribute_VehicleTypePredict* VehicleAttribute::add_type_predicts() {
  // @@protoc_insertion_point(field_add:sputnik.pb.VehicleAttribute.type_predicts)
  return type_predicts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleTypePredict >&
VehicleAttribute::type_predicts() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.VehicleAttribute.type_predicts)
  return type_predicts_;
}

// repeated .sputnik.pb.VehicleAttribute.VehicleColorPredict color_predicts = 4;
inline int VehicleAttribute::color_predicts_size() const {
  return color_predicts_.size();
}
inline void VehicleAttribute::clear_color_predicts() {
  color_predicts_.Clear();
}
inline ::sputnik::pb::VehicleAttribute_VehicleColorPredict* VehicleAttribute::mutable_color_predicts(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.VehicleAttribute.color_predicts)
  return color_predicts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleColorPredict >*
VehicleAttribute::mutable_color_predicts() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.VehicleAttribute.color_predicts)
  return &color_predicts_;
}
inline const ::sputnik::pb::VehicleAttribute_VehicleColorPredict& VehicleAttribute::color_predicts(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.color_predicts)
  return color_predicts_.Get(index);
}
inline ::sputnik::pb::VehicleAttribute_VehicleColorPredict* VehicleAttribute::add_color_predicts() {
  // @@protoc_insertion_point(field_add:sputnik.pb.VehicleAttribute.color_predicts)
  return color_predicts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::VehicleAttribute_VehicleColorPredict >&
VehicleAttribute::color_predicts() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.VehicleAttribute.color_predicts)
  return color_predicts_;
}

// string trademark_utf8 = 5;
inline void VehicleAttribute::clear_trademark_utf8() {
  trademark_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleAttribute::trademark_utf8() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.trademark_utf8)
  return trademark_utf8_.GetNoArena();
}
inline void VehicleAttribute::set_trademark_utf8(const ::std::string& value) {
  
  trademark_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.trademark_utf8)
}
#if LANG_CXX11
inline void VehicleAttribute::set_trademark_utf8(::std::string&& value) {
  
  trademark_utf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.VehicleAttribute.trademark_utf8)
}
#endif
inline void VehicleAttribute::set_trademark_utf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trademark_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.VehicleAttribute.trademark_utf8)
}
inline void VehicleAttribute::set_trademark_utf8(const char* value, size_t size) {
  
  trademark_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.VehicleAttribute.trademark_utf8)
}
inline ::std::string* VehicleAttribute::mutable_trademark_utf8() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.VehicleAttribute.trademark_utf8)
  return trademark_utf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleAttribute::release_trademark_utf8() {
  // @@protoc_insertion_point(field_release:sputnik.pb.VehicleAttribute.trademark_utf8)
  
  return trademark_utf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleAttribute::set_allocated_trademark_utf8(::std::string* trademark_utf8) {
  if (trademark_utf8 != NULL) {
    
  } else {
    
  }
  trademark_utf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trademark_utf8);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.VehicleAttribute.trademark_utf8)
}

// int32 trademark_utf8_confidence = 11;
inline void VehicleAttribute::clear_trademark_utf8_confidence() {
  trademark_utf8_confidence_ = 0;
}
inline ::google::protobuf::int32 VehicleAttribute::trademark_utf8_confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.trademark_utf8_confidence)
  return trademark_utf8_confidence_;
}
inline void VehicleAttribute::set_trademark_utf8_confidence(::google::protobuf::int32 value) {
  
  trademark_utf8_confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.trademark_utf8_confidence)
}

// int32 vehicle_plateless = 6;
inline void VehicleAttribute::clear_vehicle_plateless() {
  vehicle_plateless_ = 0;
}
inline ::google::protobuf::int32 VehicleAttribute::vehicle_plateless() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.vehicle_plateless)
  return vehicle_plateless_;
}
inline void VehicleAttribute::set_vehicle_plateless(::google::protobuf::int32 value) {
  
  vehicle_plateless_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.vehicle_plateless)
}

// int32 vehicle_moving = 7;
inline void VehicleAttribute::clear_vehicle_moving() {
  vehicle_moving_ = 0;
}
inline ::google::protobuf::int32 VehicleAttribute::vehicle_moving() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.vehicle_moving)
  return vehicle_moving_;
}
inline void VehicleAttribute::set_vehicle_moving(::google::protobuf::int32 value) {
  
  vehicle_moving_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.vehicle_moving)
}

// .sputnik.pb.Direction move_direction = 8;
inline void VehicleAttribute::clear_move_direction() {
  move_direction_ = 0;
}
inline ::sputnik::pb::Direction VehicleAttribute::move_direction() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.move_direction)
  return static_cast< ::sputnik::pb::Direction >(move_direction_);
}
inline void VehicleAttribute::set_move_direction(::sputnik::pb::Direction value) {
  
  move_direction_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.move_direction)
}

// int32 move_direction_confidence = 10;
inline void VehicleAttribute::clear_move_direction_confidence() {
  move_direction_confidence_ = 0;
}
inline ::google::protobuf::int32 VehicleAttribute::move_direction_confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.move_direction_confidence)
  return move_direction_confidence_;
}
inline void VehicleAttribute::set_move_direction_confidence(::google::protobuf::int32 value) {
  
  move_direction_confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.move_direction_confidence)
}

// .sputnik.pb.Direction pointing_direction = 14;
inline void VehicleAttribute::clear_pointing_direction() {
  pointing_direction_ = 0;
}
inline ::sputnik::pb::Direction VehicleAttribute::pointing_direction() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.pointing_direction)
  return static_cast< ::sputnik::pb::Direction >(pointing_direction_);
}
inline void VehicleAttribute::set_pointing_direction(::sputnik::pb::Direction value) {
  
  pointing_direction_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.pointing_direction)
}

// int32 pointing_direction_confidence = 15;
inline void VehicleAttribute::clear_pointing_direction_confidence() {
  pointing_direction_confidence_ = 0;
}
inline ::google::protobuf::int32 VehicleAttribute::pointing_direction_confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.pointing_direction_confidence)
  return pointing_direction_confidence_;
}
inline void VehicleAttribute::set_pointing_direction_confidence(::google::protobuf::int32 value) {
  
  pointing_direction_confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.pointing_direction_confidence)
}

// .sputnik.pb.Facing vehicle_facing = 12;
inline void VehicleAttribute::clear_vehicle_facing() {
  vehicle_facing_ = 0;
}
inline ::sputnik::pb::Facing VehicleAttribute::vehicle_facing() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.vehicle_facing)
  return static_cast< ::sputnik::pb::Facing >(vehicle_facing_);
}
inline void VehicleAttribute::set_vehicle_facing(::sputnik::pb::Facing value) {
  
  vehicle_facing_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.vehicle_facing)
}

// int32 vehicle_facing_confidence = 13;
inline void VehicleAttribute::clear_vehicle_facing_confidence() {
  vehicle_facing_confidence_ = 0;
}
inline ::google::protobuf::int32 VehicleAttribute::vehicle_facing_confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VehicleAttribute.vehicle_facing_confidence)
  return vehicle_facing_confidence_;
}
inline void VehicleAttribute::set_vehicle_facing_confidence(::google::protobuf::int32 value) {
  
  vehicle_facing_confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.VehicleAttribute.vehicle_facing_confidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sputnik::pb::VehicleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sputnik::pb::VehicleType>() {
  return ::sputnik::pb::VehicleType_descriptor();
}
template <> struct is_proto_enum< ::sputnik::pb::VehicleColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sputnik::pb::VehicleColor>() {
  return ::sputnik::pb::VehicleColor_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vehicle_5fattribute_2eproto
