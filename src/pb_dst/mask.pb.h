// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mask.proto

#ifndef PROTOBUF_INCLUDED_mask_2eproto
#define PROTOBUF_INCLUDED_mask_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mask_2eproto 

namespace protobuf_mask_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mask_2eproto
namespace sputnik {
namespace pb {
class Mask;
class MaskDefaultTypeInternal;
extern MaskDefaultTypeInternal _Mask_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::Mask* Arena::CreateMaybeMessage<::sputnik::pb::Mask>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

// ===================================================================

class Mask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.Mask) */ {
 public:
  Mask();
  virtual ~Mask();

  Mask(const Mask& from);

  inline Mask& operator=(const Mask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mask(Mask&& from) noexcept
    : Mask() {
    *this = ::std::move(from);
  }

  inline Mask& operator=(Mask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mask* internal_default_instance() {
    return reinterpret_cast<const Mask*>(
               &_Mask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Mask* other);
  friend void swap(Mask& a, Mask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mask* New() const final {
    return CreateMaybeMessage<Mask>(NULL);
  }

  Mask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mask& from);
  void MergeFrom(const Mask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pix_confidence = 6;
  int pix_confidence_size() const;
  void clear_pix_confidence();
  static const int kPixConfidenceFieldNumber = 6;
  ::google::protobuf::int32 pix_confidence(int index) const;
  void set_pix_confidence(int index, ::google::protobuf::int32 value);
  void add_pix_confidence(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pix_confidence() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pix_confidence();

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 w = 3;
  void clear_w();
  static const int kWFieldNumber = 3;
  ::google::protobuf::int32 w() const;
  void set_w(::google::protobuf::int32 value);

  // int32 h = 4;
  void clear_h();
  static const int kHFieldNumber = 4;
  ::google::protobuf::int32 h() const;
  void set_h(::google::protobuf::int32 value);

  // int32 resolution = 5;
  void clear_resolution();
  static const int kResolutionFieldNumber = 5;
  ::google::protobuf::int32 resolution() const;
  void set_resolution(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.Mask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pix_confidence_;
  mutable int _pix_confidence_cached_byte_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 resolution_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mask_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mask

// int32 x = 1;
inline void Mask::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Mask::x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Mask.x)
  return x_;
}
inline void Mask::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Mask.x)
}

// int32 y = 2;
inline void Mask::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Mask::y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Mask.y)
  return y_;
}
inline void Mask::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Mask.y)
}

// int32 w = 3;
inline void Mask::clear_w() {
  w_ = 0;
}
inline ::google::protobuf::int32 Mask::w() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Mask.w)
  return w_;
}
inline void Mask::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Mask.w)
}

// int32 h = 4;
inline void Mask::clear_h() {
  h_ = 0;
}
inline ::google::protobuf::int32 Mask::h() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Mask.h)
  return h_;
}
inline void Mask::set_h(::google::protobuf::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Mask.h)
}

// int32 resolution = 5;
inline void Mask::clear_resolution() {
  resolution_ = 0;
}
inline ::google::protobuf::int32 Mask::resolution() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Mask.resolution)
  return resolution_;
}
inline void Mask::set_resolution(::google::protobuf::int32 value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Mask.resolution)
}

// repeated int32 pix_confidence = 6;
inline int Mask::pix_confidence_size() const {
  return pix_confidence_.size();
}
inline void Mask::clear_pix_confidence() {
  pix_confidence_.Clear();
}
inline ::google::protobuf::int32 Mask::pix_confidence(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Mask.pix_confidence)
  return pix_confidence_.Get(index);
}
inline void Mask::set_pix_confidence(int index, ::google::protobuf::int32 value) {
  pix_confidence_.Set(index, value);
  // @@protoc_insertion_point(field_set:sputnik.pb.Mask.pix_confidence)
}
inline void Mask::add_pix_confidence(::google::protobuf::int32 value) {
  pix_confidence_.Add(value);
  // @@protoc_insertion_point(field_add:sputnik.pb.Mask.pix_confidence)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Mask::pix_confidence() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Mask.pix_confidence)
  return pix_confidence_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Mask::mutable_pix_confidence() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Mask.pix_confidence)
  return &pix_confidence_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mask_2eproto
