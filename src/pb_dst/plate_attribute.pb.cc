// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plate_attribute.proto

#include "plate_attribute.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_plate_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plate_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlateAttribute_FourPoints;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plate_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlateAttribute_PlateColorPredict;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plate_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlateToken;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plate_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlateAttribute_PlateTextPredict;
}  // namespace protobuf_plate_5fattribute_2eproto
namespace sputnik {
namespace pb {
class PlateTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlateToken>
      _instance;
} _PlateToken_default_instance_;
class PlateAttribute_PlateTextPredictDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlateAttribute_PlateTextPredict>
      _instance;
} _PlateAttribute_PlateTextPredict_default_instance_;
class PlateAttribute_PlateColorPredictDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlateAttribute_PlateColorPredict>
      _instance;
} _PlateAttribute_PlateColorPredict_default_instance_;
class PlateAttribute_FourPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlateAttribute_FourPoints>
      _instance;
} _PlateAttribute_FourPoints_default_instance_;
class PlateAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlateAttribute>
      _instance;
} _PlateAttribute_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_plate_5fattribute_2eproto {
static void InitDefaultsPlateToken() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_PlateToken_default_instance_;
    new (ptr) ::sputnik::pb::PlateToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::PlateToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlateToken =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlateToken}, {}};

static void InitDefaultsPlateAttribute_PlateTextPredict() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_PlateAttribute_PlateTextPredict_default_instance_;
    new (ptr) ::sputnik::pb::PlateAttribute_PlateTextPredict();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::PlateAttribute_PlateTextPredict::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlateAttribute_PlateTextPredict =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlateAttribute_PlateTextPredict}, {
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateToken.base,}};

static void InitDefaultsPlateAttribute_PlateColorPredict() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_PlateAttribute_PlateColorPredict_default_instance_;
    new (ptr) ::sputnik::pb::PlateAttribute_PlateColorPredict();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::PlateAttribute_PlateColorPredict::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlateAttribute_PlateColorPredict =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlateAttribute_PlateColorPredict}, {}};

static void InitDefaultsPlateAttribute_FourPoints() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_PlateAttribute_FourPoints_default_instance_;
    new (ptr) ::sputnik::pb::PlateAttribute_FourPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::PlateAttribute_FourPoints::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlateAttribute_FourPoints =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlateAttribute_FourPoints}, {}};

static void InitDefaultsPlateAttribute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_PlateAttribute_default_instance_;
    new (ptr) ::sputnik::pb::PlateAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::PlateAttribute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PlateAttribute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPlateAttribute}, {
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute_PlateTextPredict.base,
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute_PlateColorPredict.base,
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute_FourPoints.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlateToken.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlateAttribute_PlateTextPredict.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlateAttribute_PlateColorPredict.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlateAttribute_FourPoints.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlateAttribute.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateToken, str_utf8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateToken, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_PlateTextPredict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_PlateTextPredict, str_utf8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_PlateTextPredict, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_PlateTextPredict, tokens_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_PlateColorPredict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_PlateColorPredict, color_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_PlateColorPredict, color_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_FourPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_FourPoints, left_top_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_FourPoints, left_top_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_FourPoints, right_top_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_FourPoints, right_top_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_FourPoints, right_bottom_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_FourPoints, right_bottom_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_FourPoints, left_bottom_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute_FourPoints, left_bottom_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute, plate_numbers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute, color_predicts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute, fout_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute, plate_style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::PlateAttribute, adversary_occlusion_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::PlateToken)},
  { 7, -1, sizeof(::sputnik::pb::PlateAttribute_PlateTextPredict)},
  { 15, -1, sizeof(::sputnik::pb::PlateAttribute_PlateColorPredict)},
  { 22, -1, sizeof(::sputnik::pb::PlateAttribute_FourPoints)},
  { 35, -1, sizeof(::sputnik::pb::PlateAttribute)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_PlateToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_PlateAttribute_PlateTextPredict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_PlateAttribute_PlateColorPredict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_PlateAttribute_FourPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_PlateAttribute_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "plate_attribute.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025plate_attribute.proto\022\nsputnik.pb\"2\n\nP"
      "lateToken\022\020\n\010str_utf8\030\001 \001(\t\022\022\n\nconfidenc"
      "e\030\002 \001(\005\"\247\005\n\016PlateAttribute\022\014\n\004roll\030\001 \001(\021"
      "\022B\n\rplate_numbers\030\t \003(\0132+.sputnik.pb.Pla"
      "teAttribute.PlateTextPredict\022\017\n\007quality\030"
      "\003 \001(\005\022D\n\016color_predicts\030\005 \003(\0132,.sputnik."
      "pb.PlateAttribute.PlateColorPredict\022:\n\013f"
      "out_points\030\006 \001(\0132%.sputnik.pb.PlateAttri"
      "bute.FourPoints\022\023\n\013plate_style\030\007 \001(\005\022\033\n\023"
      "adversary_occlusion\030\010 \001(\005\032`\n\020PlateTextPr"
      "edict\022\020\n\010str_utf8\030\001 \001(\t\022\022\n\nconfidence\030\002 "
      "\001(\005\022&\n\006tokens\030\003 \003(\0132\026.sputnik.pb.PlateTo"
      "ken\032]\n\021PlateColorPredict\022.\n\ncolor_type\030\001"
      " \001(\0162\032.sputnik.pb.PlateColorType\022\030\n\020colo"
      "r_confidence\030\002 \001(\005\032\274\001\n\nFourPoints\022\022\n\nlef"
      "t_top_x\030\001 \001(\005\022\022\n\nleft_top_y\030\002 \001(\005\022\023\n\013rig"
      "ht_top_x\030\003 \001(\005\022\023\n\013right_top_y\030\004 \001(\005\022\026\n\016r"
      "ight_bottom_x\030\005 \001(\005\022\026\n\016right_bottom_y\030\006 "
      "\001(\005\022\025\n\rleft_bottom_x\030\007 \001(\005\022\025\n\rleft_botto"
      "m_y\030\010 \001(\005*\260\001\n\016PlateColorType\022\016\n\nPLATE_BL"
      "UE\020\000\022\020\n\014PLATE_YELLOW\020\001\022\017\n\013PLATE_BLACK\020\002\022"
      "\017\n\013PLATE_WHITE\020\003\022\017\n\013PLATE_GREEN\020\004\022\032\n\026PLA"
      "TE_SMALL_NEW_ENERGY\020\005\022\032\n\026PLATE_LARGE_NEW"
      "_ENERGY\020\006\022\021\n\rPLATE_ABSENCE\020\007b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 956);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plate_attribute.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_plate_5fattribute_2eproto
namespace sputnik {
namespace pb {
const ::google::protobuf::EnumDescriptor* PlateColorType_descriptor() {
  protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plate_5fattribute_2eproto::file_level_enum_descriptors[0];
}
bool PlateColorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlateToken::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlateToken::kStrUtf8FieldNumber;
const int PlateToken::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlateToken::PlateToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateToken.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.PlateToken)
}
PlateToken::PlateToken(const PlateToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str_utf8().size() > 0) {
    str_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_utf8_);
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.PlateToken)
}

void PlateToken::SharedCtor() {
  str_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

PlateToken::~PlateToken() {
  // @@protoc_insertion_point(destructor:sputnik.pb.PlateToken)
  SharedDtor();
}

void PlateToken::SharedDtor() {
  str_utf8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlateToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlateToken::descriptor() {
  ::protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlateToken& PlateToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plate_5fattribute_2eproto::scc_info_PlateToken.base);
  return *internal_default_instance();
}


void PlateToken::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.PlateToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  _internal_metadata_.Clear();
}

bool PlateToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.PlateToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string str_utf8 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_utf8()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str_utf8().data(), static_cast<int>(this->str_utf8().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.PlateToken.str_utf8"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.PlateToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.PlateToken)
  return false;
#undef DO_
}

void PlateToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.PlateToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str_utf8 = 1;
  if (this->str_utf8().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_utf8().data(), static_cast<int>(this->str_utf8().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.PlateToken.str_utf8");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str_utf8(), output);
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.PlateToken)
}

::google::protobuf::uint8* PlateToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.PlateToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str_utf8 = 1;
  if (this->str_utf8().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_utf8().data(), static_cast<int>(this->str_utf8().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.PlateToken.str_utf8");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str_utf8(), target);
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.PlateToken)
  return target;
}

size_t PlateToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.PlateToken)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string str_utf8 = 1;
  if (this->str_utf8().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_utf8());
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confidence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlateToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.PlateToken)
  GOOGLE_DCHECK_NE(&from, this);
  const PlateToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlateToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.PlateToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.PlateToken)
    MergeFrom(*source);
  }
}

void PlateToken::MergeFrom(const PlateToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.PlateToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str_utf8().size() > 0) {

    str_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_utf8_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void PlateToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.PlateToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlateToken::CopyFrom(const PlateToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.PlateToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlateToken::IsInitialized() const {
  return true;
}

void PlateToken::Swap(PlateToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlateToken::InternalSwap(PlateToken* other) {
  using std::swap;
  str_utf8_.Swap(&other->str_utf8_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlateToken::GetMetadata() const {
  protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlateAttribute_PlateTextPredict::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlateAttribute_PlateTextPredict::kStrUtf8FieldNumber;
const int PlateAttribute_PlateTextPredict::kConfidenceFieldNumber;
const int PlateAttribute_PlateTextPredict::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlateAttribute_PlateTextPredict::PlateAttribute_PlateTextPredict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute_PlateTextPredict.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.PlateAttribute.PlateTextPredict)
}
PlateAttribute_PlateTextPredict::PlateAttribute_PlateTextPredict(const PlateAttribute_PlateTextPredict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str_utf8().size() > 0) {
    str_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_utf8_);
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.PlateAttribute.PlateTextPredict)
}

void PlateAttribute_PlateTextPredict::SharedCtor() {
  str_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

PlateAttribute_PlateTextPredict::~PlateAttribute_PlateTextPredict() {
  // @@protoc_insertion_point(destructor:sputnik.pb.PlateAttribute.PlateTextPredict)
  SharedDtor();
}

void PlateAttribute_PlateTextPredict::SharedDtor() {
  str_utf8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlateAttribute_PlateTextPredict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlateAttribute_PlateTextPredict::descriptor() {
  ::protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlateAttribute_PlateTextPredict& PlateAttribute_PlateTextPredict::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute_PlateTextPredict.base);
  return *internal_default_instance();
}


void PlateAttribute_PlateTextPredict::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.PlateAttribute.PlateTextPredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  str_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  _internal_metadata_.Clear();
}

bool PlateAttribute_PlateTextPredict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.PlateAttribute.PlateTextPredict)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string str_utf8 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_utf8()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str_utf8().data(), static_cast<int>(this->str_utf8().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.PlateToken tokens = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.PlateAttribute.PlateTextPredict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.PlateAttribute.PlateTextPredict)
  return false;
#undef DO_
}

void PlateAttribute_PlateTextPredict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.PlateAttribute.PlateTextPredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str_utf8 = 1;
  if (this->str_utf8().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_utf8().data(), static_cast<int>(this->str_utf8().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str_utf8(), output);
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confidence(), output);
  }

  // repeated .sputnik.pb.PlateToken tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tokens(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.PlateAttribute.PlateTextPredict)
}

::google::protobuf::uint8* PlateAttribute_PlateTextPredict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.PlateAttribute.PlateTextPredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str_utf8 = 1;
  if (this->str_utf8().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_utf8().data(), static_cast<int>(this->str_utf8().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str_utf8(), target);
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confidence(), target);
  }

  // repeated .sputnik.pb.PlateToken tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tokens(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.PlateAttribute.PlateTextPredict)
  return target;
}

size_t PlateAttribute_PlateTextPredict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.PlateAttribute.PlateTextPredict)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sputnik.pb.PlateToken tokens = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tokens(static_cast<int>(i)));
    }
  }

  // string str_utf8 = 1;
  if (this->str_utf8().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_utf8());
  }

  // int32 confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confidence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlateAttribute_PlateTextPredict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.PlateAttribute.PlateTextPredict)
  GOOGLE_DCHECK_NE(&from, this);
  const PlateAttribute_PlateTextPredict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlateAttribute_PlateTextPredict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.PlateAttribute.PlateTextPredict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.PlateAttribute.PlateTextPredict)
    MergeFrom(*source);
  }
}

void PlateAttribute_PlateTextPredict::MergeFrom(const PlateAttribute_PlateTextPredict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.PlateAttribute.PlateTextPredict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.str_utf8().size() > 0) {

    str_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_utf8_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void PlateAttribute_PlateTextPredict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.PlateAttribute.PlateTextPredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlateAttribute_PlateTextPredict::CopyFrom(const PlateAttribute_PlateTextPredict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.PlateAttribute.PlateTextPredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlateAttribute_PlateTextPredict::IsInitialized() const {
  return true;
}

void PlateAttribute_PlateTextPredict::Swap(PlateAttribute_PlateTextPredict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlateAttribute_PlateTextPredict::InternalSwap(PlateAttribute_PlateTextPredict* other) {
  using std::swap;
  CastToBase(&tokens_)->InternalSwap(CastToBase(&other->tokens_));
  str_utf8_.Swap(&other->str_utf8_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlateAttribute_PlateTextPredict::GetMetadata() const {
  protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlateAttribute_PlateColorPredict::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlateAttribute_PlateColorPredict::kColorTypeFieldNumber;
const int PlateAttribute_PlateColorPredict::kColorConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlateAttribute_PlateColorPredict::PlateAttribute_PlateColorPredict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute_PlateColorPredict.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.PlateAttribute.PlateColorPredict)
}
PlateAttribute_PlateColorPredict::PlateAttribute_PlateColorPredict(const PlateAttribute_PlateColorPredict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_type_, &from.color_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_confidence_) -
    reinterpret_cast<char*>(&color_type_)) + sizeof(color_confidence_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.PlateAttribute.PlateColorPredict)
}

void PlateAttribute_PlateColorPredict::SharedCtor() {
  ::memset(&color_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_confidence_) -
      reinterpret_cast<char*>(&color_type_)) + sizeof(color_confidence_));
}

PlateAttribute_PlateColorPredict::~PlateAttribute_PlateColorPredict() {
  // @@protoc_insertion_point(destructor:sputnik.pb.PlateAttribute.PlateColorPredict)
  SharedDtor();
}

void PlateAttribute_PlateColorPredict::SharedDtor() {
}

void PlateAttribute_PlateColorPredict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlateAttribute_PlateColorPredict::descriptor() {
  ::protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlateAttribute_PlateColorPredict& PlateAttribute_PlateColorPredict::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute_PlateColorPredict.base);
  return *internal_default_instance();
}


void PlateAttribute_PlateColorPredict::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.PlateAttribute.PlateColorPredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&color_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_confidence_) -
      reinterpret_cast<char*>(&color_type_)) + sizeof(color_confidence_));
  _internal_metadata_.Clear();
}

bool PlateAttribute_PlateColorPredict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.PlateAttribute.PlateColorPredict)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.PlateColorType color_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color_type(static_cast< ::sputnik::pb::PlateColorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 color_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.PlateAttribute.PlateColorPredict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.PlateAttribute.PlateColorPredict)
  return false;
#undef DO_
}

void PlateAttribute_PlateColorPredict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.PlateAttribute.PlateColorPredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.PlateColorType color_type = 1;
  if (this->color_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color_type(), output);
  }

  // int32 color_confidence = 2;
  if (this->color_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.PlateAttribute.PlateColorPredict)
}

::google::protobuf::uint8* PlateAttribute_PlateColorPredict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.PlateAttribute.PlateColorPredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.PlateColorType color_type = 1;
  if (this->color_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color_type(), target);
  }

  // int32 color_confidence = 2;
  if (this->color_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color_confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.PlateAttribute.PlateColorPredict)
  return target;
}

size_t PlateAttribute_PlateColorPredict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.PlateAttribute.PlateColorPredict)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.PlateColorType color_type = 1;
  if (this->color_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color_type());
  }

  // int32 color_confidence = 2;
  if (this->color_confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color_confidence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlateAttribute_PlateColorPredict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.PlateAttribute.PlateColorPredict)
  GOOGLE_DCHECK_NE(&from, this);
  const PlateAttribute_PlateColorPredict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlateAttribute_PlateColorPredict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.PlateAttribute.PlateColorPredict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.PlateAttribute.PlateColorPredict)
    MergeFrom(*source);
  }
}

void PlateAttribute_PlateColorPredict::MergeFrom(const PlateAttribute_PlateColorPredict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.PlateAttribute.PlateColorPredict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color_type() != 0) {
    set_color_type(from.color_type());
  }
  if (from.color_confidence() != 0) {
    set_color_confidence(from.color_confidence());
  }
}

void PlateAttribute_PlateColorPredict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.PlateAttribute.PlateColorPredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlateAttribute_PlateColorPredict::CopyFrom(const PlateAttribute_PlateColorPredict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.PlateAttribute.PlateColorPredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlateAttribute_PlateColorPredict::IsInitialized() const {
  return true;
}

void PlateAttribute_PlateColorPredict::Swap(PlateAttribute_PlateColorPredict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlateAttribute_PlateColorPredict::InternalSwap(PlateAttribute_PlateColorPredict* other) {
  using std::swap;
  swap(color_type_, other->color_type_);
  swap(color_confidence_, other->color_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlateAttribute_PlateColorPredict::GetMetadata() const {
  protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlateAttribute_FourPoints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlateAttribute_FourPoints::kLeftTopXFieldNumber;
const int PlateAttribute_FourPoints::kLeftTopYFieldNumber;
const int PlateAttribute_FourPoints::kRightTopXFieldNumber;
const int PlateAttribute_FourPoints::kRightTopYFieldNumber;
const int PlateAttribute_FourPoints::kRightBottomXFieldNumber;
const int PlateAttribute_FourPoints::kRightBottomYFieldNumber;
const int PlateAttribute_FourPoints::kLeftBottomXFieldNumber;
const int PlateAttribute_FourPoints::kLeftBottomYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlateAttribute_FourPoints::PlateAttribute_FourPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute_FourPoints.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.PlateAttribute.FourPoints)
}
PlateAttribute_FourPoints::PlateAttribute_FourPoints(const PlateAttribute_FourPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_top_x_, &from.left_top_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_bottom_y_) -
    reinterpret_cast<char*>(&left_top_x_)) + sizeof(left_bottom_y_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.PlateAttribute.FourPoints)
}

void PlateAttribute_FourPoints::SharedCtor() {
  ::memset(&left_top_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_bottom_y_) -
      reinterpret_cast<char*>(&left_top_x_)) + sizeof(left_bottom_y_));
}

PlateAttribute_FourPoints::~PlateAttribute_FourPoints() {
  // @@protoc_insertion_point(destructor:sputnik.pb.PlateAttribute.FourPoints)
  SharedDtor();
}

void PlateAttribute_FourPoints::SharedDtor() {
}

void PlateAttribute_FourPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlateAttribute_FourPoints::descriptor() {
  ::protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlateAttribute_FourPoints& PlateAttribute_FourPoints::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute_FourPoints.base);
  return *internal_default_instance();
}


void PlateAttribute_FourPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.PlateAttribute.FourPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_top_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_bottom_y_) -
      reinterpret_cast<char*>(&left_top_x_)) + sizeof(left_bottom_y_));
  _internal_metadata_.Clear();
}

bool PlateAttribute_FourPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.PlateAttribute.FourPoints)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 left_top_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_top_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_top_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_top_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_top_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_top_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_top_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_top_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_bottom_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_bottom_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_bottom_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_bottom_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_bottom_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_bottom_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_bottom_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_bottom_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.PlateAttribute.FourPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.PlateAttribute.FourPoints)
  return false;
#undef DO_
}

void PlateAttribute_FourPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.PlateAttribute.FourPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left_top_x = 1;
  if (this->left_top_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left_top_x(), output);
  }

  // int32 left_top_y = 2;
  if (this->left_top_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_top_y(), output);
  }

  // int32 right_top_x = 3;
  if (this->right_top_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right_top_x(), output);
  }

  // int32 right_top_y = 4;
  if (this->right_top_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_top_y(), output);
  }

  // int32 right_bottom_x = 5;
  if (this->right_bottom_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->right_bottom_x(), output);
  }

  // int32 right_bottom_y = 6;
  if (this->right_bottom_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->right_bottom_y(), output);
  }

  // int32 left_bottom_x = 7;
  if (this->left_bottom_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->left_bottom_x(), output);
  }

  // int32 left_bottom_y = 8;
  if (this->left_bottom_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->left_bottom_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.PlateAttribute.FourPoints)
}

::google::protobuf::uint8* PlateAttribute_FourPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.PlateAttribute.FourPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left_top_x = 1;
  if (this->left_top_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left_top_x(), target);
  }

  // int32 left_top_y = 2;
  if (this->left_top_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_top_y(), target);
  }

  // int32 right_top_x = 3;
  if (this->right_top_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right_top_x(), target);
  }

  // int32 right_top_y = 4;
  if (this->right_top_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right_top_y(), target);
  }

  // int32 right_bottom_x = 5;
  if (this->right_bottom_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->right_bottom_x(), target);
  }

  // int32 right_bottom_y = 6;
  if (this->right_bottom_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->right_bottom_y(), target);
  }

  // int32 left_bottom_x = 7;
  if (this->left_bottom_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->left_bottom_x(), target);
  }

  // int32 left_bottom_y = 8;
  if (this->left_bottom_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->left_bottom_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.PlateAttribute.FourPoints)
  return target;
}

size_t PlateAttribute_FourPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.PlateAttribute.FourPoints)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 left_top_x = 1;
  if (this->left_top_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_top_x());
  }

  // int32 left_top_y = 2;
  if (this->left_top_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_top_y());
  }

  // int32 right_top_x = 3;
  if (this->right_top_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_top_x());
  }

  // int32 right_top_y = 4;
  if (this->right_top_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_top_y());
  }

  // int32 right_bottom_x = 5;
  if (this->right_bottom_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_bottom_x());
  }

  // int32 right_bottom_y = 6;
  if (this->right_bottom_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_bottom_y());
  }

  // int32 left_bottom_x = 7;
  if (this->left_bottom_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_bottom_x());
  }

  // int32 left_bottom_y = 8;
  if (this->left_bottom_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_bottom_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlateAttribute_FourPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.PlateAttribute.FourPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const PlateAttribute_FourPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlateAttribute_FourPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.PlateAttribute.FourPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.PlateAttribute.FourPoints)
    MergeFrom(*source);
  }
}

void PlateAttribute_FourPoints::MergeFrom(const PlateAttribute_FourPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.PlateAttribute.FourPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left_top_x() != 0) {
    set_left_top_x(from.left_top_x());
  }
  if (from.left_top_y() != 0) {
    set_left_top_y(from.left_top_y());
  }
  if (from.right_top_x() != 0) {
    set_right_top_x(from.right_top_x());
  }
  if (from.right_top_y() != 0) {
    set_right_top_y(from.right_top_y());
  }
  if (from.right_bottom_x() != 0) {
    set_right_bottom_x(from.right_bottom_x());
  }
  if (from.right_bottom_y() != 0) {
    set_right_bottom_y(from.right_bottom_y());
  }
  if (from.left_bottom_x() != 0) {
    set_left_bottom_x(from.left_bottom_x());
  }
  if (from.left_bottom_y() != 0) {
    set_left_bottom_y(from.left_bottom_y());
  }
}

void PlateAttribute_FourPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.PlateAttribute.FourPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlateAttribute_FourPoints::CopyFrom(const PlateAttribute_FourPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.PlateAttribute.FourPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlateAttribute_FourPoints::IsInitialized() const {
  return true;
}

void PlateAttribute_FourPoints::Swap(PlateAttribute_FourPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlateAttribute_FourPoints::InternalSwap(PlateAttribute_FourPoints* other) {
  using std::swap;
  swap(left_top_x_, other->left_top_x_);
  swap(left_top_y_, other->left_top_y_);
  swap(right_top_x_, other->right_top_x_);
  swap(right_top_y_, other->right_top_y_);
  swap(right_bottom_x_, other->right_bottom_x_);
  swap(right_bottom_y_, other->right_bottom_y_);
  swap(left_bottom_x_, other->left_bottom_x_);
  swap(left_bottom_y_, other->left_bottom_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlateAttribute_FourPoints::GetMetadata() const {
  protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlateAttribute::InitAsDefaultInstance() {
  ::sputnik::pb::_PlateAttribute_default_instance_._instance.get_mutable()->fout_points_ = const_cast< ::sputnik::pb::PlateAttribute_FourPoints*>(
      ::sputnik::pb::PlateAttribute_FourPoints::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlateAttribute::kRollFieldNumber;
const int PlateAttribute::kPlateNumbersFieldNumber;
const int PlateAttribute::kQualityFieldNumber;
const int PlateAttribute::kColorPredictsFieldNumber;
const int PlateAttribute::kFoutPointsFieldNumber;
const int PlateAttribute::kPlateStyleFieldNumber;
const int PlateAttribute::kAdversaryOcclusionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlateAttribute::PlateAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.PlateAttribute)
}
PlateAttribute::PlateAttribute(const PlateAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      color_predicts_(from.color_predicts_),
      plate_numbers_(from.plate_numbers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fout_points()) {
    fout_points_ = new ::sputnik::pb::PlateAttribute_FourPoints(*from.fout_points_);
  } else {
    fout_points_ = NULL;
  }
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&adversary_occlusion_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(adversary_occlusion_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.PlateAttribute)
}

void PlateAttribute::SharedCtor() {
  ::memset(&fout_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adversary_occlusion_) -
      reinterpret_cast<char*>(&fout_points_)) + sizeof(adversary_occlusion_));
}

PlateAttribute::~PlateAttribute() {
  // @@protoc_insertion_point(destructor:sputnik.pb.PlateAttribute)
  SharedDtor();
}

void PlateAttribute::SharedDtor() {
  if (this != internal_default_instance()) delete fout_points_;
}

void PlateAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlateAttribute::descriptor() {
  ::protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlateAttribute& PlateAttribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute.base);
  return *internal_default_instance();
}


void PlateAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.PlateAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_predicts_.Clear();
  plate_numbers_.Clear();
  if (GetArenaNoVirtual() == NULL && fout_points_ != NULL) {
    delete fout_points_;
  }
  fout_points_ = NULL;
  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adversary_occlusion_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(adversary_occlusion_));
  _internal_metadata_.Clear();
}

bool PlateAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.PlateAttribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 roll = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 quality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.PlateAttribute.PlateColorPredict color_predicts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_color_predicts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.PlateAttribute.FourPoints fout_points = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fout_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 plate_style = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plate_style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 adversary_occlusion = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adversary_occlusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.PlateAttribute.PlateTextPredict plate_numbers = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_plate_numbers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.PlateAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.PlateAttribute)
  return false;
#undef DO_
}

void PlateAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.PlateAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 roll = 1;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->roll(), output);
  }

  // int32 quality = 3;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // repeated .sputnik.pb.PlateAttribute.PlateColorPredict color_predicts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->color_predicts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->color_predicts(static_cast<int>(i)),
      output);
  }

  // .sputnik.pb.PlateAttribute.FourPoints fout_points = 6;
  if (this->has_fout_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_fout_points(), output);
  }

  // int32 plate_style = 7;
  if (this->plate_style() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->plate_style(), output);
  }

  // int32 adversary_occlusion = 8;
  if (this->adversary_occlusion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->adversary_occlusion(), output);
  }

  // repeated .sputnik.pb.PlateAttribute.PlateTextPredict plate_numbers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plate_numbers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->plate_numbers(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.PlateAttribute)
}

::google::protobuf::uint8* PlateAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.PlateAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 roll = 1;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->roll(), target);
  }

  // int32 quality = 3;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // repeated .sputnik.pb.PlateAttribute.PlateColorPredict color_predicts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->color_predicts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->color_predicts(static_cast<int>(i)), deterministic, target);
  }

  // .sputnik.pb.PlateAttribute.FourPoints fout_points = 6;
  if (this->has_fout_points()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_fout_points(), deterministic, target);
  }

  // int32 plate_style = 7;
  if (this->plate_style() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->plate_style(), target);
  }

  // int32 adversary_occlusion = 8;
  if (this->adversary_occlusion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->adversary_occlusion(), target);
  }

  // repeated .sputnik.pb.PlateAttribute.PlateTextPredict plate_numbers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plate_numbers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->plate_numbers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.PlateAttribute)
  return target;
}

size_t PlateAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.PlateAttribute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sputnik.pb.PlateAttribute.PlateColorPredict color_predicts = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->color_predicts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->color_predicts(static_cast<int>(i)));
    }
  }

  // repeated .sputnik.pb.PlateAttribute.PlateTextPredict plate_numbers = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->plate_numbers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->plate_numbers(static_cast<int>(i)));
    }
  }

  // .sputnik.pb.PlateAttribute.FourPoints fout_points = 6;
  if (this->has_fout_points()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fout_points_);
  }

  // sint32 roll = 1;
  if (this->roll() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->roll());
  }

  // int32 quality = 3;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quality());
  }

  // int32 plate_style = 7;
  if (this->plate_style() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->plate_style());
  }

  // int32 adversary_occlusion = 8;
  if (this->adversary_occlusion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->adversary_occlusion());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlateAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.PlateAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const PlateAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlateAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.PlateAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.PlateAttribute)
    MergeFrom(*source);
  }
}

void PlateAttribute::MergeFrom(const PlateAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.PlateAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  color_predicts_.MergeFrom(from.color_predicts_);
  plate_numbers_.MergeFrom(from.plate_numbers_);
  if (from.has_fout_points()) {
    mutable_fout_points()->::sputnik::pb::PlateAttribute_FourPoints::MergeFrom(from.fout_points());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.plate_style() != 0) {
    set_plate_style(from.plate_style());
  }
  if (from.adversary_occlusion() != 0) {
    set_adversary_occlusion(from.adversary_occlusion());
  }
}

void PlateAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.PlateAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlateAttribute::CopyFrom(const PlateAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.PlateAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlateAttribute::IsInitialized() const {
  return true;
}

void PlateAttribute::Swap(PlateAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlateAttribute::InternalSwap(PlateAttribute* other) {
  using std::swap;
  CastToBase(&color_predicts_)->InternalSwap(CastToBase(&other->color_predicts_));
  CastToBase(&plate_numbers_)->InternalSwap(CastToBase(&other->plate_numbers_));
  swap(fout_points_, other->fout_points_);
  swap(roll_, other->roll_);
  swap(quality_, other->quality_);
  swap(plate_style_, other->plate_style_);
  swap(adversary_occlusion_, other->adversary_occlusion_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlateAttribute::GetMetadata() const {
  protobuf_plate_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plate_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::PlateToken* Arena::CreateMaybeMessage< ::sputnik::pb::PlateToken >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::PlateToken >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::PlateAttribute_PlateTextPredict* Arena::CreateMaybeMessage< ::sputnik::pb::PlateAttribute_PlateTextPredict >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::PlateAttribute_PlateTextPredict >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::PlateAttribute_PlateColorPredict* Arena::CreateMaybeMessage< ::sputnik::pb::PlateAttribute_PlateColorPredict >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::PlateAttribute_PlateColorPredict >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::PlateAttribute_FourPoints* Arena::CreateMaybeMessage< ::sputnik::pb::PlateAttribute_FourPoints >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::PlateAttribute_FourPoints >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::PlateAttribute* Arena::CreateMaybeMessage< ::sputnik::pb::PlateAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::PlateAttribute >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
