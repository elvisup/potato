// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_post.proto

#ifndef PROTOBUF_INCLUDED_meta_5fpost_2eproto
#define PROTOBUF_INCLUDED_meta_5fpost_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cluster_query.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_meta_5fpost_2eproto 

namespace protobuf_meta_5fpost_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_meta_5fpost_2eproto
namespace sputnik {
namespace pb {
class MetaPost;
class MetaPostDefaultTypeInternal;
extern MetaPostDefaultTypeInternal _MetaPost_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::MetaPost* Arena::CreateMaybeMessage<::sputnik::pb::MetaPost>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

enum MetaPostType {
  COLOR_NAME_RGB_QUERY = 0,
  FEATURE_LIST_UPDATE = 1,
  CLUSTER_QUERY = 2,
  MetaPostType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MetaPostType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MetaPostType_IsValid(int value);
const MetaPostType MetaPostType_MIN = COLOR_NAME_RGB_QUERY;
const MetaPostType MetaPostType_MAX = CLUSTER_QUERY;
const int MetaPostType_ARRAYSIZE = MetaPostType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetaPostType_descriptor();
inline const ::std::string& MetaPostType_Name(MetaPostType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetaPostType_descriptor(), value);
}
inline bool MetaPostType_Parse(
    const ::std::string& name, MetaPostType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetaPostType>(
    MetaPostType_descriptor(), name, value);
}
// ===================================================================

class MetaPost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.MetaPost) */ {
 public:
  MetaPost();
  virtual ~MetaPost();

  MetaPost(const MetaPost& from);

  inline MetaPost& operator=(const MetaPost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetaPost(MetaPost&& from) noexcept
    : MetaPost() {
    *this = ::std::move(from);
  }

  inline MetaPost& operator=(MetaPost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaPost& default_instance();

  enum PostCase {
    kClusterQuery = 3,
    POST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaPost* internal_default_instance() {
    return reinterpret_cast<const MetaPost*>(
               &_MetaPost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MetaPost* other);
  friend void swap(MetaPost& a, MetaPost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetaPost* New() const final {
    return CreateMaybeMessage<MetaPost>(NULL);
  }

  MetaPost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MetaPost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MetaPost& from);
  void MergeFrom(const MetaPost& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaPost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sputnik.pb.MetaPostType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sputnik::pb::MetaPostType type() const;
  void set_type(::sputnik::pb::MetaPostType value);

  // int32 post_id = 2;
  void clear_post_id();
  static const int kPostIdFieldNumber = 2;
  ::google::protobuf::int32 post_id() const;
  void set_post_id(::google::protobuf::int32 value);

  // int64 timestamp_millis = 4;
  void clear_timestamp_millis();
  static const int kTimestampMillisFieldNumber = 4;
  ::google::protobuf::int64 timestamp_millis() const;
  void set_timestamp_millis(::google::protobuf::int64 value);

  // .sputnik.pb.ClusterQuery cluster_query = 3;
  bool has_cluster_query() const;
  void clear_cluster_query();
  static const int kClusterQueryFieldNumber = 3;
  private:
  const ::sputnik::pb::ClusterQuery& _internal_cluster_query() const;
  public:
  const ::sputnik::pb::ClusterQuery& cluster_query() const;
  ::sputnik::pb::ClusterQuery* release_cluster_query();
  ::sputnik::pb::ClusterQuery* mutable_cluster_query();
  void set_allocated_cluster_query(::sputnik::pb::ClusterQuery* cluster_query);

  void clear_post();
  PostCase post_case() const;
  // @@protoc_insertion_point(class_scope:sputnik.pb.MetaPost)
 private:
  void set_has_cluster_query();

  inline bool has_post() const;
  inline void clear_has_post();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::google::protobuf::int32 post_id_;
  ::google::protobuf::int64 timestamp_millis_;
  union PostUnion {
    PostUnion() {}
    ::sputnik::pb::ClusterQuery* cluster_query_;
  } post_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_meta_5fpost_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetaPost

// .sputnik.pb.MetaPostType type = 1;
inline void MetaPost::clear_type() {
  type_ = 0;
}
inline ::sputnik::pb::MetaPostType MetaPost::type() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MetaPost.type)
  return static_cast< ::sputnik::pb::MetaPostType >(type_);
}
inline void MetaPost::set_type(::sputnik::pb::MetaPostType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.MetaPost.type)
}

// int32 post_id = 2;
inline void MetaPost::clear_post_id() {
  post_id_ = 0;
}
inline ::google::protobuf::int32 MetaPost::post_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MetaPost.post_id)
  return post_id_;
}
inline void MetaPost::set_post_id(::google::protobuf::int32 value) {
  
  post_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.MetaPost.post_id)
}

// .sputnik.pb.ClusterQuery cluster_query = 3;
inline bool MetaPost::has_cluster_query() const {
  return post_case() == kClusterQuery;
}
inline void MetaPost::set_has_cluster_query() {
  _oneof_case_[0] = kClusterQuery;
}
inline const ::sputnik::pb::ClusterQuery& MetaPost::_internal_cluster_query() const {
  return *post_.cluster_query_;
}
inline ::sputnik::pb::ClusterQuery* MetaPost::release_cluster_query() {
  // @@protoc_insertion_point(field_release:sputnik.pb.MetaPost.cluster_query)
  if (has_cluster_query()) {
    clear_has_post();
      ::sputnik::pb::ClusterQuery* temp = post_.cluster_query_;
    post_.cluster_query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::ClusterQuery& MetaPost::cluster_query() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MetaPost.cluster_query)
  return has_cluster_query()
      ? *post_.cluster_query_
      : *reinterpret_cast< ::sputnik::pb::ClusterQuery*>(&::sputnik::pb::_ClusterQuery_default_instance_);
}
inline ::sputnik::pb::ClusterQuery* MetaPost::mutable_cluster_query() {
  if (!has_cluster_query()) {
    clear_post();
    set_has_cluster_query();
    post_.cluster_query_ = CreateMaybeMessage< ::sputnik::pb::ClusterQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.MetaPost.cluster_query)
  return post_.cluster_query_;
}

// int64 timestamp_millis = 4;
inline void MetaPost::clear_timestamp_millis() {
  timestamp_millis_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MetaPost::timestamp_millis() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MetaPost.timestamp_millis)
  return timestamp_millis_;
}
inline void MetaPost::set_timestamp_millis(::google::protobuf::int64 value) {
  
  timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.MetaPost.timestamp_millis)
}

inline bool MetaPost::has_post() const {
  return post_case() != POST_NOT_SET;
}
inline void MetaPost::clear_has_post() {
  _oneof_case_[0] = POST_NOT_SET;
}
inline MetaPost::PostCase MetaPost::post_case() const {
  return MetaPost::PostCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sputnik::pb::MetaPostType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sputnik::pb::MetaPostType>() {
  return ::sputnik::pb::MetaPostType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_meta_5fpost_2eproto
