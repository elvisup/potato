// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#ifndef PROTOBUF_INCLUDED_item_2eproto
#define PROTOBUF_INCLUDED_item_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "box.pb.h"
#include "face_attribute.pb.h"
#include "plate_attribute.pb.h"
#include "vehicle_attribute.pb.h"
#include "human_attribute.pb.h"
#include "mask.pb.h"
#include "image.pb.h"
#include "trace_point.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_item_2eproto 

namespace protobuf_item_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_item_2eproto
namespace sputnik {
namespace pb {
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::Item* Arena::CreateMaybeMessage<::sputnik::pb::Item>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

enum ItemType {
  FACE = 0,
  PLATE = 1,
  VEHICLE = 2,
  HUMAN = 3,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ItemType_IsValid(int value);
const ItemType ItemType_MIN = FACE;
const ItemType ItemType_MAX = HUMAN;
const int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemType_descriptor();
inline const ::std::string& ItemType_Name(ItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemType_descriptor(), value);
}
inline bool ItemType_Parse(
    const ::std::string& name, ItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
// ===================================================================

class Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  enum AttributeCase {
    kFaceAttribute = 9,
    kPlateAttribute = 10,
    kVehicleAttribute = 11,
    kHumanAttribute = 13,
    ATTRIBUTE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Item* other);
  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(NULL);
  }

  Item* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sputnik.pb.TracePoint trace = 16;
  int trace_size() const;
  void clear_trace();
  static const int kTraceFieldNumber = 16;
  ::sputnik::pb::TracePoint* mutable_trace(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
      mutable_trace();
  const ::sputnik::pb::TracePoint& trace(int index) const;
  ::sputnik::pb::TracePoint* add_trace();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
      trace() const;

  // string item_text_utf8 = 17;
  void clear_item_text_utf8();
  static const int kItemTextUtf8FieldNumber = 17;
  const ::std::string& item_text_utf8() const;
  void set_item_text_utf8(const ::std::string& value);
  #if LANG_CXX11
  void set_item_text_utf8(::std::string&& value);
  #endif
  void set_item_text_utf8(const char* value);
  void set_item_text_utf8(const char* value, size_t size);
  ::std::string* mutable_item_text_utf8();
  ::std::string* release_item_text_utf8();
  void set_allocated_item_text_utf8(::std::string* item_text_utf8);

  // bytes blob = 18;
  void clear_blob();
  static const int kBlobFieldNumber = 18;
  const ::std::string& blob() const;
  void set_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_blob(::std::string&& value);
  #endif
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  ::std::string* mutable_blob();
  ::std::string* release_blob();
  void set_allocated_blob(::std::string* blob);

  // .sputnik.pb.Box box = 2;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 2;
  private:
  const ::sputnik::pb::Box& _internal_box() const;
  public:
  const ::sputnik::pb::Box& box() const;
  ::sputnik::pb::Box* release_box();
  ::sputnik::pb::Box* mutable_box();
  void set_allocated_box(::sputnik::pb::Box* box);

  // .sputnik.pb.Image item_image = 12;
  bool has_item_image() const;
  void clear_item_image();
  static const int kItemImageFieldNumber = 12;
  private:
  const ::sputnik::pb::Image& _internal_item_image() const;
  public:
  const ::sputnik::pb::Image& item_image() const;
  ::sputnik::pb::Image* release_item_image();
  ::sputnik::pb::Image* mutable_item_image();
  void set_allocated_item_image(::sputnik::pb::Image* item_image);

  // .sputnik.pb.Mask mask = 14;
  bool has_mask() const;
  void clear_mask();
  static const int kMaskFieldNumber = 14;
  private:
  const ::sputnik::pb::Mask& _internal_mask() const;
  public:
  const ::sputnik::pb::Mask& mask() const;
  ::sputnik::pb::Mask* release_mask();
  ::sputnik::pb::Mask* mutable_mask();
  void set_allocated_mask(::sputnik::pb::Mask* mask);

  // .sputnik.pb.ItemType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sputnik::pb::ItemType type() const;
  void set_type(::sputnik::pb::ItemType value);

  // int32 frame_id = 3;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 3;
  ::google::protobuf::int32 frame_id() const;
  void set_frame_id(::google::protobuf::int32 value);

  // int32 track_id = 4;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 4;
  ::google::protobuf::int32 track_id() const;
  void set_track_id(::google::protobuf::int32 value);

  // bool track_update = 5;
  void clear_track_update();
  static const int kTrackUpdateFieldNumber = 5;
  bool track_update() const;
  void set_track_update(bool value);

  // bool track_die = 6;
  void clear_track_die();
  static const int kTrackDieFieldNumber = 6;
  bool track_die() const;
  void set_track_die(bool value);

  // bool track_show = 7;
  void clear_track_show();
  static const int kTrackShowFieldNumber = 7;
  bool track_show() const;
  void set_track_show(bool value);

  // bool track_push = 8;
  void clear_track_push();
  static const int kTrackPushFieldNumber = 8;
  bool track_push() const;
  void set_track_push(bool value);

  // int64 timestamp_millis = 15;
  void clear_timestamp_millis();
  static const int kTimestampMillisFieldNumber = 15;
  ::google::protobuf::int64 timestamp_millis() const;
  void set_timestamp_millis(::google::protobuf::int64 value);

  // int32 video_channel_id = 19;
  void clear_video_channel_id();
  static const int kVideoChannelIdFieldNumber = 19;
  ::google::protobuf::int32 video_channel_id() const;
  void set_video_channel_id(::google::protobuf::int32 value);

  // .sputnik.pb.FaceAttribute face_attribute = 9;
  bool has_face_attribute() const;
  void clear_face_attribute();
  static const int kFaceAttributeFieldNumber = 9;
  private:
  const ::sputnik::pb::FaceAttribute& _internal_face_attribute() const;
  public:
  const ::sputnik::pb::FaceAttribute& face_attribute() const;
  ::sputnik::pb::FaceAttribute* release_face_attribute();
  ::sputnik::pb::FaceAttribute* mutable_face_attribute();
  void set_allocated_face_attribute(::sputnik::pb::FaceAttribute* face_attribute);

  // .sputnik.pb.PlateAttribute plate_attribute = 10;
  bool has_plate_attribute() const;
  void clear_plate_attribute();
  static const int kPlateAttributeFieldNumber = 10;
  private:
  const ::sputnik::pb::PlateAttribute& _internal_plate_attribute() const;
  public:
  const ::sputnik::pb::PlateAttribute& plate_attribute() const;
  ::sputnik::pb::PlateAttribute* release_plate_attribute();
  ::sputnik::pb::PlateAttribute* mutable_plate_attribute();
  void set_allocated_plate_attribute(::sputnik::pb::PlateAttribute* plate_attribute);

  // .sputnik.pb.VehicleAttribute vehicle_attribute = 11;
  bool has_vehicle_attribute() const;
  void clear_vehicle_attribute();
  static const int kVehicleAttributeFieldNumber = 11;
  private:
  const ::sputnik::pb::VehicleAttribute& _internal_vehicle_attribute() const;
  public:
  const ::sputnik::pb::VehicleAttribute& vehicle_attribute() const;
  ::sputnik::pb::VehicleAttribute* release_vehicle_attribute();
  ::sputnik::pb::VehicleAttribute* mutable_vehicle_attribute();
  void set_allocated_vehicle_attribute(::sputnik::pb::VehicleAttribute* vehicle_attribute);

  // .sputnik.pb.HumanAttribute human_attribute = 13;
  bool has_human_attribute() const;
  void clear_human_attribute();
  static const int kHumanAttributeFieldNumber = 13;
  private:
  const ::sputnik::pb::HumanAttribute& _internal_human_attribute() const;
  public:
  const ::sputnik::pb::HumanAttribute& human_attribute() const;
  ::sputnik::pb::HumanAttribute* release_human_attribute();
  ::sputnik::pb::HumanAttribute* mutable_human_attribute();
  void set_allocated_human_attribute(::sputnik::pb::HumanAttribute* human_attribute);

  void clear_attribute();
  AttributeCase attribute_case() const;
  // @@protoc_insertion_point(class_scope:sputnik.pb.Item)
 private:
  void set_has_face_attribute();
  void set_has_plate_attribute();
  void set_has_vehicle_attribute();
  void set_has_human_attribute();

  inline bool has_attribute() const;
  inline void clear_has_attribute();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint > trace_;
  ::google::protobuf::internal::ArenaStringPtr item_text_utf8_;
  ::google::protobuf::internal::ArenaStringPtr blob_;
  ::sputnik::pb::Box* box_;
  ::sputnik::pb::Image* item_image_;
  ::sputnik::pb::Mask* mask_;
  int type_;
  ::google::protobuf::int32 frame_id_;
  ::google::protobuf::int32 track_id_;
  bool track_update_;
  bool track_die_;
  bool track_show_;
  bool track_push_;
  ::google::protobuf::int64 timestamp_millis_;
  ::google::protobuf::int32 video_channel_id_;
  union AttributeUnion {
    AttributeUnion() {}
    ::sputnik::pb::FaceAttribute* face_attribute_;
    ::sputnik::pb::PlateAttribute* plate_attribute_;
    ::sputnik::pb::VehicleAttribute* vehicle_attribute_;
    ::sputnik::pb::HumanAttribute* human_attribute_;
  } attribute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_item_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Item

// .sputnik.pb.ItemType type = 1;
inline void Item::clear_type() {
  type_ = 0;
}
inline ::sputnik::pb::ItemType Item::type() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.type)
  return static_cast< ::sputnik::pb::ItemType >(type_);
}
inline void Item::set_type(::sputnik::pb::ItemType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.type)
}

// .sputnik.pb.Box box = 2;
inline bool Item::has_box() const {
  return this != internal_default_instance() && box_ != NULL;
}
inline const ::sputnik::pb::Box& Item::_internal_box() const {
  return *box_;
}
inline const ::sputnik::pb::Box& Item::box() const {
  const ::sputnik::pb::Box* p = box_;
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.box)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::Box*>(
      &::sputnik::pb::_Box_default_instance_);
}
inline ::sputnik::pb::Box* Item::release_box() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Item.box)
  
  ::sputnik::pb::Box* temp = box_;
  box_ = NULL;
  return temp;
}
inline ::sputnik::pb::Box* Item::mutable_box() {
  
  if (box_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::Box>(GetArenaNoVirtual());
    box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.box)
  return box_;
}
inline void Item::set_allocated_box(::sputnik::pb::Box* box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(box_);
  }
  if (box) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    
  } else {
    
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Item.box)
}

// int32 video_channel_id = 19;
inline void Item::clear_video_channel_id() {
  video_channel_id_ = 0;
}
inline ::google::protobuf::int32 Item::video_channel_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.video_channel_id)
  return video_channel_id_;
}
inline void Item::set_video_channel_id(::google::protobuf::int32 value) {
  
  video_channel_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.video_channel_id)
}

// int32 frame_id = 3;
inline void Item::clear_frame_id() {
  frame_id_ = 0;
}
inline ::google::protobuf::int32 Item::frame_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.frame_id)
  return frame_id_;
}
inline void Item::set_frame_id(::google::protobuf::int32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.frame_id)
}

// int32 track_id = 4;
inline void Item::clear_track_id() {
  track_id_ = 0;
}
inline ::google::protobuf::int32 Item::track_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.track_id)
  return track_id_;
}
inline void Item::set_track_id(::google::protobuf::int32 value) {
  
  track_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.track_id)
}

// bool track_update = 5;
inline void Item::clear_track_update() {
  track_update_ = false;
}
inline bool Item::track_update() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.track_update)
  return track_update_;
}
inline void Item::set_track_update(bool value) {
  
  track_update_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.track_update)
}

// bool track_die = 6;
inline void Item::clear_track_die() {
  track_die_ = false;
}
inline bool Item::track_die() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.track_die)
  return track_die_;
}
inline void Item::set_track_die(bool value) {
  
  track_die_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.track_die)
}

// bool track_show = 7;
inline void Item::clear_track_show() {
  track_show_ = false;
}
inline bool Item::track_show() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.track_show)
  return track_show_;
}
inline void Item::set_track_show(bool value) {
  
  track_show_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.track_show)
}

// bool track_push = 8;
inline void Item::clear_track_push() {
  track_push_ = false;
}
inline bool Item::track_push() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.track_push)
  return track_push_;
}
inline void Item::set_track_push(bool value) {
  
  track_push_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.track_push)
}

// .sputnik.pb.FaceAttribute face_attribute = 9;
inline bool Item::has_face_attribute() const {
  return attribute_case() == kFaceAttribute;
}
inline void Item::set_has_face_attribute() {
  _oneof_case_[0] = kFaceAttribute;
}
inline const ::sputnik::pb::FaceAttribute& Item::_internal_face_attribute() const {
  return *attribute_.face_attribute_;
}
inline ::sputnik::pb::FaceAttribute* Item::release_face_attribute() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Item.face_attribute)
  if (has_face_attribute()) {
    clear_has_attribute();
      ::sputnik::pb::FaceAttribute* temp = attribute_.face_attribute_;
    attribute_.face_attribute_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::FaceAttribute& Item::face_attribute() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.face_attribute)
  return has_face_attribute()
      ? *attribute_.face_attribute_
      : *reinterpret_cast< ::sputnik::pb::FaceAttribute*>(&::sputnik::pb::_FaceAttribute_default_instance_);
}
inline ::sputnik::pb::FaceAttribute* Item::mutable_face_attribute() {
  if (!has_face_attribute()) {
    clear_attribute();
    set_has_face_attribute();
    attribute_.face_attribute_ = CreateMaybeMessage< ::sputnik::pb::FaceAttribute >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.face_attribute)
  return attribute_.face_attribute_;
}

// .sputnik.pb.PlateAttribute plate_attribute = 10;
inline bool Item::has_plate_attribute() const {
  return attribute_case() == kPlateAttribute;
}
inline void Item::set_has_plate_attribute() {
  _oneof_case_[0] = kPlateAttribute;
}
inline const ::sputnik::pb::PlateAttribute& Item::_internal_plate_attribute() const {
  return *attribute_.plate_attribute_;
}
inline ::sputnik::pb::PlateAttribute* Item::release_plate_attribute() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Item.plate_attribute)
  if (has_plate_attribute()) {
    clear_has_attribute();
      ::sputnik::pb::PlateAttribute* temp = attribute_.plate_attribute_;
    attribute_.plate_attribute_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::PlateAttribute& Item::plate_attribute() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.plate_attribute)
  return has_plate_attribute()
      ? *attribute_.plate_attribute_
      : *reinterpret_cast< ::sputnik::pb::PlateAttribute*>(&::sputnik::pb::_PlateAttribute_default_instance_);
}
inline ::sputnik::pb::PlateAttribute* Item::mutable_plate_attribute() {
  if (!has_plate_attribute()) {
    clear_attribute();
    set_has_plate_attribute();
    attribute_.plate_attribute_ = CreateMaybeMessage< ::sputnik::pb::PlateAttribute >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.plate_attribute)
  return attribute_.plate_attribute_;
}

// .sputnik.pb.VehicleAttribute vehicle_attribute = 11;
inline bool Item::has_vehicle_attribute() const {
  return attribute_case() == kVehicleAttribute;
}
inline void Item::set_has_vehicle_attribute() {
  _oneof_case_[0] = kVehicleAttribute;
}
inline const ::sputnik::pb::VehicleAttribute& Item::_internal_vehicle_attribute() const {
  return *attribute_.vehicle_attribute_;
}
inline ::sputnik::pb::VehicleAttribute* Item::release_vehicle_attribute() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Item.vehicle_attribute)
  if (has_vehicle_attribute()) {
    clear_has_attribute();
      ::sputnik::pb::VehicleAttribute* temp = attribute_.vehicle_attribute_;
    attribute_.vehicle_attribute_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::VehicleAttribute& Item::vehicle_attribute() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.vehicle_attribute)
  return has_vehicle_attribute()
      ? *attribute_.vehicle_attribute_
      : *reinterpret_cast< ::sputnik::pb::VehicleAttribute*>(&::sputnik::pb::_VehicleAttribute_default_instance_);
}
inline ::sputnik::pb::VehicleAttribute* Item::mutable_vehicle_attribute() {
  if (!has_vehicle_attribute()) {
    clear_attribute();
    set_has_vehicle_attribute();
    attribute_.vehicle_attribute_ = CreateMaybeMessage< ::sputnik::pb::VehicleAttribute >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.vehicle_attribute)
  return attribute_.vehicle_attribute_;
}

// .sputnik.pb.HumanAttribute human_attribute = 13;
inline bool Item::has_human_attribute() const {
  return attribute_case() == kHumanAttribute;
}
inline void Item::set_has_human_attribute() {
  _oneof_case_[0] = kHumanAttribute;
}
inline const ::sputnik::pb::HumanAttribute& Item::_internal_human_attribute() const {
  return *attribute_.human_attribute_;
}
inline ::sputnik::pb::HumanAttribute* Item::release_human_attribute() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Item.human_attribute)
  if (has_human_attribute()) {
    clear_has_attribute();
      ::sputnik::pb::HumanAttribute* temp = attribute_.human_attribute_;
    attribute_.human_attribute_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::HumanAttribute& Item::human_attribute() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.human_attribute)
  return has_human_attribute()
      ? *attribute_.human_attribute_
      : *reinterpret_cast< ::sputnik::pb::HumanAttribute*>(&::sputnik::pb::_HumanAttribute_default_instance_);
}
inline ::sputnik::pb::HumanAttribute* Item::mutable_human_attribute() {
  if (!has_human_attribute()) {
    clear_attribute();
    set_has_human_attribute();
    attribute_.human_attribute_ = CreateMaybeMessage< ::sputnik::pb::HumanAttribute >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.human_attribute)
  return attribute_.human_attribute_;
}

// .sputnik.pb.Image item_image = 12;
inline bool Item::has_item_image() const {
  return this != internal_default_instance() && item_image_ != NULL;
}
inline const ::sputnik::pb::Image& Item::_internal_item_image() const {
  return *item_image_;
}
inline const ::sputnik::pb::Image& Item::item_image() const {
  const ::sputnik::pb::Image* p = item_image_;
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.item_image)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::Image*>(
      &::sputnik::pb::_Image_default_instance_);
}
inline ::sputnik::pb::Image* Item::release_item_image() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Item.item_image)
  
  ::sputnik::pb::Image* temp = item_image_;
  item_image_ = NULL;
  return temp;
}
inline ::sputnik::pb::Image* Item::mutable_item_image() {
  
  if (item_image_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::Image>(GetArenaNoVirtual());
    item_image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.item_image)
  return item_image_;
}
inline void Item::set_allocated_item_image(::sputnik::pb::Image* item_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_image_);
  }
  if (item_image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item_image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item_image, submessage_arena);
    }
    
  } else {
    
  }
  item_image_ = item_image;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Item.item_image)
}

// .sputnik.pb.Mask mask = 14;
inline bool Item::has_mask() const {
  return this != internal_default_instance() && mask_ != NULL;
}
inline const ::sputnik::pb::Mask& Item::_internal_mask() const {
  return *mask_;
}
inline const ::sputnik::pb::Mask& Item::mask() const {
  const ::sputnik::pb::Mask* p = mask_;
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.mask)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::Mask*>(
      &::sputnik::pb::_Mask_default_instance_);
}
inline ::sputnik::pb::Mask* Item::release_mask() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Item.mask)
  
  ::sputnik::pb::Mask* temp = mask_;
  mask_ = NULL;
  return temp;
}
inline ::sputnik::pb::Mask* Item::mutable_mask() {
  
  if (mask_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::Mask>(GetArenaNoVirtual());
    mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.mask)
  return mask_;
}
inline void Item::set_allocated_mask(::sputnik::pb::Mask* mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mask_);
  }
  if (mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Item.mask)
}

// int64 timestamp_millis = 15;
inline void Item::clear_timestamp_millis() {
  timestamp_millis_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Item::timestamp_millis() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.timestamp_millis)
  return timestamp_millis_;
}
inline void Item::set_timestamp_millis(::google::protobuf::int64 value) {
  
  timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.timestamp_millis)
}

// repeated .sputnik.pb.TracePoint trace = 16;
inline int Item::trace_size() const {
  return trace_.size();
}
inline ::sputnik::pb::TracePoint* Item::mutable_trace(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.trace)
  return trace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
Item::mutable_trace() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Item.trace)
  return &trace_;
}
inline const ::sputnik::pb::TracePoint& Item::trace(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.trace)
  return trace_.Get(index);
}
inline ::sputnik::pb::TracePoint* Item::add_trace() {
  // @@protoc_insertion_point(field_add:sputnik.pb.Item.trace)
  return trace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
Item::trace() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Item.trace)
  return trace_;
}

// string item_text_utf8 = 17;
inline void Item::clear_item_text_utf8() {
  item_text_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::item_text_utf8() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.item_text_utf8)
  return item_text_utf8_.GetNoArena();
}
inline void Item::set_item_text_utf8(const ::std::string& value) {
  
  item_text_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.item_text_utf8)
}
#if LANG_CXX11
inline void Item::set_item_text_utf8(::std::string&& value) {
  
  item_text_utf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.Item.item_text_utf8)
}
#endif
inline void Item::set_item_text_utf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_text_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.Item.item_text_utf8)
}
inline void Item::set_item_text_utf8(const char* value, size_t size) {
  
  item_text_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.Item.item_text_utf8)
}
inline ::std::string* Item::mutable_item_text_utf8() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.item_text_utf8)
  return item_text_utf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_item_text_utf8() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Item.item_text_utf8)
  
  return item_text_utf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_item_text_utf8(::std::string* item_text_utf8) {
  if (item_text_utf8 != NULL) {
    
  } else {
    
  }
  item_text_utf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_text_utf8);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Item.item_text_utf8)
}

// bytes blob = 18;
inline void Item::clear_blob() {
  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::blob() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Item.blob)
  return blob_.GetNoArena();
}
inline void Item::set_blob(const ::std::string& value) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.Item.blob)
}
#if LANG_CXX11
inline void Item::set_blob(::std::string&& value) {
  
  blob_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.Item.blob)
}
#endif
inline void Item::set_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.Item.blob)
}
inline void Item::set_blob(const void* value, size_t size) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.Item.blob)
}
inline ::std::string* Item::mutable_blob() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Item.blob)
  return blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_blob() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Item.blob)
  
  return blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_blob(::std::string* blob) {
  if (blob != NULL) {
    
  } else {
    
  }
  blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blob);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Item.blob)
}

inline bool Item::has_attribute() const {
  return attribute_case() != ATTRIBUTE_NOT_SET;
}
inline void Item::clear_has_attribute() {
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}
inline Item::AttributeCase Item::attribute_case() const {
  return Item::AttributeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sputnik::pb::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sputnik::pb::ItemType>() {
  return ::sputnik::pb::ItemType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_item_2eproto
