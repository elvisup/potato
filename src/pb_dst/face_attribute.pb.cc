// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face_attribute.proto

#include "face_attribute.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_face_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FaceLandMark;
}  // namespace protobuf_face_5fattribute_2eproto
namespace sputnik {
namespace pb {
class FaceLandMarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceLandMark>
      _instance;
} _FaceLandMark_default_instance_;
class FaceAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceAttribute>
      _instance;
} _FaceAttribute_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_face_5fattribute_2eproto {
static void InitDefaultsFaceLandMark() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceLandMark_default_instance_;
    new (ptr) ::sputnik::pb::FaceLandMark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceLandMark::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FaceLandMark =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFaceLandMark}, {}};

static void InitDefaultsFaceAttribute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceAttribute_default_instance_;
    new (ptr) ::sputnik::pb::FaceAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceAttribute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FaceAttribute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFaceAttribute}, {
      &protobuf_face_5fattribute_2eproto::scc_info_FaceLandMark.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FaceLandMark.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceAttribute.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, landmark_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, lefteye_pupil_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, lefteye_pupil_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, righteye_pupil_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, righteye_pupil_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, nose_tip_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, nose_tip_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, left_mouth_corner_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, left_mouth_corner_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, right_mouth_corner_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, right_mouth_corner_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, lefteye_right_corner_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, lefteye_right_corner_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, righteye_left_corner_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceLandMark, righteye_left_corner_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, blur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, post_filter_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, landmark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttribute, minority_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::FaceLandMark)},
  { 20, -1, sizeof(::sputnik::pb::FaceAttribute)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceLandMark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceAttribute_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "face_attribute.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024face_attribute.proto\022\nsputnik.pb\"\260\003\n\014F"
      "aceLandMark\022\034\n\024landmark_description\030\001 \001("
      "\t\022\027\n\017lefteye_pupil_x\030\002 \001(\005\022\027\n\017lefteye_pu"
      "pil_y\030\003 \001(\005\022\030\n\020righteye_pupil_x\030\004 \001(\005\022\030\n"
      "\020righteye_pupil_y\030\005 \001(\005\022\022\n\nnose_tip_x\030\006 "
      "\001(\005\022\022\n\nnose_tip_y\030\007 \001(\005\022\033\n\023left_mouth_co"
      "rner_x\030\010 \001(\005\022\033\n\023left_mouth_corner_y\030\t \001("
      "\005\022\034\n\024right_mouth_corner_x\030\n \001(\005\022\034\n\024right"
      "_mouth_corner_y\030\013 \001(\005\022\036\n\026lefteye_right_c"
      "orner_x\030\014 \001(\005\022\036\n\026lefteye_right_corner_y\030"
      "\r \001(\005\022\036\n\026righteye_left_corner_x\030\016 \001(\005\022\036\n"
      "\026righteye_left_corner_y\030\017 \001(\005\"\275\001\n\rFaceAt"
      "tribute\022\014\n\004blur\030\001 \001(\005\022\013\n\003age\030\002 \001(\005\022\016\n\006ge"
      "nder\030\003 \001(\005\022\r\n\005pitch\030\004 \001(\021\022\013\n\003yaw\030\005 \001(\021\022\014"
      "\n\004roll\030\006 \001(\021\022\031\n\021post_filter_score\030\007 \001(\005\022"
      "*\n\010landmark\030\010 \001(\0132\030.sputnik.pb.FaceLandM"
      "ark\022\020\n\010minority\030\t \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 669);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face_attribute.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_face_5fattribute_2eproto
namespace sputnik {
namespace pb {

// ===================================================================

void FaceLandMark::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceLandMark::kLandmarkDescriptionFieldNumber;
const int FaceLandMark::kLefteyePupilXFieldNumber;
const int FaceLandMark::kLefteyePupilYFieldNumber;
const int FaceLandMark::kRighteyePupilXFieldNumber;
const int FaceLandMark::kRighteyePupilYFieldNumber;
const int FaceLandMark::kNoseTipXFieldNumber;
const int FaceLandMark::kNoseTipYFieldNumber;
const int FaceLandMark::kLeftMouthCornerXFieldNumber;
const int FaceLandMark::kLeftMouthCornerYFieldNumber;
const int FaceLandMark::kRightMouthCornerXFieldNumber;
const int FaceLandMark::kRightMouthCornerYFieldNumber;
const int FaceLandMark::kLefteyeRightCornerXFieldNumber;
const int FaceLandMark::kLefteyeRightCornerYFieldNumber;
const int FaceLandMark::kRighteyeLeftCornerXFieldNumber;
const int FaceLandMark::kRighteyeLeftCornerYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceLandMark::FaceLandMark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5fattribute_2eproto::scc_info_FaceLandMark.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceLandMark)
}
FaceLandMark::FaceLandMark(const FaceLandMark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  landmark_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.landmark_description().size() > 0) {
    landmark_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landmark_description_);
  }
  ::memcpy(&lefteye_pupil_x_, &from.lefteye_pupil_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&righteye_left_corner_y_) -
    reinterpret_cast<char*>(&lefteye_pupil_x_)) + sizeof(righteye_left_corner_y_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceLandMark)
}

void FaceLandMark::SharedCtor() {
  landmark_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lefteye_pupil_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&righteye_left_corner_y_) -
      reinterpret_cast<char*>(&lefteye_pupil_x_)) + sizeof(righteye_left_corner_y_));
}

FaceLandMark::~FaceLandMark() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceLandMark)
  SharedDtor();
}

void FaceLandMark::SharedDtor() {
  landmark_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FaceLandMark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceLandMark::descriptor() {
  ::protobuf_face_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceLandMark& FaceLandMark::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5fattribute_2eproto::scc_info_FaceLandMark.base);
  return *internal_default_instance();
}


void FaceLandMark::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceLandMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lefteye_pupil_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&righteye_left_corner_y_) -
      reinterpret_cast<char*>(&lefteye_pupil_x_)) + sizeof(righteye_left_corner_y_));
  _internal_metadata_.Clear();
}

bool FaceLandMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceLandMark)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string landmark_description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_landmark_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->landmark_description().data(), static_cast<int>(this->landmark_description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.FaceLandMark.landmark_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lefteye_pupil_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefteye_pupil_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lefteye_pupil_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefteye_pupil_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 righteye_pupil_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &righteye_pupil_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 righteye_pupil_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &righteye_pupil_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nose_tip_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nose_tip_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nose_tip_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nose_tip_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_mouth_corner_x = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_mouth_corner_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_mouth_corner_y = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_mouth_corner_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_mouth_corner_x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_mouth_corner_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_mouth_corner_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_mouth_corner_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lefteye_right_corner_x = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefteye_right_corner_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lefteye_right_corner_y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefteye_right_corner_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 righteye_left_corner_x = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &righteye_left_corner_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 righteye_left_corner_y = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &righteye_left_corner_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceLandMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceLandMark)
  return false;
#undef DO_
}

void FaceLandMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceLandMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string landmark_description = 1;
  if (this->landmark_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_description().data(), static_cast<int>(this->landmark_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceLandMark.landmark_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->landmark_description(), output);
  }

  // int32 lefteye_pupil_x = 2;
  if (this->lefteye_pupil_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefteye_pupil_x(), output);
  }

  // int32 lefteye_pupil_y = 3;
  if (this->lefteye_pupil_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lefteye_pupil_y(), output);
  }

  // int32 righteye_pupil_x = 4;
  if (this->righteye_pupil_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->righteye_pupil_x(), output);
  }

  // int32 righteye_pupil_y = 5;
  if (this->righteye_pupil_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->righteye_pupil_y(), output);
  }

  // int32 nose_tip_x = 6;
  if (this->nose_tip_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nose_tip_x(), output);
  }

  // int32 nose_tip_y = 7;
  if (this->nose_tip_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nose_tip_y(), output);
  }

  // int32 left_mouth_corner_x = 8;
  if (this->left_mouth_corner_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->left_mouth_corner_x(), output);
  }

  // int32 left_mouth_corner_y = 9;
  if (this->left_mouth_corner_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->left_mouth_corner_y(), output);
  }

  // int32 right_mouth_corner_x = 10;
  if (this->right_mouth_corner_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->right_mouth_corner_x(), output);
  }

  // int32 right_mouth_corner_y = 11;
  if (this->right_mouth_corner_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->right_mouth_corner_y(), output);
  }

  // int32 lefteye_right_corner_x = 12;
  if (this->lefteye_right_corner_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lefteye_right_corner_x(), output);
  }

  // int32 lefteye_right_corner_y = 13;
  if (this->lefteye_right_corner_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lefteye_right_corner_y(), output);
  }

  // int32 righteye_left_corner_x = 14;
  if (this->righteye_left_corner_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->righteye_left_corner_x(), output);
  }

  // int32 righteye_left_corner_y = 15;
  if (this->righteye_left_corner_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->righteye_left_corner_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceLandMark)
}

::google::protobuf::uint8* FaceLandMark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceLandMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string landmark_description = 1;
  if (this->landmark_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_description().data(), static_cast<int>(this->landmark_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceLandMark.landmark_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->landmark_description(), target);
  }

  // int32 lefteye_pupil_x = 2;
  if (this->lefteye_pupil_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefteye_pupil_x(), target);
  }

  // int32 lefteye_pupil_y = 3;
  if (this->lefteye_pupil_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lefteye_pupil_y(), target);
  }

  // int32 righteye_pupil_x = 4;
  if (this->righteye_pupil_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->righteye_pupil_x(), target);
  }

  // int32 righteye_pupil_y = 5;
  if (this->righteye_pupil_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->righteye_pupil_y(), target);
  }

  // int32 nose_tip_x = 6;
  if (this->nose_tip_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nose_tip_x(), target);
  }

  // int32 nose_tip_y = 7;
  if (this->nose_tip_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nose_tip_y(), target);
  }

  // int32 left_mouth_corner_x = 8;
  if (this->left_mouth_corner_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->left_mouth_corner_x(), target);
  }

  // int32 left_mouth_corner_y = 9;
  if (this->left_mouth_corner_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->left_mouth_corner_y(), target);
  }

  // int32 right_mouth_corner_x = 10;
  if (this->right_mouth_corner_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->right_mouth_corner_x(), target);
  }

  // int32 right_mouth_corner_y = 11;
  if (this->right_mouth_corner_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->right_mouth_corner_y(), target);
  }

  // int32 lefteye_right_corner_x = 12;
  if (this->lefteye_right_corner_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lefteye_right_corner_x(), target);
  }

  // int32 lefteye_right_corner_y = 13;
  if (this->lefteye_right_corner_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lefteye_right_corner_y(), target);
  }

  // int32 righteye_left_corner_x = 14;
  if (this->righteye_left_corner_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->righteye_left_corner_x(), target);
  }

  // int32 righteye_left_corner_y = 15;
  if (this->righteye_left_corner_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->righteye_left_corner_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceLandMark)
  return target;
}

size_t FaceLandMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceLandMark)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string landmark_description = 1;
  if (this->landmark_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->landmark_description());
  }

  // int32 lefteye_pupil_x = 2;
  if (this->lefteye_pupil_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lefteye_pupil_x());
  }

  // int32 lefteye_pupil_y = 3;
  if (this->lefteye_pupil_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lefteye_pupil_y());
  }

  // int32 righteye_pupil_x = 4;
  if (this->righteye_pupil_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->righteye_pupil_x());
  }

  // int32 righteye_pupil_y = 5;
  if (this->righteye_pupil_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->righteye_pupil_y());
  }

  // int32 nose_tip_x = 6;
  if (this->nose_tip_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nose_tip_x());
  }

  // int32 nose_tip_y = 7;
  if (this->nose_tip_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nose_tip_y());
  }

  // int32 left_mouth_corner_x = 8;
  if (this->left_mouth_corner_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_mouth_corner_x());
  }

  // int32 left_mouth_corner_y = 9;
  if (this->left_mouth_corner_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_mouth_corner_y());
  }

  // int32 right_mouth_corner_x = 10;
  if (this->right_mouth_corner_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_mouth_corner_x());
  }

  // int32 right_mouth_corner_y = 11;
  if (this->right_mouth_corner_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_mouth_corner_y());
  }

  // int32 lefteye_right_corner_x = 12;
  if (this->lefteye_right_corner_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lefteye_right_corner_x());
  }

  // int32 lefteye_right_corner_y = 13;
  if (this->lefteye_right_corner_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lefteye_right_corner_y());
  }

  // int32 righteye_left_corner_x = 14;
  if (this->righteye_left_corner_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->righteye_left_corner_x());
  }

  // int32 righteye_left_corner_y = 15;
  if (this->righteye_left_corner_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->righteye_left_corner_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceLandMark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceLandMark)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceLandMark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceLandMark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceLandMark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceLandMark)
    MergeFrom(*source);
  }
}

void FaceLandMark::MergeFrom(const FaceLandMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceLandMark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.landmark_description().size() > 0) {

    landmark_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landmark_description_);
  }
  if (from.lefteye_pupil_x() != 0) {
    set_lefteye_pupil_x(from.lefteye_pupil_x());
  }
  if (from.lefteye_pupil_y() != 0) {
    set_lefteye_pupil_y(from.lefteye_pupil_y());
  }
  if (from.righteye_pupil_x() != 0) {
    set_righteye_pupil_x(from.righteye_pupil_x());
  }
  if (from.righteye_pupil_y() != 0) {
    set_righteye_pupil_y(from.righteye_pupil_y());
  }
  if (from.nose_tip_x() != 0) {
    set_nose_tip_x(from.nose_tip_x());
  }
  if (from.nose_tip_y() != 0) {
    set_nose_tip_y(from.nose_tip_y());
  }
  if (from.left_mouth_corner_x() != 0) {
    set_left_mouth_corner_x(from.left_mouth_corner_x());
  }
  if (from.left_mouth_corner_y() != 0) {
    set_left_mouth_corner_y(from.left_mouth_corner_y());
  }
  if (from.right_mouth_corner_x() != 0) {
    set_right_mouth_corner_x(from.right_mouth_corner_x());
  }
  if (from.right_mouth_corner_y() != 0) {
    set_right_mouth_corner_y(from.right_mouth_corner_y());
  }
  if (from.lefteye_right_corner_x() != 0) {
    set_lefteye_right_corner_x(from.lefteye_right_corner_x());
  }
  if (from.lefteye_right_corner_y() != 0) {
    set_lefteye_right_corner_y(from.lefteye_right_corner_y());
  }
  if (from.righteye_left_corner_x() != 0) {
    set_righteye_left_corner_x(from.righteye_left_corner_x());
  }
  if (from.righteye_left_corner_y() != 0) {
    set_righteye_left_corner_y(from.righteye_left_corner_y());
  }
}

void FaceLandMark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceLandMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceLandMark::CopyFrom(const FaceLandMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceLandMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceLandMark::IsInitialized() const {
  return true;
}

void FaceLandMark::Swap(FaceLandMark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceLandMark::InternalSwap(FaceLandMark* other) {
  using std::swap;
  landmark_description_.Swap(&other->landmark_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lefteye_pupil_x_, other->lefteye_pupil_x_);
  swap(lefteye_pupil_y_, other->lefteye_pupil_y_);
  swap(righteye_pupil_x_, other->righteye_pupil_x_);
  swap(righteye_pupil_y_, other->righteye_pupil_y_);
  swap(nose_tip_x_, other->nose_tip_x_);
  swap(nose_tip_y_, other->nose_tip_y_);
  swap(left_mouth_corner_x_, other->left_mouth_corner_x_);
  swap(left_mouth_corner_y_, other->left_mouth_corner_y_);
  swap(right_mouth_corner_x_, other->right_mouth_corner_x_);
  swap(right_mouth_corner_y_, other->right_mouth_corner_y_);
  swap(lefteye_right_corner_x_, other->lefteye_right_corner_x_);
  swap(lefteye_right_corner_y_, other->lefteye_right_corner_y_);
  swap(righteye_left_corner_x_, other->righteye_left_corner_x_);
  swap(righteye_left_corner_y_, other->righteye_left_corner_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceLandMark::GetMetadata() const {
  protobuf_face_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceAttribute::InitAsDefaultInstance() {
  ::sputnik::pb::_FaceAttribute_default_instance_._instance.get_mutable()->landmark_ = const_cast< ::sputnik::pb::FaceLandMark*>(
      ::sputnik::pb::FaceLandMark::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceAttribute::kBlurFieldNumber;
const int FaceAttribute::kAgeFieldNumber;
const int FaceAttribute::kGenderFieldNumber;
const int FaceAttribute::kPitchFieldNumber;
const int FaceAttribute::kYawFieldNumber;
const int FaceAttribute::kRollFieldNumber;
const int FaceAttribute::kPostFilterScoreFieldNumber;
const int FaceAttribute::kLandmarkFieldNumber;
const int FaceAttribute::kMinorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceAttribute::FaceAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5fattribute_2eproto::scc_info_FaceAttribute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceAttribute)
}
FaceAttribute::FaceAttribute(const FaceAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_landmark()) {
    landmark_ = new ::sputnik::pb::FaceLandMark(*from.landmark_);
  } else {
    landmark_ = NULL;
  }
  ::memcpy(&blur_, &from.blur_,
    static_cast<size_t>(reinterpret_cast<char*>(&minority_) -
    reinterpret_cast<char*>(&blur_)) + sizeof(minority_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceAttribute)
}

void FaceAttribute::SharedCtor() {
  ::memset(&landmark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minority_) -
      reinterpret_cast<char*>(&landmark_)) + sizeof(minority_));
}

FaceAttribute::~FaceAttribute() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceAttribute)
  SharedDtor();
}

void FaceAttribute::SharedDtor() {
  if (this != internal_default_instance()) delete landmark_;
}

void FaceAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceAttribute::descriptor() {
  ::protobuf_face_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceAttribute& FaceAttribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5fattribute_2eproto::scc_info_FaceAttribute.base);
  return *internal_default_instance();
}


void FaceAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && landmark_ != NULL) {
    delete landmark_;
  }
  landmark_ = NULL;
  ::memset(&blur_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minority_) -
      reinterpret_cast<char*>(&blur_)) + sizeof(minority_));
  _internal_metadata_.Clear();
}

bool FaceAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceAttribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 blur = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blur_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 pitch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 yaw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 roll = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 post_filter_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_filter_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceLandMark landmark = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minority = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceAttribute)
  return false;
#undef DO_
}

void FaceAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 blur = 1;
  if (this->blur() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blur(), output);
  }

  // int32 age = 2;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  // int32 gender = 3;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gender(), output);
  }

  // sint32 pitch = 4;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->pitch(), output);
  }

  // sint32 yaw = 5;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->yaw(), output);
  }

  // sint32 roll = 6;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->roll(), output);
  }

  // int32 post_filter_score = 7;
  if (this->post_filter_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->post_filter_score(), output);
  }

  // .sputnik.pb.FaceLandMark landmark = 8;
  if (this->has_landmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_landmark(), output);
  }

  // int32 minority = 9;
  if (this->minority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->minority(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceAttribute)
}

::google::protobuf::uint8* FaceAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 blur = 1;
  if (this->blur() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blur(), target);
  }

  // int32 age = 2;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age(), target);
  }

  // int32 gender = 3;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gender(), target);
  }

  // sint32 pitch = 4;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->pitch(), target);
  }

  // sint32 yaw = 5;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->yaw(), target);
  }

  // sint32 roll = 6;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->roll(), target);
  }

  // int32 post_filter_score = 7;
  if (this->post_filter_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->post_filter_score(), target);
  }

  // .sputnik.pb.FaceLandMark landmark = 8;
  if (this->has_landmark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_landmark(), deterministic, target);
  }

  // int32 minority = 9;
  if (this->minority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->minority(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceAttribute)
  return target;
}

size_t FaceAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceAttribute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.FaceLandMark landmark = 8;
  if (this->has_landmark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *landmark_);
  }

  // int32 blur = 1;
  if (this->blur() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blur());
  }

  // int32 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // int32 gender = 3;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gender());
  }

  // sint32 pitch = 4;
  if (this->pitch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->pitch());
  }

  // sint32 yaw = 5;
  if (this->yaw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->yaw());
  }

  // sint32 roll = 6;
  if (this->roll() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->roll());
  }

  // int32 post_filter_score = 7;
  if (this->post_filter_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->post_filter_score());
  }

  // int32 minority = 9;
  if (this->minority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceAttribute)
    MergeFrom(*source);
  }
}

void FaceAttribute::MergeFrom(const FaceAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_landmark()) {
    mutable_landmark()->::sputnik::pb::FaceLandMark::MergeFrom(from.landmark());
  }
  if (from.blur() != 0) {
    set_blur(from.blur());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.post_filter_score() != 0) {
    set_post_filter_score(from.post_filter_score());
  }
  if (from.minority() != 0) {
    set_minority(from.minority());
  }
}

void FaceAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceAttribute::CopyFrom(const FaceAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceAttribute::IsInitialized() const {
  return true;
}

void FaceAttribute::Swap(FaceAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceAttribute::InternalSwap(FaceAttribute* other) {
  using std::swap;
  swap(landmark_, other->landmark_);
  swap(blur_, other->blur_);
  swap(age_, other->age_);
  swap(gender_, other->gender_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(roll_, other->roll_);
  swap(post_filter_score_, other->post_filter_score_);
  swap(minority_, other->minority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceAttribute::GetMetadata() const {
  protobuf_face_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceLandMark* Arena::CreateMaybeMessage< ::sputnik::pb::FaceLandMark >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceLandMark >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceAttribute* Arena::CreateMaybeMessage< ::sputnik::pb::FaceAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceAttribute >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
