// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meg_request.proto

#ifndef PROTOBUF_INCLUDED_meg_5frequest_2eproto
#define PROTOBUF_INCLUDED_meg_5frequest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "face_request.pb.h"
#include "token_request.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_meg_5frequest_2eproto 

namespace protobuf_meg_5frequest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_meg_5frequest_2eproto
namespace sputnik {
namespace pb {
class MegRequest;
class MegRequestDefaultTypeInternal;
extern MegRequestDefaultTypeInternal _MegRequest_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::MegRequest* Arena::CreateMaybeMessage<::sputnik::pb::MegRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

// ===================================================================

class MegRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.MegRequest) */ {
 public:
  MegRequest();
  virtual ~MegRequest();

  MegRequest(const MegRequest& from);

  inline MegRequest& operator=(const MegRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MegRequest(MegRequest&& from) noexcept
    : MegRequest() {
    *this = ::std::move(from);
  }

  inline MegRequest& operator=(MegRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MegRequest& default_instance();

  enum RequestCase {
    kTokenActivationRequest = 2,
    kDeleteTokenRequest = 3,
    kFaceRequest = 4,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MegRequest* internal_default_instance() {
    return reinterpret_cast<const MegRequest*>(
               &_MegRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MegRequest* other);
  friend void swap(MegRequest& a, MegRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MegRequest* New() const final {
    return CreateMaybeMessage<MegRequest>(NULL);
  }

  MegRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MegRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MegRequest& from);
  void MergeFrom(const MegRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MegRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // int64 timestamp_millis = 8;
  void clear_timestamp_millis();
  static const int kTimestampMillisFieldNumber = 8;
  ::google::protobuf::int64 timestamp_millis() const;
  void set_timestamp_millis(::google::protobuf::int64 value);

  // .sputnik.pb.TokenActivationRequest token_activation_request = 2;
  bool has_token_activation_request() const;
  void clear_token_activation_request();
  static const int kTokenActivationRequestFieldNumber = 2;
  private:
  const ::sputnik::pb::TokenActivationRequest& _internal_token_activation_request() const;
  public:
  const ::sputnik::pb::TokenActivationRequest& token_activation_request() const;
  ::sputnik::pb::TokenActivationRequest* release_token_activation_request();
  ::sputnik::pb::TokenActivationRequest* mutable_token_activation_request();
  void set_allocated_token_activation_request(::sputnik::pb::TokenActivationRequest* token_activation_request);

  // .sputnik.pb.DeleteTokenRequest delete_token_request = 3;
  bool has_delete_token_request() const;
  void clear_delete_token_request();
  static const int kDeleteTokenRequestFieldNumber = 3;
  private:
  const ::sputnik::pb::DeleteTokenRequest& _internal_delete_token_request() const;
  public:
  const ::sputnik::pb::DeleteTokenRequest& delete_token_request() const;
  ::sputnik::pb::DeleteTokenRequest* release_delete_token_request();
  ::sputnik::pb::DeleteTokenRequest* mutable_delete_token_request();
  void set_allocated_delete_token_request(::sputnik::pb::DeleteTokenRequest* delete_token_request);

  // .sputnik.pb.FaceRequest face_request = 4;
  bool has_face_request() const;
  void clear_face_request();
  static const int kFaceRequestFieldNumber = 4;
  private:
  const ::sputnik::pb::FaceRequest& _internal_face_request() const;
  public:
  const ::sputnik::pb::FaceRequest& face_request() const;
  ::sputnik::pb::FaceRequest* release_face_request();
  ::sputnik::pb::FaceRequest* mutable_face_request();
  void set_allocated_face_request(::sputnik::pb::FaceRequest* face_request);

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:sputnik.pb.MegRequest)
 private:
  void set_has_token_activation_request();
  void set_has_delete_token_request();
  void set_has_face_request();

  inline bool has_request() const;
  inline void clear_has_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 request_id_;
  ::google::protobuf::int64 timestamp_millis_;
  union RequestUnion {
    RequestUnion() {}
    ::sputnik::pb::TokenActivationRequest* token_activation_request_;
    ::sputnik::pb::DeleteTokenRequest* delete_token_request_;
    ::sputnik::pb::FaceRequest* face_request_;
  } request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_meg_5frequest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MegRequest

// int32 request_id = 1;
inline void MegRequest::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 MegRequest::request_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegRequest.request_id)
  return request_id_;
}
inline void MegRequest::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.MegRequest.request_id)
}

// .sputnik.pb.TokenActivationRequest token_activation_request = 2;
inline bool MegRequest::has_token_activation_request() const {
  return request_case() == kTokenActivationRequest;
}
inline void MegRequest::set_has_token_activation_request() {
  _oneof_case_[0] = kTokenActivationRequest;
}
inline const ::sputnik::pb::TokenActivationRequest& MegRequest::_internal_token_activation_request() const {
  return *request_.token_activation_request_;
}
inline ::sputnik::pb::TokenActivationRequest* MegRequest::release_token_activation_request() {
  // @@protoc_insertion_point(field_release:sputnik.pb.MegRequest.token_activation_request)
  if (has_token_activation_request()) {
    clear_has_request();
      ::sputnik::pb::TokenActivationRequest* temp = request_.token_activation_request_;
    request_.token_activation_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::TokenActivationRequest& MegRequest::token_activation_request() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegRequest.token_activation_request)
  return has_token_activation_request()
      ? *request_.token_activation_request_
      : *reinterpret_cast< ::sputnik::pb::TokenActivationRequest*>(&::sputnik::pb::_TokenActivationRequest_default_instance_);
}
inline ::sputnik::pb::TokenActivationRequest* MegRequest::mutable_token_activation_request() {
  if (!has_token_activation_request()) {
    clear_request();
    set_has_token_activation_request();
    request_.token_activation_request_ = CreateMaybeMessage< ::sputnik::pb::TokenActivationRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.MegRequest.token_activation_request)
  return request_.token_activation_request_;
}

// .sputnik.pb.DeleteTokenRequest delete_token_request = 3;
inline bool MegRequest::has_delete_token_request() const {
  return request_case() == kDeleteTokenRequest;
}
inline void MegRequest::set_has_delete_token_request() {
  _oneof_case_[0] = kDeleteTokenRequest;
}
inline const ::sputnik::pb::DeleteTokenRequest& MegRequest::_internal_delete_token_request() const {
  return *request_.delete_token_request_;
}
inline ::sputnik::pb::DeleteTokenRequest* MegRequest::release_delete_token_request() {
  // @@protoc_insertion_point(field_release:sputnik.pb.MegRequest.delete_token_request)
  if (has_delete_token_request()) {
    clear_has_request();
      ::sputnik::pb::DeleteTokenRequest* temp = request_.delete_token_request_;
    request_.delete_token_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::DeleteTokenRequest& MegRequest::delete_token_request() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegRequest.delete_token_request)
  return has_delete_token_request()
      ? *request_.delete_token_request_
      : *reinterpret_cast< ::sputnik::pb::DeleteTokenRequest*>(&::sputnik::pb::_DeleteTokenRequest_default_instance_);
}
inline ::sputnik::pb::DeleteTokenRequest* MegRequest::mutable_delete_token_request() {
  if (!has_delete_token_request()) {
    clear_request();
    set_has_delete_token_request();
    request_.delete_token_request_ = CreateMaybeMessage< ::sputnik::pb::DeleteTokenRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.MegRequest.delete_token_request)
  return request_.delete_token_request_;
}

// .sputnik.pb.FaceRequest face_request = 4;
inline bool MegRequest::has_face_request() const {
  return request_case() == kFaceRequest;
}
inline void MegRequest::set_has_face_request() {
  _oneof_case_[0] = kFaceRequest;
}
inline const ::sputnik::pb::FaceRequest& MegRequest::_internal_face_request() const {
  return *request_.face_request_;
}
inline ::sputnik::pb::FaceRequest* MegRequest::release_face_request() {
  // @@protoc_insertion_point(field_release:sputnik.pb.MegRequest.face_request)
  if (has_face_request()) {
    clear_has_request();
      ::sputnik::pb::FaceRequest* temp = request_.face_request_;
    request_.face_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::FaceRequest& MegRequest::face_request() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegRequest.face_request)
  return has_face_request()
      ? *request_.face_request_
      : *reinterpret_cast< ::sputnik::pb::FaceRequest*>(&::sputnik::pb::_FaceRequest_default_instance_);
}
inline ::sputnik::pb::FaceRequest* MegRequest::mutable_face_request() {
  if (!has_face_request()) {
    clear_request();
    set_has_face_request();
    request_.face_request_ = CreateMaybeMessage< ::sputnik::pb::FaceRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.MegRequest.face_request)
  return request_.face_request_;
}

// int64 timestamp_millis = 8;
inline void MegRequest::clear_timestamp_millis() {
  timestamp_millis_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MegRequest::timestamp_millis() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegRequest.timestamp_millis)
  return timestamp_millis_;
}
inline void MegRequest::set_timestamp_millis(::google::protobuf::int64 value) {
  
  timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.MegRequest.timestamp_millis)
}

inline bool MegRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void MegRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline MegRequest::RequestCase MegRequest::request_case() const {
  return MegRequest::RequestCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_meg_5frequest_2eproto
