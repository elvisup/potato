// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face_request.proto

#include "face_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_box_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_box_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Box;
}  // namespace protobuf_box_2eproto
namespace protobuf_face_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FaceLandMark;
}  // namespace protobuf_face_5fattribute_2eproto
namespace protobuf_face_5frequest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5frequest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FaceAttributeRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5frequest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FaceBlurRequirement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5frequest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FacePoseRequirement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5frequest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FaceRecognitionRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5frequest_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FaceTokenRequest;
}  // namespace protobuf_face_5frequest_2eproto
namespace protobuf_image_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_image_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EncodedImage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_image_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Image;
}  // namespace protobuf_image_2eproto
namespace sputnik {
namespace pb {
class FaceAttributeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceAttributeRequest>
      _instance;
} _FaceAttributeRequest_default_instance_;
class FacePoseRequirementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FacePoseRequirement>
      _instance;
} _FacePoseRequirement_default_instance_;
class FaceBlurRequirementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceBlurRequirement>
      _instance;
} _FaceBlurRequirement_default_instance_;
class FaceTokenRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceTokenRequest>
      _instance;
} _FaceTokenRequest_default_instance_;
class FaceRecognitionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceRecognitionRequest>
      _instance;
} _FaceRecognitionRequest_default_instance_;
class FaceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceRequest>
      _instance;
  const ::sputnik::pb::Image* raw_image_;
  const ::sputnik::pb::EncodedImage* encoded_image_;
} _FaceRequest_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_face_5frequest_2eproto {
static void InitDefaultsFaceAttributeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceAttributeRequest_default_instance_;
    new (ptr) ::sputnik::pb::FaceAttributeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceAttributeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FaceAttributeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFaceAttributeRequest}, {}};

static void InitDefaultsFacePoseRequirement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FacePoseRequirement_default_instance_;
    new (ptr) ::sputnik::pb::FacePoseRequirement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FacePoseRequirement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FacePoseRequirement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFacePoseRequirement}, {}};

static void InitDefaultsFaceBlurRequirement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceBlurRequirement_default_instance_;
    new (ptr) ::sputnik::pb::FaceBlurRequirement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceBlurRequirement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FaceBlurRequirement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFaceBlurRequirement}, {}};

static void InitDefaultsFaceTokenRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceTokenRequest_default_instance_;
    new (ptr) ::sputnik::pb::FaceTokenRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceTokenRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FaceTokenRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFaceTokenRequest}, {
      &protobuf_face_5frequest_2eproto::scc_info_FacePoseRequirement.base,
      &protobuf_face_5frequest_2eproto::scc_info_FaceBlurRequirement.base,}};

static void InitDefaultsFaceRecognitionRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceRecognitionRequest_default_instance_;
    new (ptr) ::sputnik::pb::FaceRecognitionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceRecognitionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FaceRecognitionRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFaceRecognitionRequest}, {
      &protobuf_face_5frequest_2eproto::scc_info_FaceTokenRequest.base,}};

static void InitDefaultsFaceRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FaceRequest_default_instance_;
    new (ptr) ::sputnik::pb::FaceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FaceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_FaceRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsFaceRequest}, {
      &protobuf_image_2eproto::scc_info_Image.base,
      &protobuf_image_2eproto::scc_info_EncodedImage.base,
      &protobuf_box_2eproto::scc_info_Box.base,
      &protobuf_face_5fattribute_2eproto::scc_info_FaceLandMark.base,
      &protobuf_face_5frequest_2eproto::scc_info_FaceAttributeRequest.base,
      &protobuf_face_5frequest_2eproto::scc_info_FaceRecognitionRequest.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FaceAttributeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FacePoseRequirement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceBlurRequirement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceTokenRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceRecognitionRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceRequest.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttributeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttributeRequest, predict_blur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttributeRequest, predict_age_gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttributeRequest, predict_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttributeRequest, predict_landmark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceAttributeRequest, predict_postfilter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FacePoseRequirement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FacePoseRequirement, min_pitch_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FacePoseRequirement, max_pitch_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FacePoseRequirement, min_yaw_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FacePoseRequirement, max_yaw_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FacePoseRequirement, min_roll_deg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FacePoseRequirement, max_roll_deg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceBlurRequirement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceBlurRequirement, max_blur_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenRequest, add_new_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenRequest, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenRequest, strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenRequest, already_aligned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenRequest, min_face_pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenRequest, pose_requirement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceTokenRequest, blur_requirement_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecognitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecognitionRequest, max_num_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecognitionRequest, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRecognitionRequest, token_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sputnik::pb::FaceRequestDefaultTypeInternal, raw_image_),
  offsetof(::sputnik::pb::FaceRequestDefaultTypeInternal, encoded_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRequest, box_in_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRequest, landmark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRequest, attribute_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRequest, recognition_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRequest, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FaceRequest, image_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::FaceAttributeRequest)},
  { 10, -1, sizeof(::sputnik::pb::FacePoseRequirement)},
  { 21, -1, sizeof(::sputnik::pb::FaceBlurRequirement)},
  { 27, -1, sizeof(::sputnik::pb::FaceTokenRequest)},
  { 39, -1, sizeof(::sputnik::pb::FaceRecognitionRequest)},
  { 47, -1, sizeof(::sputnik::pb::FaceRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceAttributeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FacePoseRequirement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceBlurRequirement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceTokenRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceRecognitionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FaceRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "face_request.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022face_request.proto\022\nsputnik.pb\032\013image."
      "proto\032\tbox.proto\032\024face_attribute.proto\"\224"
      "\001\n\024FaceAttributeRequest\022\024\n\014predict_blur\030"
      "\001 \001(\010\022\032\n\022predict_age_gender\030\002 \001(\010\022\024\n\014pre"
      "dict_pose\030\003 \001(\010\022\030\n\020predict_landmark\030\004 \001("
      "\010\022\032\n\022predict_postfilter\030\005 \001(\010\"\231\001\n\023FacePo"
      "seRequirement\022\025\n\rmin_pitch_deg\030\001 \001(\005\022\025\n\r"
      "max_pitch_deg\030\002 \001(\005\022\023\n\013min_yaw_deg\030\003 \001(\005"
      "\022\023\n\013max_yaw_deg\030\004 \001(\005\022\024\n\014min_roll_deg\030\005 "
      "\001(\005\022\024\n\014max_roll_deg\030\006 \001(\005\"\'\n\023FaceBlurReq"
      "uirement\022\020\n\010max_blur\030\001 \001(\005\"\362\001\n\020FaceToken"
      "Request\022\025\n\radd_new_token\030\001 \001(\010\022\r\n\005model\030"
      "\002 \001(\t\022\020\n\010strategy\030\003 \001(\t\022\027\n\017already_align"
      "ed\030\004 \001(\010\022\027\n\017min_face_pixels\030\005 \001(\005\0229\n\020pos"
      "e_requirement\030\006 \001(\0132\037.sputnik.pb.FacePos"
      "eRequirement\0229\n\020blur_requirement\030\007 \001(\0132\037"
      ".sputnik.pb.FaceBlurRequirement\"x\n\026FaceR"
      "ecognitionRequest\022\026\n\016max_num_scores\030\001 \001("
      "\005\022\021\n\tprecision\030\002 \001(\005\0223\n\rtoken_request\030\003 "
      "\001(\0132\034.sputnik.pb.FaceTokenRequest\"\324\002\n\013Fa"
      "ceRequest\022&\n\traw_image\030\001 \001(\0132\021.sputnik.p"
      "b.ImageH\000\0221\n\rencoded_image\030\002 \001(\0132\030.sputn"
      "ik.pb.EncodedImageH\000\022%\n\014box_in_image\030\003 \001"
      "(\0132\017.sputnik.pb.Box\022*\n\010landmark\030\004 \001(\0132\030."
      "sputnik.pb.FaceLandMark\022;\n\021attribute_req"
      "uest\030\005 \001(\0132 .sputnik.pb.FaceAttributeReq"
      "uest\022\?\n\023recognition_request\030\006 \001(\0132\".sput"
      "nik.pb.FaceRecognitionRequest\022\020\n\010priorit"
      "y\030\010 \001(\005B\007\n\005imageb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "face_request.proto", &protobuf_RegisterTypes);
  ::protobuf_image_2eproto::AddDescriptors();
  ::protobuf_box_2eproto::AddDescriptors();
  ::protobuf_face_5fattribute_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_face_5frequest_2eproto
namespace sputnik {
namespace pb {

// ===================================================================

void FaceAttributeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceAttributeRequest::kPredictBlurFieldNumber;
const int FaceAttributeRequest::kPredictAgeGenderFieldNumber;
const int FaceAttributeRequest::kPredictPoseFieldNumber;
const int FaceAttributeRequest::kPredictLandmarkFieldNumber;
const int FaceAttributeRequest::kPredictPostfilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceAttributeRequest::FaceAttributeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5frequest_2eproto::scc_info_FaceAttributeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceAttributeRequest)
}
FaceAttributeRequest::FaceAttributeRequest(const FaceAttributeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&predict_blur_, &from.predict_blur_,
    static_cast<size_t>(reinterpret_cast<char*>(&predict_postfilter_) -
    reinterpret_cast<char*>(&predict_blur_)) + sizeof(predict_postfilter_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceAttributeRequest)
}

void FaceAttributeRequest::SharedCtor() {
  ::memset(&predict_blur_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predict_postfilter_) -
      reinterpret_cast<char*>(&predict_blur_)) + sizeof(predict_postfilter_));
}

FaceAttributeRequest::~FaceAttributeRequest() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceAttributeRequest)
  SharedDtor();
}

void FaceAttributeRequest::SharedDtor() {
}

void FaceAttributeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceAttributeRequest::descriptor() {
  ::protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceAttributeRequest& FaceAttributeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5frequest_2eproto::scc_info_FaceAttributeRequest.base);
  return *internal_default_instance();
}


void FaceAttributeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceAttributeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&predict_blur_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predict_postfilter_) -
      reinterpret_cast<char*>(&predict_blur_)) + sizeof(predict_postfilter_));
  _internal_metadata_.Clear();
}

bool FaceAttributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceAttributeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool predict_blur = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predict_blur_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool predict_age_gender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predict_age_gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool predict_pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predict_pose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool predict_landmark = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predict_landmark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool predict_postfilter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predict_postfilter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceAttributeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceAttributeRequest)
  return false;
#undef DO_
}

void FaceAttributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceAttributeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool predict_blur = 1;
  if (this->predict_blur() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->predict_blur(), output);
  }

  // bool predict_age_gender = 2;
  if (this->predict_age_gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->predict_age_gender(), output);
  }

  // bool predict_pose = 3;
  if (this->predict_pose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->predict_pose(), output);
  }

  // bool predict_landmark = 4;
  if (this->predict_landmark() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->predict_landmark(), output);
  }

  // bool predict_postfilter = 5;
  if (this->predict_postfilter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->predict_postfilter(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceAttributeRequest)
}

::google::protobuf::uint8* FaceAttributeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceAttributeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool predict_blur = 1;
  if (this->predict_blur() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->predict_blur(), target);
  }

  // bool predict_age_gender = 2;
  if (this->predict_age_gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->predict_age_gender(), target);
  }

  // bool predict_pose = 3;
  if (this->predict_pose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->predict_pose(), target);
  }

  // bool predict_landmark = 4;
  if (this->predict_landmark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->predict_landmark(), target);
  }

  // bool predict_postfilter = 5;
  if (this->predict_postfilter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->predict_postfilter(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceAttributeRequest)
  return target;
}

size_t FaceAttributeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceAttributeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool predict_blur = 1;
  if (this->predict_blur() != 0) {
    total_size += 1 + 1;
  }

  // bool predict_age_gender = 2;
  if (this->predict_age_gender() != 0) {
    total_size += 1 + 1;
  }

  // bool predict_pose = 3;
  if (this->predict_pose() != 0) {
    total_size += 1 + 1;
  }

  // bool predict_landmark = 4;
  if (this->predict_landmark() != 0) {
    total_size += 1 + 1;
  }

  // bool predict_postfilter = 5;
  if (this->predict_postfilter() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceAttributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceAttributeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceAttributeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceAttributeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceAttributeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceAttributeRequest)
    MergeFrom(*source);
  }
}

void FaceAttributeRequest::MergeFrom(const FaceAttributeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceAttributeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.predict_blur() != 0) {
    set_predict_blur(from.predict_blur());
  }
  if (from.predict_age_gender() != 0) {
    set_predict_age_gender(from.predict_age_gender());
  }
  if (from.predict_pose() != 0) {
    set_predict_pose(from.predict_pose());
  }
  if (from.predict_landmark() != 0) {
    set_predict_landmark(from.predict_landmark());
  }
  if (from.predict_postfilter() != 0) {
    set_predict_postfilter(from.predict_postfilter());
  }
}

void FaceAttributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceAttributeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceAttributeRequest::CopyFrom(const FaceAttributeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceAttributeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceAttributeRequest::IsInitialized() const {
  return true;
}

void FaceAttributeRequest::Swap(FaceAttributeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceAttributeRequest::InternalSwap(FaceAttributeRequest* other) {
  using std::swap;
  swap(predict_blur_, other->predict_blur_);
  swap(predict_age_gender_, other->predict_age_gender_);
  swap(predict_pose_, other->predict_pose_);
  swap(predict_landmark_, other->predict_landmark_);
  swap(predict_postfilter_, other->predict_postfilter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceAttributeRequest::GetMetadata() const {
  protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FacePoseRequirement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacePoseRequirement::kMinPitchDegFieldNumber;
const int FacePoseRequirement::kMaxPitchDegFieldNumber;
const int FacePoseRequirement::kMinYawDegFieldNumber;
const int FacePoseRequirement::kMaxYawDegFieldNumber;
const int FacePoseRequirement::kMinRollDegFieldNumber;
const int FacePoseRequirement::kMaxRollDegFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacePoseRequirement::FacePoseRequirement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5frequest_2eproto::scc_info_FacePoseRequirement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FacePoseRequirement)
}
FacePoseRequirement::FacePoseRequirement(const FacePoseRequirement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_pitch_deg_, &from.min_pitch_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_roll_deg_) -
    reinterpret_cast<char*>(&min_pitch_deg_)) + sizeof(max_roll_deg_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FacePoseRequirement)
}

void FacePoseRequirement::SharedCtor() {
  ::memset(&min_pitch_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_roll_deg_) -
      reinterpret_cast<char*>(&min_pitch_deg_)) + sizeof(max_roll_deg_));
}

FacePoseRequirement::~FacePoseRequirement() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FacePoseRequirement)
  SharedDtor();
}

void FacePoseRequirement::SharedDtor() {
}

void FacePoseRequirement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FacePoseRequirement::descriptor() {
  ::protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FacePoseRequirement& FacePoseRequirement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5frequest_2eproto::scc_info_FacePoseRequirement.base);
  return *internal_default_instance();
}


void FacePoseRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FacePoseRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_pitch_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_roll_deg_) -
      reinterpret_cast<char*>(&min_pitch_deg_)) + sizeof(max_roll_deg_));
  _internal_metadata_.Clear();
}

bool FacePoseRequirement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FacePoseRequirement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 min_pitch_deg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_pitch_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_pitch_deg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pitch_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_yaw_deg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_yaw_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_yaw_deg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_yaw_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_roll_deg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_roll_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_roll_deg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_roll_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FacePoseRequirement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FacePoseRequirement)
  return false;
#undef DO_
}

void FacePoseRequirement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FacePoseRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_pitch_deg = 1;
  if (this->min_pitch_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_pitch_deg(), output);
  }

  // int32 max_pitch_deg = 2;
  if (this->max_pitch_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_pitch_deg(), output);
  }

  // int32 min_yaw_deg = 3;
  if (this->min_yaw_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_yaw_deg(), output);
  }

  // int32 max_yaw_deg = 4;
  if (this->max_yaw_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_yaw_deg(), output);
  }

  // int32 min_roll_deg = 5;
  if (this->min_roll_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_roll_deg(), output);
  }

  // int32 max_roll_deg = 6;
  if (this->max_roll_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_roll_deg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FacePoseRequirement)
}

::google::protobuf::uint8* FacePoseRequirement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FacePoseRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_pitch_deg = 1;
  if (this->min_pitch_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_pitch_deg(), target);
  }

  // int32 max_pitch_deg = 2;
  if (this->max_pitch_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_pitch_deg(), target);
  }

  // int32 min_yaw_deg = 3;
  if (this->min_yaw_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_yaw_deg(), target);
  }

  // int32 max_yaw_deg = 4;
  if (this->max_yaw_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_yaw_deg(), target);
  }

  // int32 min_roll_deg = 5;
  if (this->min_roll_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_roll_deg(), target);
  }

  // int32 max_roll_deg = 6;
  if (this->max_roll_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_roll_deg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FacePoseRequirement)
  return target;
}

size_t FacePoseRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FacePoseRequirement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 min_pitch_deg = 1;
  if (this->min_pitch_deg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_pitch_deg());
  }

  // int32 max_pitch_deg = 2;
  if (this->max_pitch_deg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_pitch_deg());
  }

  // int32 min_yaw_deg = 3;
  if (this->min_yaw_deg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_yaw_deg());
  }

  // int32 max_yaw_deg = 4;
  if (this->max_yaw_deg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_yaw_deg());
  }

  // int32 min_roll_deg = 5;
  if (this->min_roll_deg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_roll_deg());
  }

  // int32 max_roll_deg = 6;
  if (this->max_roll_deg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_roll_deg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FacePoseRequirement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FacePoseRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  const FacePoseRequirement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FacePoseRequirement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FacePoseRequirement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FacePoseRequirement)
    MergeFrom(*source);
  }
}

void FacePoseRequirement::MergeFrom(const FacePoseRequirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FacePoseRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_pitch_deg() != 0) {
    set_min_pitch_deg(from.min_pitch_deg());
  }
  if (from.max_pitch_deg() != 0) {
    set_max_pitch_deg(from.max_pitch_deg());
  }
  if (from.min_yaw_deg() != 0) {
    set_min_yaw_deg(from.min_yaw_deg());
  }
  if (from.max_yaw_deg() != 0) {
    set_max_yaw_deg(from.max_yaw_deg());
  }
  if (from.min_roll_deg() != 0) {
    set_min_roll_deg(from.min_roll_deg());
  }
  if (from.max_roll_deg() != 0) {
    set_max_roll_deg(from.max_roll_deg());
  }
}

void FacePoseRequirement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FacePoseRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacePoseRequirement::CopyFrom(const FacePoseRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FacePoseRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacePoseRequirement::IsInitialized() const {
  return true;
}

void FacePoseRequirement::Swap(FacePoseRequirement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FacePoseRequirement::InternalSwap(FacePoseRequirement* other) {
  using std::swap;
  swap(min_pitch_deg_, other->min_pitch_deg_);
  swap(max_pitch_deg_, other->max_pitch_deg_);
  swap(min_yaw_deg_, other->min_yaw_deg_);
  swap(max_yaw_deg_, other->max_yaw_deg_);
  swap(min_roll_deg_, other->min_roll_deg_);
  swap(max_roll_deg_, other->max_roll_deg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FacePoseRequirement::GetMetadata() const {
  protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceBlurRequirement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceBlurRequirement::kMaxBlurFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceBlurRequirement::FaceBlurRequirement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5frequest_2eproto::scc_info_FaceBlurRequirement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceBlurRequirement)
}
FaceBlurRequirement::FaceBlurRequirement(const FaceBlurRequirement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_blur_ = from.max_blur_;
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceBlurRequirement)
}

void FaceBlurRequirement::SharedCtor() {
  max_blur_ = 0;
}

FaceBlurRequirement::~FaceBlurRequirement() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceBlurRequirement)
  SharedDtor();
}

void FaceBlurRequirement::SharedDtor() {
}

void FaceBlurRequirement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceBlurRequirement::descriptor() {
  ::protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceBlurRequirement& FaceBlurRequirement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5frequest_2eproto::scc_info_FaceBlurRequirement.base);
  return *internal_default_instance();
}


void FaceBlurRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceBlurRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_blur_ = 0;
  _internal_metadata_.Clear();
}

bool FaceBlurRequirement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceBlurRequirement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_blur = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_blur_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceBlurRequirement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceBlurRequirement)
  return false;
#undef DO_
}

void FaceBlurRequirement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceBlurRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_blur = 1;
  if (this->max_blur() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_blur(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceBlurRequirement)
}

::google::protobuf::uint8* FaceBlurRequirement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceBlurRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_blur = 1;
  if (this->max_blur() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_blur(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceBlurRequirement)
  return target;
}

size_t FaceBlurRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceBlurRequirement)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 max_blur = 1;
  if (this->max_blur() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_blur());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceBlurRequirement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceBlurRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceBlurRequirement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceBlurRequirement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceBlurRequirement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceBlurRequirement)
    MergeFrom(*source);
  }
}

void FaceBlurRequirement::MergeFrom(const FaceBlurRequirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceBlurRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_blur() != 0) {
    set_max_blur(from.max_blur());
  }
}

void FaceBlurRequirement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceBlurRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceBlurRequirement::CopyFrom(const FaceBlurRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceBlurRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceBlurRequirement::IsInitialized() const {
  return true;
}

void FaceBlurRequirement::Swap(FaceBlurRequirement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceBlurRequirement::InternalSwap(FaceBlurRequirement* other) {
  using std::swap;
  swap(max_blur_, other->max_blur_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceBlurRequirement::GetMetadata() const {
  protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceTokenRequest::InitAsDefaultInstance() {
  ::sputnik::pb::_FaceTokenRequest_default_instance_._instance.get_mutable()->pose_requirement_ = const_cast< ::sputnik::pb::FacePoseRequirement*>(
      ::sputnik::pb::FacePoseRequirement::internal_default_instance());
  ::sputnik::pb::_FaceTokenRequest_default_instance_._instance.get_mutable()->blur_requirement_ = const_cast< ::sputnik::pb::FaceBlurRequirement*>(
      ::sputnik::pb::FaceBlurRequirement::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceTokenRequest::kAddNewTokenFieldNumber;
const int FaceTokenRequest::kModelFieldNumber;
const int FaceTokenRequest::kStrategyFieldNumber;
const int FaceTokenRequest::kAlreadyAlignedFieldNumber;
const int FaceTokenRequest::kMinFacePixelsFieldNumber;
const int FaceTokenRequest::kPoseRequirementFieldNumber;
const int FaceTokenRequest::kBlurRequirementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceTokenRequest::FaceTokenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5frequest_2eproto::scc_info_FaceTokenRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceTokenRequest)
}
FaceTokenRequest::FaceTokenRequest(const FaceTokenRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  strategy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strategy().size() > 0) {
    strategy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  if (from.has_pose_requirement()) {
    pose_requirement_ = new ::sputnik::pb::FacePoseRequirement(*from.pose_requirement_);
  } else {
    pose_requirement_ = NULL;
  }
  if (from.has_blur_requirement()) {
    blur_requirement_ = new ::sputnik::pb::FaceBlurRequirement(*from.blur_requirement_);
  } else {
    blur_requirement_ = NULL;
  }
  ::memcpy(&add_new_token_, &from.add_new_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_face_pixels_) -
    reinterpret_cast<char*>(&add_new_token_)) + sizeof(min_face_pixels_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceTokenRequest)
}

void FaceTokenRequest::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strategy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_requirement_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_face_pixels_) -
      reinterpret_cast<char*>(&pose_requirement_)) + sizeof(min_face_pixels_));
}

FaceTokenRequest::~FaceTokenRequest() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceTokenRequest)
  SharedDtor();
}

void FaceTokenRequest::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strategy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_requirement_;
  if (this != internal_default_instance()) delete blur_requirement_;
}

void FaceTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceTokenRequest::descriptor() {
  ::protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceTokenRequest& FaceTokenRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5frequest_2eproto::scc_info_FaceTokenRequest.base);
  return *internal_default_instance();
}


void FaceTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pose_requirement_ != NULL) {
    delete pose_requirement_;
  }
  pose_requirement_ = NULL;
  if (GetArenaNoVirtual() == NULL && blur_requirement_ != NULL) {
    delete blur_requirement_;
  }
  blur_requirement_ = NULL;
  ::memset(&add_new_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_face_pixels_) -
      reinterpret_cast<char*>(&add_new_token_)) + sizeof(min_face_pixels_));
  _internal_metadata_.Clear();
}

bool FaceTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceTokenRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool add_new_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_new_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.FaceTokenRequest.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strategy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strategy().data(), static_cast<int>(this->strategy().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.FaceTokenRequest.strategy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool already_aligned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &already_aligned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_face_pixels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_face_pixels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FacePoseRequirement pose_requirement = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose_requirement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceBlurRequirement blur_requirement = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blur_requirement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceTokenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceTokenRequest)
  return false;
#undef DO_
}

void FaceTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool add_new_token = 1;
  if (this->add_new_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->add_new_token(), output);
  }

  // string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceTokenRequest.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // string strategy = 3;
  if (this->strategy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strategy().data(), static_cast<int>(this->strategy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceTokenRequest.strategy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strategy(), output);
  }

  // bool already_aligned = 4;
  if (this->already_aligned() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->already_aligned(), output);
  }

  // int32 min_face_pixels = 5;
  if (this->min_face_pixels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_face_pixels(), output);
  }

  // .sputnik.pb.FacePoseRequirement pose_requirement = 6;
  if (this->has_pose_requirement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_pose_requirement(), output);
  }

  // .sputnik.pb.FaceBlurRequirement blur_requirement = 7;
  if (this->has_blur_requirement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_blur_requirement(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceTokenRequest)
}

::google::protobuf::uint8* FaceTokenRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceTokenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool add_new_token = 1;
  if (this->add_new_token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->add_new_token(), target);
  }

  // string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceTokenRequest.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // string strategy = 3;
  if (this->strategy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strategy().data(), static_cast<int>(this->strategy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.FaceTokenRequest.strategy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strategy(), target);
  }

  // bool already_aligned = 4;
  if (this->already_aligned() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->already_aligned(), target);
  }

  // int32 min_face_pixels = 5;
  if (this->min_face_pixels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_face_pixels(), target);
  }

  // .sputnik.pb.FacePoseRequirement pose_requirement = 6;
  if (this->has_pose_requirement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_pose_requirement(), deterministic, target);
  }

  // .sputnik.pb.FaceBlurRequirement blur_requirement = 7;
  if (this->has_blur_requirement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_blur_requirement(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceTokenRequest)
  return target;
}

size_t FaceTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceTokenRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // string strategy = 3;
  if (this->strategy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strategy());
  }

  // .sputnik.pb.FacePoseRequirement pose_requirement = 6;
  if (this->has_pose_requirement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_requirement_);
  }

  // .sputnik.pb.FaceBlurRequirement blur_requirement = 7;
  if (this->has_blur_requirement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blur_requirement_);
  }

  // bool add_new_token = 1;
  if (this->add_new_token() != 0) {
    total_size += 1 + 1;
  }

  // bool already_aligned = 4;
  if (this->already_aligned() != 0) {
    total_size += 1 + 1;
  }

  // int32 min_face_pixels = 5;
  if (this->min_face_pixels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_face_pixels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceTokenRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceTokenRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceTokenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceTokenRequest)
    MergeFrom(*source);
  }
}

void FaceTokenRequest::MergeFrom(const FaceTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.strategy().size() > 0) {

    strategy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  if (from.has_pose_requirement()) {
    mutable_pose_requirement()->::sputnik::pb::FacePoseRequirement::MergeFrom(from.pose_requirement());
  }
  if (from.has_blur_requirement()) {
    mutable_blur_requirement()->::sputnik::pb::FaceBlurRequirement::MergeFrom(from.blur_requirement());
  }
  if (from.add_new_token() != 0) {
    set_add_new_token(from.add_new_token());
  }
  if (from.already_aligned() != 0) {
    set_already_aligned(from.already_aligned());
  }
  if (from.min_face_pixels() != 0) {
    set_min_face_pixels(from.min_face_pixels());
  }
}

void FaceTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceTokenRequest::CopyFrom(const FaceTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceTokenRequest::IsInitialized() const {
  return true;
}

void FaceTokenRequest::Swap(FaceTokenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceTokenRequest::InternalSwap(FaceTokenRequest* other) {
  using std::swap;
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strategy_.Swap(&other->strategy_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_requirement_, other->pose_requirement_);
  swap(blur_requirement_, other->blur_requirement_);
  swap(add_new_token_, other->add_new_token_);
  swap(already_aligned_, other->already_aligned_);
  swap(min_face_pixels_, other->min_face_pixels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceTokenRequest::GetMetadata() const {
  protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceRecognitionRequest::InitAsDefaultInstance() {
  ::sputnik::pb::_FaceRecognitionRequest_default_instance_._instance.get_mutable()->token_request_ = const_cast< ::sputnik::pb::FaceTokenRequest*>(
      ::sputnik::pb::FaceTokenRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceRecognitionRequest::kMaxNumScoresFieldNumber;
const int FaceRecognitionRequest::kPrecisionFieldNumber;
const int FaceRecognitionRequest::kTokenRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceRecognitionRequest::FaceRecognitionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5frequest_2eproto::scc_info_FaceRecognitionRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceRecognitionRequest)
}
FaceRecognitionRequest::FaceRecognitionRequest(const FaceRecognitionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_token_request()) {
    token_request_ = new ::sputnik::pb::FaceTokenRequest(*from.token_request_);
  } else {
    token_request_ = NULL;
  }
  ::memcpy(&max_num_scores_, &from.max_num_scores_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&max_num_scores_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceRecognitionRequest)
}

void FaceRecognitionRequest::SharedCtor() {
  ::memset(&token_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&token_request_)) + sizeof(precision_));
}

FaceRecognitionRequest::~FaceRecognitionRequest() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceRecognitionRequest)
  SharedDtor();
}

void FaceRecognitionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete token_request_;
}

void FaceRecognitionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceRecognitionRequest::descriptor() {
  ::protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceRecognitionRequest& FaceRecognitionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5frequest_2eproto::scc_info_FaceRecognitionRequest.base);
  return *internal_default_instance();
}


void FaceRecognitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceRecognitionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && token_request_ != NULL) {
    delete token_request_;
  }
  token_request_ = NULL;
  ::memset(&max_num_scores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&max_num_scores_)) + sizeof(precision_));
  _internal_metadata_.Clear();
}

bool FaceRecognitionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceRecognitionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_num_scores = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 precision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceTokenRequest token_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_token_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceRecognitionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceRecognitionRequest)
  return false;
#undef DO_
}

void FaceRecognitionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceRecognitionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_num_scores = 1;
  if (this->max_num_scores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_num_scores(), output);
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->precision(), output);
  }

  // .sputnik.pb.FaceTokenRequest token_request = 3;
  if (this->has_token_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_token_request(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceRecognitionRequest)
}

::google::protobuf::uint8* FaceRecognitionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceRecognitionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_num_scores = 1;
  if (this->max_num_scores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_num_scores(), target);
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->precision(), target);
  }

  // .sputnik.pb.FaceTokenRequest token_request = 3;
  if (this->has_token_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_token_request(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceRecognitionRequest)
  return target;
}

size_t FaceRecognitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceRecognitionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.FaceTokenRequest token_request = 3;
  if (this->has_token_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *token_request_);
  }

  // int32 max_num_scores = 1;
  if (this->max_num_scores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_num_scores());
  }

  // int32 precision = 2;
  if (this->precision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceRecognitionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceRecognitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceRecognitionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceRecognitionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceRecognitionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceRecognitionRequest)
    MergeFrom(*source);
  }
}

void FaceRecognitionRequest::MergeFrom(const FaceRecognitionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceRecognitionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_token_request()) {
    mutable_token_request()->::sputnik::pb::FaceTokenRequest::MergeFrom(from.token_request());
  }
  if (from.max_num_scores() != 0) {
    set_max_num_scores(from.max_num_scores());
  }
  if (from.precision() != 0) {
    set_precision(from.precision());
  }
}

void FaceRecognitionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceRecognitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceRecognitionRequest::CopyFrom(const FaceRecognitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceRecognitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecognitionRequest::IsInitialized() const {
  return true;
}

void FaceRecognitionRequest::Swap(FaceRecognitionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceRecognitionRequest::InternalSwap(FaceRecognitionRequest* other) {
  using std::swap;
  swap(token_request_, other->token_request_);
  swap(max_num_scores_, other->max_num_scores_);
  swap(precision_, other->precision_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceRecognitionRequest::GetMetadata() const {
  protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaceRequest::InitAsDefaultInstance() {
  ::sputnik::pb::_FaceRequest_default_instance_.raw_image_ = const_cast< ::sputnik::pb::Image*>(
      ::sputnik::pb::Image::internal_default_instance());
  ::sputnik::pb::_FaceRequest_default_instance_.encoded_image_ = const_cast< ::sputnik::pb::EncodedImage*>(
      ::sputnik::pb::EncodedImage::internal_default_instance());
  ::sputnik::pb::_FaceRequest_default_instance_._instance.get_mutable()->box_in_image_ = const_cast< ::sputnik::pb::Box*>(
      ::sputnik::pb::Box::internal_default_instance());
  ::sputnik::pb::_FaceRequest_default_instance_._instance.get_mutable()->landmark_ = const_cast< ::sputnik::pb::FaceLandMark*>(
      ::sputnik::pb::FaceLandMark::internal_default_instance());
  ::sputnik::pb::_FaceRequest_default_instance_._instance.get_mutable()->attribute_request_ = const_cast< ::sputnik::pb::FaceAttributeRequest*>(
      ::sputnik::pb::FaceAttributeRequest::internal_default_instance());
  ::sputnik::pb::_FaceRequest_default_instance_._instance.get_mutable()->recognition_request_ = const_cast< ::sputnik::pb::FaceRecognitionRequest*>(
      ::sputnik::pb::FaceRecognitionRequest::internal_default_instance());
}
void FaceRequest::set_allocated_raw_image(::sputnik::pb::Image* raw_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_image();
  if (raw_image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      raw_image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_image, submessage_arena);
    }
    set_has_raw_image();
    image_.raw_image_ = raw_image;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FaceRequest.raw_image)
}
void FaceRequest::clear_raw_image() {
  if (has_raw_image()) {
    delete image_.raw_image_;
    clear_has_image();
  }
}
void FaceRequest::set_allocated_encoded_image(::sputnik::pb::EncodedImage* encoded_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_image();
  if (encoded_image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      encoded_image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, encoded_image, submessage_arena);
    }
    set_has_encoded_image();
    image_.encoded_image_ = encoded_image;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FaceRequest.encoded_image)
}
void FaceRequest::clear_encoded_image() {
  if (has_encoded_image()) {
    delete image_.encoded_image_;
    clear_has_image();
  }
}
void FaceRequest::clear_box_in_image() {
  if (GetArenaNoVirtual() == NULL && box_in_image_ != NULL) {
    delete box_in_image_;
  }
  box_in_image_ = NULL;
}
void FaceRequest::clear_landmark() {
  if (GetArenaNoVirtual() == NULL && landmark_ != NULL) {
    delete landmark_;
  }
  landmark_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceRequest::kRawImageFieldNumber;
const int FaceRequest::kEncodedImageFieldNumber;
const int FaceRequest::kBoxInImageFieldNumber;
const int FaceRequest::kLandmarkFieldNumber;
const int FaceRequest::kAttributeRequestFieldNumber;
const int FaceRequest::kRecognitionRequestFieldNumber;
const int FaceRequest::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceRequest::FaceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_face_5frequest_2eproto::scc_info_FaceRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FaceRequest)
}
FaceRequest::FaceRequest(const FaceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_box_in_image()) {
    box_in_image_ = new ::sputnik::pb::Box(*from.box_in_image_);
  } else {
    box_in_image_ = NULL;
  }
  if (from.has_landmark()) {
    landmark_ = new ::sputnik::pb::FaceLandMark(*from.landmark_);
  } else {
    landmark_ = NULL;
  }
  if (from.has_attribute_request()) {
    attribute_request_ = new ::sputnik::pb::FaceAttributeRequest(*from.attribute_request_);
  } else {
    attribute_request_ = NULL;
  }
  if (from.has_recognition_request()) {
    recognition_request_ = new ::sputnik::pb::FaceRecognitionRequest(*from.recognition_request_);
  } else {
    recognition_request_ = NULL;
  }
  priority_ = from.priority_;
  clear_has_image();
  switch (from.image_case()) {
    case kRawImage: {
      mutable_raw_image()->::sputnik::pb::Image::MergeFrom(from.raw_image());
      break;
    }
    case kEncodedImage: {
      mutable_encoded_image()->::sputnik::pb::EncodedImage::MergeFrom(from.encoded_image());
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FaceRequest)
}

void FaceRequest::SharedCtor() {
  ::memset(&box_in_image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&box_in_image_)) + sizeof(priority_));
  clear_has_image();
}

FaceRequest::~FaceRequest() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FaceRequest)
  SharedDtor();
}

void FaceRequest::SharedDtor() {
  if (this != internal_default_instance()) delete box_in_image_;
  if (this != internal_default_instance()) delete landmark_;
  if (this != internal_default_instance()) delete attribute_request_;
  if (this != internal_default_instance()) delete recognition_request_;
  if (has_image()) {
    clear_image();
  }
}

void FaceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FaceRequest::descriptor() {
  ::protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceRequest& FaceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_face_5frequest_2eproto::scc_info_FaceRequest.base);
  return *internal_default_instance();
}


void FaceRequest::clear_image() {
// @@protoc_insertion_point(one_of_clear_start:sputnik.pb.FaceRequest)
  switch (image_case()) {
    case kRawImage: {
      delete image_.raw_image_;
      break;
    }
    case kEncodedImage: {
      delete image_.encoded_image_;
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IMAGE_NOT_SET;
}


void FaceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FaceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && box_in_image_ != NULL) {
    delete box_in_image_;
  }
  box_in_image_ = NULL;
  if (GetArenaNoVirtual() == NULL && landmark_ != NULL) {
    delete landmark_;
  }
  landmark_ = NULL;
  if (GetArenaNoVirtual() == NULL && attribute_request_ != NULL) {
    delete attribute_request_;
  }
  attribute_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && recognition_request_ != NULL) {
    delete recognition_request_;
  }
  recognition_request_ = NULL;
  priority_ = 0;
  clear_image();
  _internal_metadata_.Clear();
}

bool FaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FaceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.Image raw_image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.EncodedImage encoded_image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_encoded_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.Box box_in_image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_box_in_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceLandMark landmark = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceAttributeRequest attribute_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attribute_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceRecognitionRequest recognition_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recognition_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FaceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FaceRequest)
  return false;
#undef DO_
}

void FaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FaceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.Image raw_image = 1;
  if (has_raw_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_raw_image(), output);
  }

  // .sputnik.pb.EncodedImage encoded_image = 2;
  if (has_encoded_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_encoded_image(), output);
  }

  // .sputnik.pb.Box box_in_image = 3;
  if (this->has_box_in_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_box_in_image(), output);
  }

  // .sputnik.pb.FaceLandMark landmark = 4;
  if (this->has_landmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_landmark(), output);
  }

  // .sputnik.pb.FaceAttributeRequest attribute_request = 5;
  if (this->has_attribute_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_attribute_request(), output);
  }

  // .sputnik.pb.FaceRecognitionRequest recognition_request = 6;
  if (this->has_recognition_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_recognition_request(), output);
  }

  // int32 priority = 8;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->priority(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FaceRequest)
}

::google::protobuf::uint8* FaceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FaceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.Image raw_image = 1;
  if (has_raw_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_raw_image(), deterministic, target);
  }

  // .sputnik.pb.EncodedImage encoded_image = 2;
  if (has_encoded_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_encoded_image(), deterministic, target);
  }

  // .sputnik.pb.Box box_in_image = 3;
  if (this->has_box_in_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_box_in_image(), deterministic, target);
  }

  // .sputnik.pb.FaceLandMark landmark = 4;
  if (this->has_landmark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_landmark(), deterministic, target);
  }

  // .sputnik.pb.FaceAttributeRequest attribute_request = 5;
  if (this->has_attribute_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_attribute_request(), deterministic, target);
  }

  // .sputnik.pb.FaceRecognitionRequest recognition_request = 6;
  if (this->has_recognition_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_recognition_request(), deterministic, target);
  }

  // int32 priority = 8;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->priority(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FaceRequest)
  return target;
}

size_t FaceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FaceRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.Box box_in_image = 3;
  if (this->has_box_in_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *box_in_image_);
  }

  // .sputnik.pb.FaceLandMark landmark = 4;
  if (this->has_landmark()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *landmark_);
  }

  // .sputnik.pb.FaceAttributeRequest attribute_request = 5;
  if (this->has_attribute_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attribute_request_);
  }

  // .sputnik.pb.FaceRecognitionRequest recognition_request = 6;
  if (this->has_recognition_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *recognition_request_);
  }

  // int32 priority = 8;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  switch (image_case()) {
    // .sputnik.pb.Image raw_image = 1;
    case kRawImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *image_.raw_image_);
      break;
    }
    // .sputnik.pb.EncodedImage encoded_image = 2;
    case kEncodedImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *image_.encoded_image_);
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FaceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FaceRequest)
    MergeFrom(*source);
  }
}

void FaceRequest::MergeFrom(const FaceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FaceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_box_in_image()) {
    mutable_box_in_image()->::sputnik::pb::Box::MergeFrom(from.box_in_image());
  }
  if (from.has_landmark()) {
    mutable_landmark()->::sputnik::pb::FaceLandMark::MergeFrom(from.landmark());
  }
  if (from.has_attribute_request()) {
    mutable_attribute_request()->::sputnik::pb::FaceAttributeRequest::MergeFrom(from.attribute_request());
  }
  if (from.has_recognition_request()) {
    mutable_recognition_request()->::sputnik::pb::FaceRecognitionRequest::MergeFrom(from.recognition_request());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  switch (from.image_case()) {
    case kRawImage: {
      mutable_raw_image()->::sputnik::pb::Image::MergeFrom(from.raw_image());
      break;
    }
    case kEncodedImage: {
      mutable_encoded_image()->::sputnik::pb::EncodedImage::MergeFrom(from.encoded_image());
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
}

void FaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceRequest::CopyFrom(const FaceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FaceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRequest::IsInitialized() const {
  return true;
}

void FaceRequest::Swap(FaceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceRequest::InternalSwap(FaceRequest* other) {
  using std::swap;
  swap(box_in_image_, other->box_in_image_);
  swap(landmark_, other->landmark_);
  swap(attribute_request_, other->attribute_request_);
  swap(recognition_request_, other->recognition_request_);
  swap(priority_, other->priority_);
  swap(image_, other->image_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FaceRequest::GetMetadata() const {
  protobuf_face_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_face_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceAttributeRequest* Arena::CreateMaybeMessage< ::sputnik::pb::FaceAttributeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceAttributeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FacePoseRequirement* Arena::CreateMaybeMessage< ::sputnik::pb::FacePoseRequirement >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FacePoseRequirement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceBlurRequirement* Arena::CreateMaybeMessage< ::sputnik::pb::FaceBlurRequirement >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceBlurRequirement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceTokenRequest* Arena::CreateMaybeMessage< ::sputnik::pb::FaceTokenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceTokenRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceRecognitionRequest* Arena::CreateMaybeMessage< ::sputnik::pb::FaceRecognitionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceRecognitionRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FaceRequest* Arena::CreateMaybeMessage< ::sputnik::pb::FaceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FaceRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
