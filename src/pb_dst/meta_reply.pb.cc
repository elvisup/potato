// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_reply.proto

#include "meta_reply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cluster_5freply_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cluster_5freply_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClusterReply;
}  // namespace protobuf_cluster_5freply_2eproto
namespace sputnik {
namespace pb {
class MetaReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetaReply>
      _instance;
  const ::sputnik::pb::ClusterReply* cluster_reply_;
} _MetaReply_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_meta_5freply_2eproto {
static void InitDefaultsMetaReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_MetaReply_default_instance_;
    new (ptr) ::sputnik::pb::MetaReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::MetaReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MetaReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMetaReply}, {
      &protobuf_cluster_5freply_2eproto::scc_info_ClusterReply.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MetaReply.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaReply, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaReply, post_id_),
  offsetof(::sputnik::pb::MetaReplyDefaultTypeInternal, cluster_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaReply, timestamp_millis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaReply, reply_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::MetaReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_MetaReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "meta_reply.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020meta_reply.proto\022\nsputnik.pb\032\023cluster_"
      "reply.proto\"r\n\tMetaReply\022\017\n\007post_id\030\001 \001("
      "\005\0221\n\rcluster_reply\030\002 \001(\0132\030.sputnik.pb.Cl"
      "usterReplyH\000\022\030\n\020timestamp_millis\030\003 \001(\003B\007"
      "\n\005replyb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "meta_reply.proto", &protobuf_RegisterTypes);
  ::protobuf_cluster_5freply_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_meta_5freply_2eproto
namespace sputnik {
namespace pb {

// ===================================================================

void MetaReply::InitAsDefaultInstance() {
  ::sputnik::pb::_MetaReply_default_instance_.cluster_reply_ = const_cast< ::sputnik::pb::ClusterReply*>(
      ::sputnik::pb::ClusterReply::internal_default_instance());
}
void MetaReply::set_allocated_cluster_reply(::sputnik::pb::ClusterReply* cluster_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reply();
  if (cluster_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cluster_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster_reply, submessage_arena);
    }
    set_has_cluster_reply();
    reply_.cluster_reply_ = cluster_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.MetaReply.cluster_reply)
}
void MetaReply::clear_cluster_reply() {
  if (has_cluster_reply()) {
    delete reply_.cluster_reply_;
    clear_has_reply();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaReply::kPostIdFieldNumber;
const int MetaReply::kClusterReplyFieldNumber;
const int MetaReply::kTimestampMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaReply::MetaReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meta_5freply_2eproto::scc_info_MetaReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.MetaReply)
}
MetaReply::MetaReply(const MetaReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_millis_, &from.timestamp_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&post_id_) -
    reinterpret_cast<char*>(&timestamp_millis_)) + sizeof(post_id_));
  clear_has_reply();
  switch (from.reply_case()) {
    case kClusterReply: {
      mutable_cluster_reply()->::sputnik::pb::ClusterReply::MergeFrom(from.cluster_reply());
      break;
    }
    case REPLY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.MetaReply)
}

void MetaReply::SharedCtor() {
  ::memset(&timestamp_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_id_) -
      reinterpret_cast<char*>(&timestamp_millis_)) + sizeof(post_id_));
  clear_has_reply();
}

MetaReply::~MetaReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.MetaReply)
  SharedDtor();
}

void MetaReply::SharedDtor() {
  if (has_reply()) {
    clear_reply();
  }
}

void MetaReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MetaReply::descriptor() {
  ::protobuf_meta_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetaReply& MetaReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meta_5freply_2eproto::scc_info_MetaReply.base);
  return *internal_default_instance();
}


void MetaReply::clear_reply() {
// @@protoc_insertion_point(one_of_clear_start:sputnik.pb.MetaReply)
  switch (reply_case()) {
    case kClusterReply: {
      delete reply_.cluster_reply_;
      break;
    }
    case REPLY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLY_NOT_SET;
}


void MetaReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.MetaReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_id_) -
      reinterpret_cast<char*>(&timestamp_millis_)) + sizeof(post_id_));
  clear_reply();
  _internal_metadata_.Clear();
}

bool MetaReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.MetaReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 post_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.ClusterReply cluster_reply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp_millis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.MetaReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.MetaReply)
  return false;
#undef DO_
}

void MetaReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.MetaReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 post_id = 1;
  if (this->post_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->post_id(), output);
  }

  // .sputnik.pb.ClusterReply cluster_reply = 2;
  if (has_cluster_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_cluster_reply(), output);
  }

  // int64 timestamp_millis = 3;
  if (this->timestamp_millis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp_millis(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.MetaReply)
}

::google::protobuf::uint8* MetaReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.MetaReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 post_id = 1;
  if (this->post_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->post_id(), target);
  }

  // .sputnik.pb.ClusterReply cluster_reply = 2;
  if (has_cluster_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_cluster_reply(), deterministic, target);
  }

  // int64 timestamp_millis = 3;
  if (this->timestamp_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp_millis(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.MetaReply)
  return target;
}

size_t MetaReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.MetaReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 timestamp_millis = 3;
  if (this->timestamp_millis() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_millis());
  }

  // int32 post_id = 1;
  if (this->post_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->post_id());
  }

  switch (reply_case()) {
    // .sputnik.pb.ClusterReply cluster_reply = 2;
    case kClusterReply: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reply_.cluster_reply_);
      break;
    }
    case REPLY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.MetaReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.MetaReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.MetaReply)
    MergeFrom(*source);
  }
}

void MetaReply::MergeFrom(const MetaReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.MetaReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp_millis() != 0) {
    set_timestamp_millis(from.timestamp_millis());
  }
  if (from.post_id() != 0) {
    set_post_id(from.post_id());
  }
  switch (from.reply_case()) {
    case kClusterReply: {
      mutable_cluster_reply()->::sputnik::pb::ClusterReply::MergeFrom(from.cluster_reply());
      break;
    }
    case REPLY_NOT_SET: {
      break;
    }
  }
}

void MetaReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.MetaReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaReply::CopyFrom(const MetaReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.MetaReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaReply::IsInitialized() const {
  return true;
}

void MetaReply::Swap(MetaReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaReply::InternalSwap(MetaReply* other) {
  using std::swap;
  swap(timestamp_millis_, other->timestamp_millis_);
  swap(post_id_, other->post_id_);
  swap(reply_, other->reply_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MetaReply::GetMetadata() const {
  protobuf_meta_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::MetaReply* Arena::CreateMaybeMessage< ::sputnik::pb::MetaReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::MetaReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
