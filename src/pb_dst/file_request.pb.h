// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_request.proto

#ifndef PROTOBUF_INCLUDED_file_5frequest_2eproto
#define PROTOBUF_INCLUDED_file_5frequest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_file_5frequest_2eproto 

namespace protobuf_file_5frequest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_file_5frequest_2eproto
namespace sputnik {
namespace pb {
class FileRequest;
class FileRequestDefaultTypeInternal;
extern FileRequestDefaultTypeInternal _FileRequest_default_instance_;
class VerifyFileRequest;
class VerifyFileRequestDefaultTypeInternal;
extern VerifyFileRequestDefaultTypeInternal _VerifyFileRequest_default_instance_;
class WriteFileRequest;
class WriteFileRequestDefaultTypeInternal;
extern WriteFileRequestDefaultTypeInternal _WriteFileRequest_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::FileRequest* Arena::CreateMaybeMessage<::sputnik::pb::FileRequest>(Arena*);
template<> ::sputnik::pb::VerifyFileRequest* Arena::CreateMaybeMessage<::sputnik::pb::VerifyFileRequest>(Arena*);
template<> ::sputnik::pb::WriteFileRequest* Arena::CreateMaybeMessage<::sputnik::pb::WriteFileRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

// ===================================================================

class VerifyFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.VerifyFileRequest) */ {
 public:
  VerifyFileRequest();
  virtual ~VerifyFileRequest();

  VerifyFileRequest(const VerifyFileRequest& from);

  inline VerifyFileRequest& operator=(const VerifyFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyFileRequest(VerifyFileRequest&& from) noexcept
    : VerifyFileRequest() {
    *this = ::std::move(from);
  }

  inline VerifyFileRequest& operator=(VerifyFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyFileRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyFileRequest*>(
               &_VerifyFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VerifyFileRequest* other);
  friend void swap(VerifyFileRequest& a, VerifyFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyFileRequest* New() const final {
    return CreateMaybeMessage<VerifyFileRequest>(NULL);
  }

  VerifyFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyFileRequest& from);
  void MergeFrom(const VerifyFileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string checksum = 2;
  void clear_checksum();
  static const int kChecksumFieldNumber = 2;
  const ::std::string& checksum() const;
  void set_checksum(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum(::std::string&& value);
  #endif
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  ::std::string* mutable_checksum();
  ::std::string* release_checksum();
  void set_allocated_checksum(::std::string* checksum);

  // string checksum_method = 3;
  void clear_checksum_method();
  static const int kChecksumMethodFieldNumber = 3;
  const ::std::string& checksum_method() const;
  void set_checksum_method(const ::std::string& value);
  #if LANG_CXX11
  void set_checksum_method(::std::string&& value);
  #endif
  void set_checksum_method(const char* value);
  void set_checksum_method(const char* value, size_t size);
  ::std::string* mutable_checksum_method();
  ::std::string* release_checksum_method();
  void set_allocated_checksum_method(::std::string* checksum_method);

  // @@protoc_insertion_point(class_scope:sputnik.pb.VerifyFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr checksum_;
  ::google::protobuf::internal::ArenaStringPtr checksum_method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.WriteFileRequest) */ {
 public:
  WriteFileRequest();
  virtual ~WriteFileRequest();

  WriteFileRequest(const WriteFileRequest& from);

  inline WriteFileRequest& operator=(const WriteFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteFileRequest(WriteFileRequest&& from) noexcept
    : WriteFileRequest() {
    *this = ::std::move(from);
  }

  inline WriteFileRequest& operator=(WriteFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteFileRequest* internal_default_instance() {
    return reinterpret_cast<const WriteFileRequest*>(
               &_WriteFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WriteFileRequest* other);
  friend void swap(WriteFileRequest& a, WriteFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteFileRequest* New() const final {
    return CreateMaybeMessage<WriteFileRequest>(NULL);
  }

  WriteFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteFileRequest& from);
  void MergeFrom(const WriteFileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:sputnik.pb.WriteFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.FileRequest) */ {
 public:
  FileRequest();
  virtual ~FileRequest();

  FileRequest(const FileRequest& from);

  inline FileRequest& operator=(const FileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileRequest(FileRequest&& from) noexcept
    : FileRequest() {
    *this = ::std::move(from);
  }

  inline FileRequest& operator=(FileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileRequest& default_instance();

  enum RequestCase {
    kVerifyFileRequest = 2,
    kWriteFileRequest = 3,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileRequest* internal_default_instance() {
    return reinterpret_cast<const FileRequest*>(
               &_FileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileRequest* other);
  friend void swap(FileRequest& a, FileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileRequest* New() const final {
    return CreateMaybeMessage<FileRequest>(NULL);
  }

  FileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileRequest& from);
  void MergeFrom(const FileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // int64 timestamp_millis = 4;
  void clear_timestamp_millis();
  static const int kTimestampMillisFieldNumber = 4;
  ::google::protobuf::int64 timestamp_millis() const;
  void set_timestamp_millis(::google::protobuf::int64 value);

  // .sputnik.pb.VerifyFileRequest verify_file_request = 2;
  bool has_verify_file_request() const;
  void clear_verify_file_request();
  static const int kVerifyFileRequestFieldNumber = 2;
  private:
  const ::sputnik::pb::VerifyFileRequest& _internal_verify_file_request() const;
  public:
  const ::sputnik::pb::VerifyFileRequest& verify_file_request() const;
  ::sputnik::pb::VerifyFileRequest* release_verify_file_request();
  ::sputnik::pb::VerifyFileRequest* mutable_verify_file_request();
  void set_allocated_verify_file_request(::sputnik::pb::VerifyFileRequest* verify_file_request);

  // .sputnik.pb.WriteFileRequest write_file_request = 3;
  bool has_write_file_request() const;
  void clear_write_file_request();
  static const int kWriteFileRequestFieldNumber = 3;
  private:
  const ::sputnik::pb::WriteFileRequest& _internal_write_file_request() const;
  public:
  const ::sputnik::pb::WriteFileRequest& write_file_request() const;
  ::sputnik::pb::WriteFileRequest* release_write_file_request();
  ::sputnik::pb::WriteFileRequest* mutable_write_file_request();
  void set_allocated_write_file_request(::sputnik::pb::WriteFileRequest* write_file_request);

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:sputnik.pb.FileRequest)
 private:
  void set_has_verify_file_request();
  void set_has_write_file_request();

  inline bool has_request() const;
  inline void clear_has_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 request_id_;
  ::google::protobuf::int64 timestamp_millis_;
  union RequestUnion {
    RequestUnion() {}
    ::sputnik::pb::VerifyFileRequest* verify_file_request_;
    ::sputnik::pb::WriteFileRequest* write_file_request_;
  } request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_file_5frequest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VerifyFileRequest

// string path = 1;
inline void VerifyFileRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyFileRequest::path() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VerifyFileRequest.path)
  return path_.GetNoArena();
}
inline void VerifyFileRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.VerifyFileRequest.path)
}
#if LANG_CXX11
inline void VerifyFileRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.VerifyFileRequest.path)
}
#endif
inline void VerifyFileRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.VerifyFileRequest.path)
}
inline void VerifyFileRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.VerifyFileRequest.path)
}
inline ::std::string* VerifyFileRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.VerifyFileRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyFileRequest::release_path() {
  // @@protoc_insertion_point(field_release:sputnik.pb.VerifyFileRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyFileRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.VerifyFileRequest.path)
}

// string checksum = 2;
inline void VerifyFileRequest::clear_checksum() {
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyFileRequest::checksum() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VerifyFileRequest.checksum)
  return checksum_.GetNoArena();
}
inline void VerifyFileRequest::set_checksum(const ::std::string& value) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.VerifyFileRequest.checksum)
}
#if LANG_CXX11
inline void VerifyFileRequest::set_checksum(::std::string&& value) {
  
  checksum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.VerifyFileRequest.checksum)
}
#endif
inline void VerifyFileRequest::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.VerifyFileRequest.checksum)
}
inline void VerifyFileRequest::set_checksum(const char* value, size_t size) {
  
  checksum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.VerifyFileRequest.checksum)
}
inline ::std::string* VerifyFileRequest::mutable_checksum() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.VerifyFileRequest.checksum)
  return checksum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyFileRequest::release_checksum() {
  // @@protoc_insertion_point(field_release:sputnik.pb.VerifyFileRequest.checksum)
  
  return checksum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyFileRequest::set_allocated_checksum(::std::string* checksum) {
  if (checksum != NULL) {
    
  } else {
    
  }
  checksum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.VerifyFileRequest.checksum)
}

// string checksum_method = 3;
inline void VerifyFileRequest::clear_checksum_method() {
  checksum_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyFileRequest::checksum_method() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.VerifyFileRequest.checksum_method)
  return checksum_method_.GetNoArena();
}
inline void VerifyFileRequest::set_checksum_method(const ::std::string& value) {
  
  checksum_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.VerifyFileRequest.checksum_method)
}
#if LANG_CXX11
inline void VerifyFileRequest::set_checksum_method(::std::string&& value) {
  
  checksum_method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.VerifyFileRequest.checksum_method)
}
#endif
inline void VerifyFileRequest::set_checksum_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  checksum_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.VerifyFileRequest.checksum_method)
}
inline void VerifyFileRequest::set_checksum_method(const char* value, size_t size) {
  
  checksum_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.VerifyFileRequest.checksum_method)
}
inline ::std::string* VerifyFileRequest::mutable_checksum_method() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.VerifyFileRequest.checksum_method)
  return checksum_method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyFileRequest::release_checksum_method() {
  // @@protoc_insertion_point(field_release:sputnik.pb.VerifyFileRequest.checksum_method)
  
  return checksum_method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyFileRequest::set_allocated_checksum_method(::std::string* checksum_method) {
  if (checksum_method != NULL) {
    
  } else {
    
  }
  checksum_method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checksum_method);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.VerifyFileRequest.checksum_method)
}

// -------------------------------------------------------------------

// WriteFileRequest

// string path = 1;
inline void WriteFileRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteFileRequest::path() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.WriteFileRequest.path)
  return path_.GetNoArena();
}
inline void WriteFileRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.WriteFileRequest.path)
}
#if LANG_CXX11
inline void WriteFileRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.WriteFileRequest.path)
}
#endif
inline void WriteFileRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.WriteFileRequest.path)
}
inline void WriteFileRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.WriteFileRequest.path)
}
inline ::std::string* WriteFileRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.WriteFileRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteFileRequest::release_path() {
  // @@protoc_insertion_point(field_release:sputnik.pb.WriteFileRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteFileRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.WriteFileRequest.path)
}

// bytes content = 2;
inline void WriteFileRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteFileRequest::content() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.WriteFileRequest.content)
  return content_.GetNoArena();
}
inline void WriteFileRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.WriteFileRequest.content)
}
#if LANG_CXX11
inline void WriteFileRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.WriteFileRequest.content)
}
#endif
inline void WriteFileRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.WriteFileRequest.content)
}
inline void WriteFileRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.WriteFileRequest.content)
}
inline ::std::string* WriteFileRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.WriteFileRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteFileRequest::release_content() {
  // @@protoc_insertion_point(field_release:sputnik.pb.WriteFileRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteFileRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.WriteFileRequest.content)
}

// -------------------------------------------------------------------

// FileRequest

// int32 request_id = 1;
inline void FileRequest::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 FileRequest::request_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FileRequest.request_id)
  return request_id_;
}
inline void FileRequest::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FileRequest.request_id)
}

// .sputnik.pb.VerifyFileRequest verify_file_request = 2;
inline bool FileRequest::has_verify_file_request() const {
  return request_case() == kVerifyFileRequest;
}
inline void FileRequest::set_has_verify_file_request() {
  _oneof_case_[0] = kVerifyFileRequest;
}
inline void FileRequest::clear_verify_file_request() {
  if (has_verify_file_request()) {
    delete request_.verify_file_request_;
    clear_has_request();
  }
}
inline const ::sputnik::pb::VerifyFileRequest& FileRequest::_internal_verify_file_request() const {
  return *request_.verify_file_request_;
}
inline ::sputnik::pb::VerifyFileRequest* FileRequest::release_verify_file_request() {
  // @@protoc_insertion_point(field_release:sputnik.pb.FileRequest.verify_file_request)
  if (has_verify_file_request()) {
    clear_has_request();
      ::sputnik::pb::VerifyFileRequest* temp = request_.verify_file_request_;
    request_.verify_file_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::VerifyFileRequest& FileRequest::verify_file_request() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FileRequest.verify_file_request)
  return has_verify_file_request()
      ? *request_.verify_file_request_
      : *reinterpret_cast< ::sputnik::pb::VerifyFileRequest*>(&::sputnik::pb::_VerifyFileRequest_default_instance_);
}
inline ::sputnik::pb::VerifyFileRequest* FileRequest::mutable_verify_file_request() {
  if (!has_verify_file_request()) {
    clear_request();
    set_has_verify_file_request();
    request_.verify_file_request_ = CreateMaybeMessage< ::sputnik::pb::VerifyFileRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.FileRequest.verify_file_request)
  return request_.verify_file_request_;
}

// .sputnik.pb.WriteFileRequest write_file_request = 3;
inline bool FileRequest::has_write_file_request() const {
  return request_case() == kWriteFileRequest;
}
inline void FileRequest::set_has_write_file_request() {
  _oneof_case_[0] = kWriteFileRequest;
}
inline void FileRequest::clear_write_file_request() {
  if (has_write_file_request()) {
    delete request_.write_file_request_;
    clear_has_request();
  }
}
inline const ::sputnik::pb::WriteFileRequest& FileRequest::_internal_write_file_request() const {
  return *request_.write_file_request_;
}
inline ::sputnik::pb::WriteFileRequest* FileRequest::release_write_file_request() {
  // @@protoc_insertion_point(field_release:sputnik.pb.FileRequest.write_file_request)
  if (has_write_file_request()) {
    clear_has_request();
      ::sputnik::pb::WriteFileRequest* temp = request_.write_file_request_;
    request_.write_file_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::WriteFileRequest& FileRequest::write_file_request() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FileRequest.write_file_request)
  return has_write_file_request()
      ? *request_.write_file_request_
      : *reinterpret_cast< ::sputnik::pb::WriteFileRequest*>(&::sputnik::pb::_WriteFileRequest_default_instance_);
}
inline ::sputnik::pb::WriteFileRequest* FileRequest::mutable_write_file_request() {
  if (!has_write_file_request()) {
    clear_request();
    set_has_write_file_request();
    request_.write_file_request_ = CreateMaybeMessage< ::sputnik::pb::WriteFileRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.FileRequest.write_file_request)
  return request_.write_file_request_;
}

// int64 timestamp_millis = 4;
inline void FileRequest::clear_timestamp_millis() {
  timestamp_millis_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileRequest::timestamp_millis() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FileRequest.timestamp_millis)
  return timestamp_millis_;
}
inline void FileRequest::set_timestamp_millis(::google::protobuf::int64 value) {
  
  timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FileRequest.timestamp_millis)
}

inline bool FileRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void FileRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline FileRequest::RequestCase FileRequest::request_case() const {
  return FileRequest::RequestCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_file_5frequest_2eproto
