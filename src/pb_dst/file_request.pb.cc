// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_request.proto

#include "file_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_file_5frequest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5frequest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VerifyFileRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_5frequest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WriteFileRequest;
}  // namespace protobuf_file_5frequest_2eproto
namespace sputnik {
namespace pb {
class VerifyFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VerifyFileRequest>
      _instance;
} _VerifyFileRequest_default_instance_;
class WriteFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteFileRequest>
      _instance;
} _WriteFileRequest_default_instance_;
class FileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileRequest>
      _instance;
  const ::sputnik::pb::VerifyFileRequest* verify_file_request_;
  const ::sputnik::pb::WriteFileRequest* write_file_request_;
} _FileRequest_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_file_5frequest_2eproto {
static void InitDefaultsVerifyFileRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_VerifyFileRequest_default_instance_;
    new (ptr) ::sputnik::pb::VerifyFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::VerifyFileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VerifyFileRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVerifyFileRequest}, {}};

static void InitDefaultsWriteFileRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_WriteFileRequest_default_instance_;
    new (ptr) ::sputnik::pb::WriteFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::WriteFileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteFileRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteFileRequest}, {}};

static void InitDefaultsFileRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_FileRequest_default_instance_;
    new (ptr) ::sputnik::pb::FileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::FileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FileRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFileRequest}, {
      &protobuf_file_5frequest_2eproto::scc_info_VerifyFileRequest.base,
      &protobuf_file_5frequest_2eproto::scc_info_WriteFileRequest.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VerifyFileRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteFileRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileRequest.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VerifyFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VerifyFileRequest, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VerifyFileRequest, checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VerifyFileRequest, checksum_method_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::WriteFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::WriteFileRequest, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::WriteFileRequest, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileRequest, request_id_),
  offsetof(::sputnik::pb::FileRequestDefaultTypeInternal, verify_file_request_),
  offsetof(::sputnik::pb::FileRequestDefaultTypeInternal, write_file_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileRequest, timestamp_millis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::FileRequest, request_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::VerifyFileRequest)},
  { 8, -1, sizeof(::sputnik::pb::WriteFileRequest)},
  { 15, -1, sizeof(::sputnik::pb::FileRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_VerifyFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_WriteFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_FileRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "file_request.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022file_request.proto\022\nsputnik.pb\"L\n\021Veri"
      "fyFileRequest\022\014\n\004path\030\001 \001(\t\022\020\n\010checksum\030"
      "\002 \001(\t\022\027\n\017checksum_method\030\003 \001(\t\"1\n\020WriteF"
      "ileRequest\022\014\n\004path\030\001 \001(\t\022\017\n\007content\030\002 \001("
      "\014\"\300\001\n\013FileRequest\022\022\n\nrequest_id\030\001 \001(\005\022<\n"
      "\023verify_file_request\030\002 \001(\0132\035.sputnik.pb."
      "VerifyFileRequestH\000\022:\n\022write_file_reques"
      "t\030\003 \001(\0132\034.sputnik.pb.WriteFileRequestH\000\022"
      "\030\n\020timestamp_millis\030\004 \001(\003B\t\n\007requestb\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file_request.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_file_5frequest_2eproto
namespace sputnik {
namespace pb {

// ===================================================================

void VerifyFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyFileRequest::kPathFieldNumber;
const int VerifyFileRequest::kChecksumFieldNumber;
const int VerifyFileRequest::kChecksumMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyFileRequest::VerifyFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5frequest_2eproto::scc_info_VerifyFileRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.VerifyFileRequest)
}
VerifyFileRequest::VerifyFileRequest(const VerifyFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.checksum().size() > 0) {
    checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_);
  }
  checksum_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.checksum_method().size() > 0) {
    checksum_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_method_);
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.VerifyFileRequest)
}

void VerifyFileRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VerifyFileRequest::~VerifyFileRequest() {
  // @@protoc_insertion_point(destructor:sputnik.pb.VerifyFileRequest)
  SharedDtor();
}

void VerifyFileRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VerifyFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VerifyFileRequest::descriptor() {
  ::protobuf_file_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyFileRequest& VerifyFileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5frequest_2eproto::scc_info_VerifyFileRequest.base);
  return *internal_default_instance();
}


void VerifyFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.VerifyFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool VerifyFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.VerifyFileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.VerifyFileRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string checksum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checksum().data(), static_cast<int>(this->checksum().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.VerifyFileRequest.checksum"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string checksum_method = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checksum_method().data(), static_cast<int>(this->checksum_method().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.VerifyFileRequest.checksum_method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.VerifyFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.VerifyFileRequest)
  return false;
#undef DO_
}

void VerifyFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.VerifyFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.VerifyFileRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string checksum = 2;
  if (this->checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checksum().data(), static_cast<int>(this->checksum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.VerifyFileRequest.checksum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->checksum(), output);
  }

  // string checksum_method = 3;
  if (this->checksum_method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checksum_method().data(), static_cast<int>(this->checksum_method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.VerifyFileRequest.checksum_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->checksum_method(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.VerifyFileRequest)
}

::google::protobuf::uint8* VerifyFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.VerifyFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.VerifyFileRequest.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // string checksum = 2;
  if (this->checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checksum().data(), static_cast<int>(this->checksum().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.VerifyFileRequest.checksum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->checksum(), target);
  }

  // string checksum_method = 3;
  if (this->checksum_method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checksum_method().data(), static_cast<int>(this->checksum_method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.VerifyFileRequest.checksum_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->checksum_method(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.VerifyFileRequest)
  return target;
}

size_t VerifyFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.VerifyFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string checksum = 2;
  if (this->checksum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checksum());
  }

  // string checksum_method = 3;
  if (this->checksum_method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checksum_method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.VerifyFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.VerifyFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.VerifyFileRequest)
    MergeFrom(*source);
  }
}

void VerifyFileRequest::MergeFrom(const VerifyFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.VerifyFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.checksum().size() > 0) {

    checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_);
  }
  if (from.checksum_method().size() > 0) {

    checksum_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_method_);
  }
}

void VerifyFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.VerifyFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyFileRequest::CopyFrom(const VerifyFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.VerifyFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyFileRequest::IsInitialized() const {
  return true;
}

void VerifyFileRequest::Swap(VerifyFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyFileRequest::InternalSwap(VerifyFileRequest* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  checksum_.Swap(&other->checksum_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  checksum_method_.Swap(&other->checksum_method_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VerifyFileRequest::GetMetadata() const {
  protobuf_file_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteFileRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteFileRequest::kPathFieldNumber;
const int WriteFileRequest::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteFileRequest::WriteFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5frequest_2eproto::scc_info_WriteFileRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.WriteFileRequest)
}
WriteFileRequest::WriteFileRequest(const WriteFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.WriteFileRequest)
}

void WriteFileRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WriteFileRequest::~WriteFileRequest() {
  // @@protoc_insertion_point(destructor:sputnik.pb.WriteFileRequest)
  SharedDtor();
}

void WriteFileRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteFileRequest::descriptor() {
  ::protobuf_file_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteFileRequest& WriteFileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5frequest_2eproto::scc_info_WriteFileRequest.base);
  return *internal_default_instance();
}


void WriteFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.WriteFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool WriteFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.WriteFileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.WriteFileRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.WriteFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.WriteFileRequest)
  return false;
#undef DO_
}

void WriteFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.WriteFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.WriteFileRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.WriteFileRequest)
}

::google::protobuf::uint8* WriteFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.WriteFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.WriteFileRequest.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.WriteFileRequest)
  return target;
}

size_t WriteFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.WriteFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.WriteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.WriteFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.WriteFileRequest)
    MergeFrom(*source);
  }
}

void WriteFileRequest::MergeFrom(const WriteFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.WriteFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void WriteFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.WriteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteFileRequest::CopyFrom(const WriteFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.WriteFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteFileRequest::IsInitialized() const {
  return true;
}

void WriteFileRequest::Swap(WriteFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteFileRequest::InternalSwap(WriteFileRequest* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteFileRequest::GetMetadata() const {
  protobuf_file_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileRequest::InitAsDefaultInstance() {
  ::sputnik::pb::_FileRequest_default_instance_.verify_file_request_ = const_cast< ::sputnik::pb::VerifyFileRequest*>(
      ::sputnik::pb::VerifyFileRequest::internal_default_instance());
  ::sputnik::pb::_FileRequest_default_instance_.write_file_request_ = const_cast< ::sputnik::pb::WriteFileRequest*>(
      ::sputnik::pb::WriteFileRequest::internal_default_instance());
}
void FileRequest::set_allocated_verify_file_request(::sputnik::pb::VerifyFileRequest* verify_file_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (verify_file_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verify_file_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verify_file_request, submessage_arena);
    }
    set_has_verify_file_request();
    request_.verify_file_request_ = verify_file_request;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FileRequest.verify_file_request)
}
void FileRequest::set_allocated_write_file_request(::sputnik::pb::WriteFileRequest* write_file_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (write_file_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      write_file_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, write_file_request, submessage_arena);
    }
    set_has_write_file_request();
    request_.write_file_request_ = write_file_request;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FileRequest.write_file_request)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileRequest::kRequestIdFieldNumber;
const int FileRequest::kVerifyFileRequestFieldNumber;
const int FileRequest::kWriteFileRequestFieldNumber;
const int FileRequest::kTimestampMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileRequest::FileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_5frequest_2eproto::scc_info_FileRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.FileRequest)
}
FileRequest::FileRequest(const FileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_millis_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(timestamp_millis_));
  clear_has_request();
  switch (from.request_case()) {
    case kVerifyFileRequest: {
      mutable_verify_file_request()->::sputnik::pb::VerifyFileRequest::MergeFrom(from.verify_file_request());
      break;
    }
    case kWriteFileRequest: {
      mutable_write_file_request()->::sputnik::pb::WriteFileRequest::MergeFrom(from.write_file_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.FileRequest)
}

void FileRequest::SharedCtor() {
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_millis_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(timestamp_millis_));
  clear_has_request();
}

FileRequest::~FileRequest() {
  // @@protoc_insertion_point(destructor:sputnik.pb.FileRequest)
  SharedDtor();
}

void FileRequest::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void FileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileRequest::descriptor() {
  ::protobuf_file_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileRequest& FileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_5frequest_2eproto::scc_info_FileRequest.base);
  return *internal_default_instance();
}


void FileRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:sputnik.pb.FileRequest)
  switch (request_case()) {
    case kVerifyFileRequest: {
      delete request_.verify_file_request_;
      break;
    }
    case kWriteFileRequest: {
      delete request_.write_file_request_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void FileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.FileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_millis_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(timestamp_millis_));
  clear_request();
  _internal_metadata_.Clear();
}

bool FileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.FileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.VerifyFileRequest verify_file_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_verify_file_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.WriteFileRequest write_file_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_write_file_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp_millis = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.FileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.FileRequest)
  return false;
#undef DO_
}

void FileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.FileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request_id(), output);
  }

  // .sputnik.pb.VerifyFileRequest verify_file_request = 2;
  if (has_verify_file_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_verify_file_request(), output);
  }

  // .sputnik.pb.WriteFileRequest write_file_request = 3;
  if (has_write_file_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_write_file_request(), output);
  }

  // int64 timestamp_millis = 4;
  if (this->timestamp_millis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp_millis(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.FileRequest)
}

::google::protobuf::uint8* FileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.FileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request_id(), target);
  }

  // .sputnik.pb.VerifyFileRequest verify_file_request = 2;
  if (has_verify_file_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_verify_file_request(), deterministic, target);
  }

  // .sputnik.pb.WriteFileRequest write_file_request = 3;
  if (has_write_file_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_write_file_request(), deterministic, target);
  }

  // int64 timestamp_millis = 4;
  if (this->timestamp_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp_millis(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.FileRequest)
  return target;
}

size_t FileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.FileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int64 timestamp_millis = 4;
  if (this->timestamp_millis() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_millis());
  }

  switch (request_case()) {
    // .sputnik.pb.VerifyFileRequest verify_file_request = 2;
    case kVerifyFileRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.verify_file_request_);
      break;
    }
    // .sputnik.pb.WriteFileRequest write_file_request = 3;
    case kWriteFileRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.write_file_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.FileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.FileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.FileRequest)
    MergeFrom(*source);
  }
}

void FileRequest::MergeFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.FileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.timestamp_millis() != 0) {
    set_timestamp_millis(from.timestamp_millis());
  }
  switch (from.request_case()) {
    case kVerifyFileRequest: {
      mutable_verify_file_request()->::sputnik::pb::VerifyFileRequest::MergeFrom(from.verify_file_request());
      break;
    }
    case kWriteFileRequest: {
      mutable_write_file_request()->::sputnik::pb::WriteFileRequest::MergeFrom(from.write_file_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void FileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileRequest::CopyFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequest::IsInitialized() const {
  return true;
}

void FileRequest::Swap(FileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileRequest::InternalSwap(FileRequest* other) {
  using std::swap;
  swap(request_id_, other->request_id_);
  swap(timestamp_millis_, other->timestamp_millis_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileRequest::GetMetadata() const {
  protobuf_file_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::VerifyFileRequest* Arena::CreateMaybeMessage< ::sputnik::pb::VerifyFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::VerifyFileRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::WriteFileRequest* Arena::CreateMaybeMessage< ::sputnik::pb::WriteFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::WriteFileRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::FileRequest* Arena::CreateMaybeMessage< ::sputnik::pb::FileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::FileRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
