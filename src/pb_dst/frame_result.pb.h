// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame_result.proto

#ifndef PROTOBUF_INCLUDED_frame_5fresult_2eproto
#define PROTOBUF_INCLUDED_frame_5fresult_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "item.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_frame_5fresult_2eproto 

namespace protobuf_frame_5fresult_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_frame_5fresult_2eproto
namespace sputnik {
namespace pb {
class FrameResult;
class FrameResultDefaultTypeInternal;
extern FrameResultDefaultTypeInternal _FrameResult_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::FrameResult* Arena::CreateMaybeMessage<::sputnik::pb::FrameResult>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

// ===================================================================

class FrameResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.FrameResult) */ {
 public:
  FrameResult();
  virtual ~FrameResult();

  FrameResult(const FrameResult& from);

  inline FrameResult& operator=(const FrameResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameResult(FrameResult&& from) noexcept
    : FrameResult() {
    *this = ::std::move(from);
  }

  inline FrameResult& operator=(FrameResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameResult* internal_default_instance() {
    return reinterpret_cast<const FrameResult*>(
               &_FrameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FrameResult* other);
  friend void swap(FrameResult& a, FrameResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameResult* New() const final {
    return CreateMaybeMessage<FrameResult>(NULL);
  }

  FrameResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FrameResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FrameResult& from);
  void MergeFrom(const FrameResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sputnik.pb.Item items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::sputnik::pb::Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::Item >*
      mutable_items();
  const ::sputnik::pb::Item& items(int index) const;
  ::sputnik::pb::Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::Item >&
      items() const;

  // string version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // int32 frame_id = 1;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  ::google::protobuf::int32 frame_id() const;
  void set_frame_id(::google::protobuf::int32 value);

  // bool DEPRECATED_end = 3;
  void clear_deprecated_end();
  static const int kDEPRECATEDEndFieldNumber = 3;
  bool deprecated_end() const;
  void set_deprecated_end(bool value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.FrameResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::Item > items_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::int32 frame_id_;
  bool deprecated_end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_frame_5fresult_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameResult

// int32 frame_id = 1;
inline void FrameResult::clear_frame_id() {
  frame_id_ = 0;
}
inline ::google::protobuf::int32 FrameResult::frame_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FrameResult.frame_id)
  return frame_id_;
}
inline void FrameResult::set_frame_id(::google::protobuf::int32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FrameResult.frame_id)
}

// repeated .sputnik.pb.Item items = 2;
inline int FrameResult::items_size() const {
  return items_.size();
}
inline ::sputnik::pb::Item* FrameResult::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.FrameResult.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::Item >*
FrameResult::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.FrameResult.items)
  return &items_;
}
inline const ::sputnik::pb::Item& FrameResult::items(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FrameResult.items)
  return items_.Get(index);
}
inline ::sputnik::pb::Item* FrameResult::add_items() {
  // @@protoc_insertion_point(field_add:sputnik.pb.FrameResult.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::Item >&
FrameResult::items() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.FrameResult.items)
  return items_;
}

// bool DEPRECATED_end = 3;
inline void FrameResult::clear_deprecated_end() {
  deprecated_end_ = false;
}
inline bool FrameResult::deprecated_end() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FrameResult.DEPRECATED_end)
  return deprecated_end_;
}
inline void FrameResult::set_deprecated_end(bool value) {
  
  deprecated_end_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FrameResult.DEPRECATED_end)
}

// string version = 4;
inline void FrameResult::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameResult::version() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FrameResult.version)
  return version_.GetNoArena();
}
inline void FrameResult::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.FrameResult.version)
}
#if LANG_CXX11
inline void FrameResult::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.FrameResult.version)
}
#endif
inline void FrameResult::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.FrameResult.version)
}
inline void FrameResult::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.FrameResult.version)
}
inline ::std::string* FrameResult::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.FrameResult.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameResult::release_version() {
  // @@protoc_insertion_point(field_release:sputnik.pb.FrameResult.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameResult::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FrameResult.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_frame_5fresult_2eproto
