// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meg_reply.proto

#ifndef PROTOBUF_INCLUDED_meg_5freply_2eproto
#define PROTOBUF_INCLUDED_meg_5freply_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "face_reply.pb.h"
#include "token_reply.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_meg_5freply_2eproto 

namespace protobuf_meg_5freply_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_meg_5freply_2eproto
namespace sputnik {
namespace pb {
class MegReply;
class MegReplyDefaultTypeInternal;
extern MegReplyDefaultTypeInternal _MegReply_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::MegReply* Arena::CreateMaybeMessage<::sputnik::pb::MegReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

// ===================================================================

class MegReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.MegReply) */ {
 public:
  MegReply();
  virtual ~MegReply();

  MegReply(const MegReply& from);

  inline MegReply& operator=(const MegReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MegReply(MegReply&& from) noexcept
    : MegReply() {
    *this = ::std::move(from);
  }

  inline MegReply& operator=(MegReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MegReply& default_instance();

  enum ContentCase {
    kFaceReply = 3,
    kTokenActivationReplay = 4,
    kDeleteTokenReply = 5,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MegReply* internal_default_instance() {
    return reinterpret_cast<const MegReply*>(
               &_MegReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MegReply* other);
  friend void swap(MegReply& a, MegReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MegReply* New() const final {
    return CreateMaybeMessage<MegReply>(NULL);
  }

  MegReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MegReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MegReply& from);
  void MergeFrom(const MegReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MegReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // int32 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // .sputnik.pb.FaceReply face_reply = 3;
  bool has_face_reply() const;
  void clear_face_reply();
  static const int kFaceReplyFieldNumber = 3;
  private:
  const ::sputnik::pb::FaceReply& _internal_face_reply() const;
  public:
  const ::sputnik::pb::FaceReply& face_reply() const;
  ::sputnik::pb::FaceReply* release_face_reply();
  ::sputnik::pb::FaceReply* mutable_face_reply();
  void set_allocated_face_reply(::sputnik::pb::FaceReply* face_reply);

  // .sputnik.pb.TokenActivationReply token_activation_replay = 4;
  bool has_token_activation_replay() const;
  void clear_token_activation_replay();
  static const int kTokenActivationReplayFieldNumber = 4;
  private:
  const ::sputnik::pb::TokenActivationReply& _internal_token_activation_replay() const;
  public:
  const ::sputnik::pb::TokenActivationReply& token_activation_replay() const;
  ::sputnik::pb::TokenActivationReply* release_token_activation_replay();
  ::sputnik::pb::TokenActivationReply* mutable_token_activation_replay();
  void set_allocated_token_activation_replay(::sputnik::pb::TokenActivationReply* token_activation_replay);

  // .sputnik.pb.DeleteTokenReply delete_token_reply = 5;
  bool has_delete_token_reply() const;
  void clear_delete_token_reply();
  static const int kDeleteTokenReplyFieldNumber = 5;
  private:
  const ::sputnik::pb::DeleteTokenReply& _internal_delete_token_reply() const;
  public:
  const ::sputnik::pb::DeleteTokenReply& delete_token_reply() const;
  ::sputnik::pb::DeleteTokenReply* release_delete_token_reply();
  ::sputnik::pb::DeleteTokenReply* mutable_delete_token_reply();
  void set_allocated_delete_token_reply(::sputnik::pb::DeleteTokenReply* delete_token_reply);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:sputnik.pb.MegReply)
 private:
  void set_has_face_reply();
  void set_has_token_activation_replay();
  void set_has_delete_token_reply();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 request_id_;
  union ContentUnion {
    ContentUnion() {}
    ::sputnik::pb::FaceReply* face_reply_;
    ::sputnik::pb::TokenActivationReply* token_activation_replay_;
    ::sputnik::pb::DeleteTokenReply* delete_token_reply_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_meg_5freply_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MegReply

// int32 request_id = 1;
inline void MegReply::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 MegReply::request_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegReply.request_id)
  return request_id_;
}
inline void MegReply::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.MegReply.request_id)
}

// string error_message = 2;
inline void MegReply::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MegReply::error_message() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegReply.error_message)
  return error_message_.GetNoArena();
}
inline void MegReply::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.MegReply.error_message)
}
#if LANG_CXX11
inline void MegReply::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.MegReply.error_message)
}
#endif
inline void MegReply::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.MegReply.error_message)
}
inline void MegReply::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.MegReply.error_message)
}
inline ::std::string* MegReply::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.MegReply.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MegReply::release_error_message() {
  // @@protoc_insertion_point(field_release:sputnik.pb.MegReply.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MegReply::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.MegReply.error_message)
}

// .sputnik.pb.FaceReply face_reply = 3;
inline bool MegReply::has_face_reply() const {
  return content_case() == kFaceReply;
}
inline void MegReply::set_has_face_reply() {
  _oneof_case_[0] = kFaceReply;
}
inline const ::sputnik::pb::FaceReply& MegReply::_internal_face_reply() const {
  return *content_.face_reply_;
}
inline ::sputnik::pb::FaceReply* MegReply::release_face_reply() {
  // @@protoc_insertion_point(field_release:sputnik.pb.MegReply.face_reply)
  if (has_face_reply()) {
    clear_has_content();
      ::sputnik::pb::FaceReply* temp = content_.face_reply_;
    content_.face_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::FaceReply& MegReply::face_reply() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegReply.face_reply)
  return has_face_reply()
      ? *content_.face_reply_
      : *reinterpret_cast< ::sputnik::pb::FaceReply*>(&::sputnik::pb::_FaceReply_default_instance_);
}
inline ::sputnik::pb::FaceReply* MegReply::mutable_face_reply() {
  if (!has_face_reply()) {
    clear_content();
    set_has_face_reply();
    content_.face_reply_ = CreateMaybeMessage< ::sputnik::pb::FaceReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.MegReply.face_reply)
  return content_.face_reply_;
}

// .sputnik.pb.TokenActivationReply token_activation_replay = 4;
inline bool MegReply::has_token_activation_replay() const {
  return content_case() == kTokenActivationReplay;
}
inline void MegReply::set_has_token_activation_replay() {
  _oneof_case_[0] = kTokenActivationReplay;
}
inline const ::sputnik::pb::TokenActivationReply& MegReply::_internal_token_activation_replay() const {
  return *content_.token_activation_replay_;
}
inline ::sputnik::pb::TokenActivationReply* MegReply::release_token_activation_replay() {
  // @@protoc_insertion_point(field_release:sputnik.pb.MegReply.token_activation_replay)
  if (has_token_activation_replay()) {
    clear_has_content();
      ::sputnik::pb::TokenActivationReply* temp = content_.token_activation_replay_;
    content_.token_activation_replay_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::TokenActivationReply& MegReply::token_activation_replay() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegReply.token_activation_replay)
  return has_token_activation_replay()
      ? *content_.token_activation_replay_
      : *reinterpret_cast< ::sputnik::pb::TokenActivationReply*>(&::sputnik::pb::_TokenActivationReply_default_instance_);
}
inline ::sputnik::pb::TokenActivationReply* MegReply::mutable_token_activation_replay() {
  if (!has_token_activation_replay()) {
    clear_content();
    set_has_token_activation_replay();
    content_.token_activation_replay_ = CreateMaybeMessage< ::sputnik::pb::TokenActivationReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.MegReply.token_activation_replay)
  return content_.token_activation_replay_;
}

// .sputnik.pb.DeleteTokenReply delete_token_reply = 5;
inline bool MegReply::has_delete_token_reply() const {
  return content_case() == kDeleteTokenReply;
}
inline void MegReply::set_has_delete_token_reply() {
  _oneof_case_[0] = kDeleteTokenReply;
}
inline const ::sputnik::pb::DeleteTokenReply& MegReply::_internal_delete_token_reply() const {
  return *content_.delete_token_reply_;
}
inline ::sputnik::pb::DeleteTokenReply* MegReply::release_delete_token_reply() {
  // @@protoc_insertion_point(field_release:sputnik.pb.MegReply.delete_token_reply)
  if (has_delete_token_reply()) {
    clear_has_content();
      ::sputnik::pb::DeleteTokenReply* temp = content_.delete_token_reply_;
    content_.delete_token_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::DeleteTokenReply& MegReply::delete_token_reply() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MegReply.delete_token_reply)
  return has_delete_token_reply()
      ? *content_.delete_token_reply_
      : *reinterpret_cast< ::sputnik::pb::DeleteTokenReply*>(&::sputnik::pb::_DeleteTokenReply_default_instance_);
}
inline ::sputnik::pb::DeleteTokenReply* MegReply::mutable_delete_token_reply() {
  if (!has_delete_token_reply()) {
    clear_content();
    set_has_delete_token_reply();
    content_.delete_token_reply_ = CreateMaybeMessage< ::sputnik::pb::DeleteTokenReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.MegReply.delete_token_reply)
  return content_.delete_token_reply_;
}

inline bool MegReply::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void MegReply::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline MegReply::ContentCase MegReply::content_case() const {
  return MegReply::ContentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_meg_5freply_2eproto
