// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster.proto

#include "cluster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_face_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FaceAttribute;
}  // namespace protobuf_face_5fattribute_2eproto
namespace protobuf_human_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_human_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HumanAttribute;
}  // namespace protobuf_human_5fattribute_2eproto
namespace protobuf_plate_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plate_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PlateAttribute;
}  // namespace protobuf_plate_5fattribute_2eproto
namespace protobuf_trace_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_trace_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TracePoint;
}  // namespace protobuf_trace_5fpoint_2eproto
namespace protobuf_vehicle_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_VehicleAttribute;
}  // namespace protobuf_vehicle_5fattribute_2eproto
namespace sputnik {
namespace pb {
class ClusterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cluster>
      _instance;
} _Cluster_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_cluster_2eproto {
static void InitDefaultsCluster() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_Cluster_default_instance_;
    new (ptr) ::sputnik::pb::Cluster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::Cluster::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Cluster =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsCluster}, {
      &protobuf_face_5fattribute_2eproto::scc_info_FaceAttribute.base,
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute.base,
      &protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute.base,
      &protobuf_human_5fattribute_2eproto::scc_info_HumanAttribute.base,
      &protobuf_trace_5fpoint_2eproto::scc_info_TracePoint.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Cluster.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, face_track_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, human_track_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, vehicle_track_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, plate_track_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, face_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, plate_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, vehicle_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, human_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, face_trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, human_trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, vehicle_trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Cluster, plate_trace_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::Cluster)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_Cluster_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "cluster.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rcluster.proto\022\nsputnik.pb\032\024face_attrib"
      "ute.proto\032\025plate_attribute.proto\032\027vehicl"
      "e_attribute.proto\032\025human_attribute.proto"
      "\032\021trace_point.proto\"\215\004\n\007Cluster\022\022\n\nclust"
      "er_id\030\001 \001(\005\022\026\n\016face_track_ids\030\002 \003(\005\022\027\n\017h"
      "uman_track_ids\030\003 \003(\005\022\031\n\021vehicle_track_id"
      "s\030\004 \003(\005\022\027\n\017plate_track_ids\030\005 \003(\005\0221\n\016face"
      "_attribute\030\006 \001(\0132\031.sputnik.pb.FaceAttrib"
      "ute\0223\n\017plate_attribute\030\007 \001(\0132\032.sputnik.p"
      "b.PlateAttribute\0227\n\021vehicle_attribute\030\010 "
      "\001(\0132\034.sputnik.pb.VehicleAttribute\0223\n\017hum"
      "an_attribute\030\t \001(\0132\032.sputnik.pb.HumanAtt"
      "ribute\022*\n\nface_trace\030\n \003(\0132\026.sputnik.pb."
      "TracePoint\022+\n\013human_trace\030\013 \003(\0132\026.sputni"
      "k.pb.TracePoint\022-\n\rvehicle_trace\030\014 \003(\0132\026"
      ".sputnik.pb.TracePoint\022+\n\013plate_trace\030\r "
      "\003(\0132\026.sputnik.pb.TracePointb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 675);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cluster.proto", &protobuf_RegisterTypes);
  ::protobuf_face_5fattribute_2eproto::AddDescriptors();
  ::protobuf_plate_5fattribute_2eproto::AddDescriptors();
  ::protobuf_vehicle_5fattribute_2eproto::AddDescriptors();
  ::protobuf_human_5fattribute_2eproto::AddDescriptors();
  ::protobuf_trace_5fpoint_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cluster_2eproto
namespace sputnik {
namespace pb {

// ===================================================================

void Cluster::InitAsDefaultInstance() {
  ::sputnik::pb::_Cluster_default_instance_._instance.get_mutable()->face_attribute_ = const_cast< ::sputnik::pb::FaceAttribute*>(
      ::sputnik::pb::FaceAttribute::internal_default_instance());
  ::sputnik::pb::_Cluster_default_instance_._instance.get_mutable()->plate_attribute_ = const_cast< ::sputnik::pb::PlateAttribute*>(
      ::sputnik::pb::PlateAttribute::internal_default_instance());
  ::sputnik::pb::_Cluster_default_instance_._instance.get_mutable()->vehicle_attribute_ = const_cast< ::sputnik::pb::VehicleAttribute*>(
      ::sputnik::pb::VehicleAttribute::internal_default_instance());
  ::sputnik::pb::_Cluster_default_instance_._instance.get_mutable()->human_attribute_ = const_cast< ::sputnik::pb::HumanAttribute*>(
      ::sputnik::pb::HumanAttribute::internal_default_instance());
}
void Cluster::clear_face_attribute() {
  if (GetArenaNoVirtual() == NULL && face_attribute_ != NULL) {
    delete face_attribute_;
  }
  face_attribute_ = NULL;
}
void Cluster::clear_plate_attribute() {
  if (GetArenaNoVirtual() == NULL && plate_attribute_ != NULL) {
    delete plate_attribute_;
  }
  plate_attribute_ = NULL;
}
void Cluster::clear_vehicle_attribute() {
  if (GetArenaNoVirtual() == NULL && vehicle_attribute_ != NULL) {
    delete vehicle_attribute_;
  }
  vehicle_attribute_ = NULL;
}
void Cluster::clear_human_attribute() {
  if (GetArenaNoVirtual() == NULL && human_attribute_ != NULL) {
    delete human_attribute_;
  }
  human_attribute_ = NULL;
}
void Cluster::clear_face_trace() {
  face_trace_.Clear();
}
void Cluster::clear_human_trace() {
  human_trace_.Clear();
}
void Cluster::clear_vehicle_trace() {
  vehicle_trace_.Clear();
}
void Cluster::clear_plate_trace() {
  plate_trace_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster::kClusterIdFieldNumber;
const int Cluster::kFaceTrackIdsFieldNumber;
const int Cluster::kHumanTrackIdsFieldNumber;
const int Cluster::kVehicleTrackIdsFieldNumber;
const int Cluster::kPlateTrackIdsFieldNumber;
const int Cluster::kFaceAttributeFieldNumber;
const int Cluster::kPlateAttributeFieldNumber;
const int Cluster::kVehicleAttributeFieldNumber;
const int Cluster::kHumanAttributeFieldNumber;
const int Cluster::kFaceTraceFieldNumber;
const int Cluster::kHumanTraceFieldNumber;
const int Cluster::kVehicleTraceFieldNumber;
const int Cluster::kPlateTraceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster::Cluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_cluster_2eproto::scc_info_Cluster.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.Cluster)
}
Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      face_track_ids_(from.face_track_ids_),
      human_track_ids_(from.human_track_ids_),
      vehicle_track_ids_(from.vehicle_track_ids_),
      plate_track_ids_(from.plate_track_ids_),
      face_trace_(from.face_trace_),
      human_trace_(from.human_trace_),
      vehicle_trace_(from.vehicle_trace_),
      plate_trace_(from.plate_trace_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_face_attribute()) {
    face_attribute_ = new ::sputnik::pb::FaceAttribute(*from.face_attribute_);
  } else {
    face_attribute_ = NULL;
  }
  if (from.has_plate_attribute()) {
    plate_attribute_ = new ::sputnik::pb::PlateAttribute(*from.plate_attribute_);
  } else {
    plate_attribute_ = NULL;
  }
  if (from.has_vehicle_attribute()) {
    vehicle_attribute_ = new ::sputnik::pb::VehicleAttribute(*from.vehicle_attribute_);
  } else {
    vehicle_attribute_ = NULL;
  }
  if (from.has_human_attribute()) {
    human_attribute_ = new ::sputnik::pb::HumanAttribute(*from.human_attribute_);
  } else {
    human_attribute_ = NULL;
  }
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.Cluster)
}

void Cluster::SharedCtor() {
  ::memset(&face_attribute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&face_attribute_)) + sizeof(cluster_id_));
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:sputnik.pb.Cluster)
  SharedDtor();
}

void Cluster::SharedDtor() {
  if (this != internal_default_instance()) delete face_attribute_;
  if (this != internal_default_instance()) delete plate_attribute_;
  if (this != internal_default_instance()) delete vehicle_attribute_;
  if (this != internal_default_instance()) delete human_attribute_;
}

void Cluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  ::protobuf_cluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cluster& Cluster::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_cluster_2eproto::scc_info_Cluster.base);
  return *internal_default_instance();
}


void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_track_ids_.Clear();
  human_track_ids_.Clear();
  vehicle_track_ids_.Clear();
  plate_track_ids_.Clear();
  face_trace_.Clear();
  human_trace_.Clear();
  vehicle_trace_.Clear();
  plate_trace_.Clear();
  if (GetArenaNoVirtual() == NULL && face_attribute_ != NULL) {
    delete face_attribute_;
  }
  face_attribute_ = NULL;
  if (GetArenaNoVirtual() == NULL && plate_attribute_ != NULL) {
    delete plate_attribute_;
  }
  plate_attribute_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_attribute_ != NULL) {
    delete vehicle_attribute_;
  }
  vehicle_attribute_ = NULL;
  if (GetArenaNoVirtual() == NULL && human_attribute_ != NULL) {
    delete human_attribute_;
  }
  human_attribute_ = NULL;
  cluster_id_ = 0;
  _internal_metadata_.Clear();
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.Cluster)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 face_track_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_face_track_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_face_track_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 human_track_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_human_track_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_human_track_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 vehicle_track_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vehicle_track_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_vehicle_track_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 plate_track_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_plate_track_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_plate_track_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceAttribute face_attribute = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_face_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.PlateAttribute plate_attribute = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plate_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.VehicleAttribute vehicle_attribute = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.HumanAttribute human_attribute = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_human_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.TracePoint face_trace = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_face_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.TracePoint human_trace = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_human_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.TracePoint vehicle_trace = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vehicle_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.TracePoint plate_trace = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_plate_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.Cluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.Cluster)
  return false;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cluster_id(), output);
  }

  // repeated int32 face_track_ids = 2;
  if (this->face_track_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _face_track_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->face_track_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->face_track_ids(i), output);
  }

  // repeated int32 human_track_ids = 3;
  if (this->human_track_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _human_track_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->human_track_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->human_track_ids(i), output);
  }

  // repeated int32 vehicle_track_ids = 4;
  if (this->vehicle_track_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _vehicle_track_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->vehicle_track_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->vehicle_track_ids(i), output);
  }

  // repeated int32 plate_track_ids = 5;
  if (this->plate_track_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _plate_track_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->plate_track_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->plate_track_ids(i), output);
  }

  // .sputnik.pb.FaceAttribute face_attribute = 6;
  if (this->has_face_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_face_attribute(), output);
  }

  // .sputnik.pb.PlateAttribute plate_attribute = 7;
  if (this->has_plate_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_plate_attribute(), output);
  }

  // .sputnik.pb.VehicleAttribute vehicle_attribute = 8;
  if (this->has_vehicle_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_vehicle_attribute(), output);
  }

  // .sputnik.pb.HumanAttribute human_attribute = 9;
  if (this->has_human_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_human_attribute(), output);
  }

  // repeated .sputnik.pb.TracePoint face_trace = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_trace_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->face_trace(static_cast<int>(i)),
      output);
  }

  // repeated .sputnik.pb.TracePoint human_trace = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->human_trace_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->human_trace(static_cast<int>(i)),
      output);
  }

  // repeated .sputnik.pb.TracePoint vehicle_trace = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_trace_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->vehicle_trace(static_cast<int>(i)),
      output);
  }

  // repeated .sputnik.pb.TracePoint plate_trace = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plate_trace_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->plate_trace(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.Cluster)
}

::google::protobuf::uint8* Cluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cluster_id(), target);
  }

  // repeated int32 face_track_ids = 2;
  if (this->face_track_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _face_track_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->face_track_ids_, target);
  }

  // repeated int32 human_track_ids = 3;
  if (this->human_track_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _human_track_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->human_track_ids_, target);
  }

  // repeated int32 vehicle_track_ids = 4;
  if (this->vehicle_track_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _vehicle_track_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->vehicle_track_ids_, target);
  }

  // repeated int32 plate_track_ids = 5;
  if (this->plate_track_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _plate_track_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->plate_track_ids_, target);
  }

  // .sputnik.pb.FaceAttribute face_attribute = 6;
  if (this->has_face_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_face_attribute(), deterministic, target);
  }

  // .sputnik.pb.PlateAttribute plate_attribute = 7;
  if (this->has_plate_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_plate_attribute(), deterministic, target);
  }

  // .sputnik.pb.VehicleAttribute vehicle_attribute = 8;
  if (this->has_vehicle_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_vehicle_attribute(), deterministic, target);
  }

  // .sputnik.pb.HumanAttribute human_attribute = 9;
  if (this->has_human_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_human_attribute(), deterministic, target);
  }

  // repeated .sputnik.pb.TracePoint face_trace = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->face_trace_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->face_trace(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sputnik.pb.TracePoint human_trace = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->human_trace_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->human_trace(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sputnik.pb.TracePoint vehicle_trace = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_trace_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->vehicle_trace(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sputnik.pb.TracePoint plate_trace = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plate_trace_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->plate_trace(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.Cluster)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 face_track_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->face_track_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _face_track_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 human_track_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->human_track_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _human_track_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 vehicle_track_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->vehicle_track_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vehicle_track_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 plate_track_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->plate_track_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _plate_track_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .sputnik.pb.TracePoint face_trace = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->face_trace_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->face_trace(static_cast<int>(i)));
    }
  }

  // repeated .sputnik.pb.TracePoint human_trace = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->human_trace_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->human_trace(static_cast<int>(i)));
    }
  }

  // repeated .sputnik.pb.TracePoint vehicle_trace = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_trace_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicle_trace(static_cast<int>(i)));
    }
  }

  // repeated .sputnik.pb.TracePoint plate_trace = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->plate_trace_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->plate_trace(static_cast<int>(i)));
    }
  }

  // .sputnik.pb.FaceAttribute face_attribute = 6;
  if (this->has_face_attribute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *face_attribute_);
  }

  // .sputnik.pb.PlateAttribute plate_attribute = 7;
  if (this->has_plate_attribute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plate_attribute_);
  }

  // .sputnik.pb.VehicleAttribute vehicle_attribute = 8;
  if (this->has_vehicle_attribute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_attribute_);
  }

  // .sputnik.pb.HumanAttribute human_attribute = 9;
  if (this->has_human_attribute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *human_attribute_);
  }

  // int32 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.Cluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.Cluster)
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  face_track_ids_.MergeFrom(from.face_track_ids_);
  human_track_ids_.MergeFrom(from.human_track_ids_);
  vehicle_track_ids_.MergeFrom(from.vehicle_track_ids_);
  plate_track_ids_.MergeFrom(from.plate_track_ids_);
  face_trace_.MergeFrom(from.face_trace_);
  human_trace_.MergeFrom(from.human_trace_);
  vehicle_trace_.MergeFrom(from.vehicle_trace_);
  plate_trace_.MergeFrom(from.plate_trace_);
  if (from.has_face_attribute()) {
    mutable_face_attribute()->::sputnik::pb::FaceAttribute::MergeFrom(from.face_attribute());
  }
  if (from.has_plate_attribute()) {
    mutable_plate_attribute()->::sputnik::pb::PlateAttribute::MergeFrom(from.plate_attribute());
  }
  if (from.has_vehicle_attribute()) {
    mutable_vehicle_attribute()->::sputnik::pb::VehicleAttribute::MergeFrom(from.vehicle_attribute());
  }
  if (from.has_human_attribute()) {
    mutable_human_attribute()->::sputnik::pb::HumanAttribute::MergeFrom(from.human_attribute());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster::InternalSwap(Cluster* other) {
  using std::swap;
  face_track_ids_.InternalSwap(&other->face_track_ids_);
  human_track_ids_.InternalSwap(&other->human_track_ids_);
  vehicle_track_ids_.InternalSwap(&other->vehicle_track_ids_);
  plate_track_ids_.InternalSwap(&other->plate_track_ids_);
  CastToBase(&face_trace_)->InternalSwap(CastToBase(&other->face_trace_));
  CastToBase(&human_trace_)->InternalSwap(CastToBase(&other->human_trace_));
  CastToBase(&vehicle_trace_)->InternalSwap(CastToBase(&other->vehicle_trace_));
  CastToBase(&plate_trace_)->InternalSwap(CastToBase(&other->plate_trace_));
  swap(face_attribute_, other->face_attribute_);
  swap(plate_attribute_, other->plate_attribute_);
  swap(vehicle_attribute_, other->vehicle_attribute_);
  swap(human_attribute_, other->human_attribute_);
  swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_cluster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::Cluster* Arena::CreateMaybeMessage< ::sputnik::pb::Cluster >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::Cluster >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
