// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#include "item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_box_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_box_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Box;
}  // namespace protobuf_box_2eproto
namespace protobuf_face_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FaceAttribute;
}  // namespace protobuf_face_5fattribute_2eproto
namespace protobuf_human_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_human_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HumanAttribute;
}  // namespace protobuf_human_5fattribute_2eproto
namespace protobuf_image_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_image_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Image;
}  // namespace protobuf_image_2eproto
namespace protobuf_mask_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mask_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Mask;
}  // namespace protobuf_mask_2eproto
namespace protobuf_plate_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plate_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PlateAttribute;
}  // namespace protobuf_plate_5fattribute_2eproto
namespace protobuf_trace_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_trace_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TracePoint;
}  // namespace protobuf_trace_5fpoint_2eproto
namespace protobuf_vehicle_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_VehicleAttribute;
}  // namespace protobuf_vehicle_5fattribute_2eproto
namespace sputnik {
namespace pb {
class ItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Item>
      _instance;
  const ::sputnik::pb::FaceAttribute* face_attribute_;
  const ::sputnik::pb::PlateAttribute* plate_attribute_;
  const ::sputnik::pb::VehicleAttribute* vehicle_attribute_;
  const ::sputnik::pb::HumanAttribute* human_attribute_;
} _Item_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_item_2eproto {
static void InitDefaultsItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_Item_default_instance_;
    new (ptr) ::sputnik::pb::Item();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::Item::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_Item =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsItem}, {
      &protobuf_box_2eproto::scc_info_Box.base,
      &protobuf_face_5fattribute_2eproto::scc_info_FaceAttribute.base,
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute.base,
      &protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute.base,
      &protobuf_human_5fattribute_2eproto::scc_info_HumanAttribute.base,
      &protobuf_image_2eproto::scc_info_Image.base,
      &protobuf_mask_2eproto::scc_info_Mask.base,
      &protobuf_trace_5fpoint_2eproto::scc_info_TracePoint.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Item.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, video_channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, track_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, track_die_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, track_show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, track_push_),
  offsetof(::sputnik::pb::ItemDefaultTypeInternal, face_attribute_),
  offsetof(::sputnik::pb::ItemDefaultTypeInternal, plate_attribute_),
  offsetof(::sputnik::pb::ItemDefaultTypeInternal, vehicle_attribute_),
  offsetof(::sputnik::pb::ItemDefaultTypeInternal, human_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, item_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, timestamp_millis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, item_text_utf8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::Item, attribute_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::Item)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_Item_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "item.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nitem.proto\022\nsputnik.pb\032\tbox.proto\032\024fac"
      "e_attribute.proto\032\025plate_attribute.proto"
      "\032\027vehicle_attribute.proto\032\025human_attribu"
      "te.proto\032\nmask.proto\032\013image.proto\032\021trace"
      "_point.proto\"\360\004\n\004Item\022\"\n\004type\030\001 \001(\0162\024.sp"
      "utnik.pb.ItemType\022\034\n\003box\030\002 \001(\0132\017.sputnik"
      ".pb.Box\022\030\n\020video_channel_id\030\023 \001(\005\022\020\n\010fra"
      "me_id\030\003 \001(\005\022\020\n\010track_id\030\004 \001(\005\022\024\n\014track_u"
      "pdate\030\005 \001(\010\022\021\n\ttrack_die\030\006 \001(\010\022\022\n\ntrack_"
      "show\030\007 \001(\010\022\022\n\ntrack_push\030\010 \001(\010\0223\n\016face_a"
      "ttribute\030\t \001(\0132\031.sputnik.pb.FaceAttribut"
      "eH\000\0225\n\017plate_attribute\030\n \001(\0132\032.sputnik.p"
      "b.PlateAttributeH\000\0229\n\021vehicle_attribute\030"
      "\013 \001(\0132\034.sputnik.pb.VehicleAttributeH\000\0225\n"
      "\017human_attribute\030\r \001(\0132\032.sputnik.pb.Huma"
      "nAttributeH\000\022%\n\nitem_image\030\014 \001(\0132\021.sputn"
      "ik.pb.Image\022\036\n\004mask\030\016 \001(\0132\020.sputnik.pb.M"
      "ask\022\030\n\020timestamp_millis\030\017 \001(\003\022%\n\005trace\030\020"
      " \003(\0132\026.sputnik.pb.TracePoint\022\026\n\016item_tex"
      "t_utf8\030\021 \001(\t\022\014\n\004blob\030\022 \001(\014B\013\n\tattribute*"
      "7\n\010ItemType\022\010\n\004FACE\020\000\022\t\n\005PLATE\020\001\022\013\n\007VEHI"
      "CLE\020\002\022\t\n\005HUMAN\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 864);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "item.proto", &protobuf_RegisterTypes);
  ::protobuf_box_2eproto::AddDescriptors();
  ::protobuf_face_5fattribute_2eproto::AddDescriptors();
  ::protobuf_plate_5fattribute_2eproto::AddDescriptors();
  ::protobuf_vehicle_5fattribute_2eproto::AddDescriptors();
  ::protobuf_human_5fattribute_2eproto::AddDescriptors();
  ::protobuf_mask_2eproto::AddDescriptors();
  ::protobuf_image_2eproto::AddDescriptors();
  ::protobuf_trace_5fpoint_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_item_2eproto
namespace sputnik {
namespace pb {
const ::google::protobuf::EnumDescriptor* ItemType_descriptor() {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_item_2eproto::file_level_enum_descriptors[0];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Item::InitAsDefaultInstance() {
  ::sputnik::pb::_Item_default_instance_._instance.get_mutable()->box_ = const_cast< ::sputnik::pb::Box*>(
      ::sputnik::pb::Box::internal_default_instance());
  ::sputnik::pb::_Item_default_instance_.face_attribute_ = const_cast< ::sputnik::pb::FaceAttribute*>(
      ::sputnik::pb::FaceAttribute::internal_default_instance());
  ::sputnik::pb::_Item_default_instance_.plate_attribute_ = const_cast< ::sputnik::pb::PlateAttribute*>(
      ::sputnik::pb::PlateAttribute::internal_default_instance());
  ::sputnik::pb::_Item_default_instance_.vehicle_attribute_ = const_cast< ::sputnik::pb::VehicleAttribute*>(
      ::sputnik::pb::VehicleAttribute::internal_default_instance());
  ::sputnik::pb::_Item_default_instance_.human_attribute_ = const_cast< ::sputnik::pb::HumanAttribute*>(
      ::sputnik::pb::HumanAttribute::internal_default_instance());
  ::sputnik::pb::_Item_default_instance_._instance.get_mutable()->item_image_ = const_cast< ::sputnik::pb::Image*>(
      ::sputnik::pb::Image::internal_default_instance());
  ::sputnik::pb::_Item_default_instance_._instance.get_mutable()->mask_ = const_cast< ::sputnik::pb::Mask*>(
      ::sputnik::pb::Mask::internal_default_instance());
}
void Item::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) {
    delete box_;
  }
  box_ = NULL;
}
void Item::set_allocated_face_attribute(::sputnik::pb::FaceAttribute* face_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (face_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      face_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, face_attribute, submessage_arena);
    }
    set_has_face_attribute();
    attribute_.face_attribute_ = face_attribute;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Item.face_attribute)
}
void Item::clear_face_attribute() {
  if (has_face_attribute()) {
    delete attribute_.face_attribute_;
    clear_has_attribute();
  }
}
void Item::set_allocated_plate_attribute(::sputnik::pb::PlateAttribute* plate_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (plate_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plate_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plate_attribute, submessage_arena);
    }
    set_has_plate_attribute();
    attribute_.plate_attribute_ = plate_attribute;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Item.plate_attribute)
}
void Item::clear_plate_attribute() {
  if (has_plate_attribute()) {
    delete attribute_.plate_attribute_;
    clear_has_attribute();
  }
}
void Item::set_allocated_vehicle_attribute(::sputnik::pb::VehicleAttribute* vehicle_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (vehicle_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_attribute, submessage_arena);
    }
    set_has_vehicle_attribute();
    attribute_.vehicle_attribute_ = vehicle_attribute;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Item.vehicle_attribute)
}
void Item::clear_vehicle_attribute() {
  if (has_vehicle_attribute()) {
    delete attribute_.vehicle_attribute_;
    clear_has_attribute();
  }
}
void Item::set_allocated_human_attribute(::sputnik::pb::HumanAttribute* human_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_attribute();
  if (human_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      human_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, human_attribute, submessage_arena);
    }
    set_has_human_attribute();
    attribute_.human_attribute_ = human_attribute;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Item.human_attribute)
}
void Item::clear_human_attribute() {
  if (has_human_attribute()) {
    delete attribute_.human_attribute_;
    clear_has_attribute();
  }
}
void Item::clear_item_image() {
  if (GetArenaNoVirtual() == NULL && item_image_ != NULL) {
    delete item_image_;
  }
  item_image_ = NULL;
}
void Item::clear_mask() {
  if (GetArenaNoVirtual() == NULL && mask_ != NULL) {
    delete mask_;
  }
  mask_ = NULL;
}
void Item::clear_trace() {
  trace_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Item::kTypeFieldNumber;
const int Item::kBoxFieldNumber;
const int Item::kVideoChannelIdFieldNumber;
const int Item::kFrameIdFieldNumber;
const int Item::kTrackIdFieldNumber;
const int Item::kTrackUpdateFieldNumber;
const int Item::kTrackDieFieldNumber;
const int Item::kTrackShowFieldNumber;
const int Item::kTrackPushFieldNumber;
const int Item::kFaceAttributeFieldNumber;
const int Item::kPlateAttributeFieldNumber;
const int Item::kVehicleAttributeFieldNumber;
const int Item::kHumanAttributeFieldNumber;
const int Item::kItemImageFieldNumber;
const int Item::kMaskFieldNumber;
const int Item::kTimestampMillisFieldNumber;
const int Item::kTraceFieldNumber;
const int Item::kItemTextUtf8FieldNumber;
const int Item::kBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Item::Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_item_2eproto::scc_info_Item.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.Item)
}
Item::Item(const Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trace_(from.trace_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_text_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.item_text_utf8().size() > 0) {
    item_text_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_text_utf8_);
  }
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blob().size() > 0) {
    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_box()) {
    box_ = new ::sputnik::pb::Box(*from.box_);
  } else {
    box_ = NULL;
  }
  if (from.has_item_image()) {
    item_image_ = new ::sputnik::pb::Image(*from.item_image_);
  } else {
    item_image_ = NULL;
  }
  if (from.has_mask()) {
    mask_ = new ::sputnik::pb::Mask(*from.mask_);
  } else {
    mask_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&video_channel_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(video_channel_id_));
  clear_has_attribute();
  switch (from.attribute_case()) {
    case kFaceAttribute: {
      mutable_face_attribute()->::sputnik::pb::FaceAttribute::MergeFrom(from.face_attribute());
      break;
    }
    case kPlateAttribute: {
      mutable_plate_attribute()->::sputnik::pb::PlateAttribute::MergeFrom(from.plate_attribute());
      break;
    }
    case kVehicleAttribute: {
      mutable_vehicle_attribute()->::sputnik::pb::VehicleAttribute::MergeFrom(from.vehicle_attribute());
      break;
    }
    case kHumanAttribute: {
      mutable_human_attribute()->::sputnik::pb::HumanAttribute::MergeFrom(from.human_attribute());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.Item)
}

void Item::SharedCtor() {
  item_text_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_channel_id_) -
      reinterpret_cast<char*>(&box_)) + sizeof(video_channel_id_));
  clear_has_attribute();
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:sputnik.pb.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  item_text_utf8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete item_image_;
  if (this != internal_default_instance()) delete mask_;
  if (has_attribute()) {
    clear_attribute();
  }
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  ::protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_item_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Item& Item::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_item_2eproto::scc_info_Item.base);
  return *internal_default_instance();
}


void Item::clear_attribute() {
// @@protoc_insertion_point(one_of_clear_start:sputnik.pb.Item)
  switch (attribute_case()) {
    case kFaceAttribute: {
      delete attribute_.face_attribute_;
      break;
    }
    case kPlateAttribute: {
      delete attribute_.plate_attribute_;
      break;
    }
    case kVehicleAttribute: {
      delete attribute_.vehicle_attribute_;
      break;
    }
    case kHumanAttribute: {
      delete attribute_.human_attribute_;
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ATTRIBUTE_NOT_SET;
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_.Clear();
  item_text_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && box_ != NULL) {
    delete box_;
  }
  box_ = NULL;
  if (GetArenaNoVirtual() == NULL && item_image_ != NULL) {
    delete item_image_;
  }
  item_image_ = NULL;
  if (GetArenaNoVirtual() == NULL && mask_ != NULL) {
    delete mask_;
  }
  mask_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_channel_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(video_channel_id_));
  clear_attribute();
  _internal_metadata_.Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.Item)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.ItemType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sputnik::pb::ItemType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.Box box = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frame_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 track_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool track_update = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool track_die = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_die_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool track_show = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool track_push = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_push_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceAttribute face_attribute = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_face_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.PlateAttribute plate_attribute = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plate_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.VehicleAttribute vehicle_attribute = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.Image item_image = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.HumanAttribute human_attribute = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_human_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.Mask mask = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp_millis = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.TracePoint trace = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string item_text_utf8 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_text_utf8()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item_text_utf8().data(), static_cast<int>(this->item_text_utf8().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.Item.item_text_utf8"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes blob = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 video_channel_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.ItemType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sputnik.pb.Box box = 2;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_box(), output);
  }

  // int32 frame_id = 3;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frame_id(), output);
  }

  // int32 track_id = 4;
  if (this->track_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->track_id(), output);
  }

  // bool track_update = 5;
  if (this->track_update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->track_update(), output);
  }

  // bool track_die = 6;
  if (this->track_die() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->track_die(), output);
  }

  // bool track_show = 7;
  if (this->track_show() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->track_show(), output);
  }

  // bool track_push = 8;
  if (this->track_push() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->track_push(), output);
  }

  // .sputnik.pb.FaceAttribute face_attribute = 9;
  if (has_face_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_face_attribute(), output);
  }

  // .sputnik.pb.PlateAttribute plate_attribute = 10;
  if (has_plate_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_plate_attribute(), output);
  }

  // .sputnik.pb.VehicleAttribute vehicle_attribute = 11;
  if (has_vehicle_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_vehicle_attribute(), output);
  }

  // .sputnik.pb.Image item_image = 12;
  if (this->has_item_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_item_image(), output);
  }

  // .sputnik.pb.HumanAttribute human_attribute = 13;
  if (has_human_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_human_attribute(), output);
  }

  // .sputnik.pb.Mask mask = 14;
  if (this->has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_mask(), output);
  }

  // int64 timestamp_millis = 15;
  if (this->timestamp_millis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->timestamp_millis(), output);
  }

  // repeated .sputnik.pb.TracePoint trace = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trace_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->trace(static_cast<int>(i)),
      output);
  }

  // string item_text_utf8 = 17;
  if (this->item_text_utf8().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_text_utf8().data(), static_cast<int>(this->item_text_utf8().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.Item.item_text_utf8");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->item_text_utf8(), output);
  }

  // bytes blob = 18;
  if (this->blob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->blob(), output);
  }

  // int32 video_channel_id = 19;
  if (this->video_channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->video_channel_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.Item)
}

::google::protobuf::uint8* Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.ItemType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sputnik.pb.Box box = 2;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_box(), deterministic, target);
  }

  // int32 frame_id = 3;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frame_id(), target);
  }

  // int32 track_id = 4;
  if (this->track_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->track_id(), target);
  }

  // bool track_update = 5;
  if (this->track_update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->track_update(), target);
  }

  // bool track_die = 6;
  if (this->track_die() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->track_die(), target);
  }

  // bool track_show = 7;
  if (this->track_show() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->track_show(), target);
  }

  // bool track_push = 8;
  if (this->track_push() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->track_push(), target);
  }

  // .sputnik.pb.FaceAttribute face_attribute = 9;
  if (has_face_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_face_attribute(), deterministic, target);
  }

  // .sputnik.pb.PlateAttribute plate_attribute = 10;
  if (has_plate_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_plate_attribute(), deterministic, target);
  }

  // .sputnik.pb.VehicleAttribute vehicle_attribute = 11;
  if (has_vehicle_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_vehicle_attribute(), deterministic, target);
  }

  // .sputnik.pb.Image item_image = 12;
  if (this->has_item_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_item_image(), deterministic, target);
  }

  // .sputnik.pb.HumanAttribute human_attribute = 13;
  if (has_human_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_human_attribute(), deterministic, target);
  }

  // .sputnik.pb.Mask mask = 14;
  if (this->has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_mask(), deterministic, target);
  }

  // int64 timestamp_millis = 15;
  if (this->timestamp_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->timestamp_millis(), target);
  }

  // repeated .sputnik.pb.TracePoint trace = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trace_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->trace(static_cast<int>(i)), deterministic, target);
  }

  // string item_text_utf8 = 17;
  if (this->item_text_utf8().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_text_utf8().data(), static_cast<int>(this->item_text_utf8().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.Item.item_text_utf8");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->item_text_utf8(), target);
  }

  // bytes blob = 18;
  if (this->blob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->blob(), target);
  }

  // int32 video_channel_id = 19;
  if (this->video_channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->video_channel_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.Item)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sputnik.pb.TracePoint trace = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->trace_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trace(static_cast<int>(i)));
    }
  }

  // string item_text_utf8 = 17;
  if (this->item_text_utf8().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_text_utf8());
  }

  // bytes blob = 18;
  if (this->blob().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blob());
  }

  // .sputnik.pb.Box box = 2;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .sputnik.pb.Image item_image = 12;
  if (this->has_item_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_image_);
  }

  // .sputnik.pb.Mask mask = 14;
  if (this->has_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // .sputnik.pb.ItemType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 frame_id = 3;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_id());
  }

  // int32 track_id = 4;
  if (this->track_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->track_id());
  }

  // bool track_update = 5;
  if (this->track_update() != 0) {
    total_size += 1 + 1;
  }

  // bool track_die = 6;
  if (this->track_die() != 0) {
    total_size += 1 + 1;
  }

  // bool track_show = 7;
  if (this->track_show() != 0) {
    total_size += 1 + 1;
  }

  // bool track_push = 8;
  if (this->track_push() != 0) {
    total_size += 1 + 1;
  }

  // int64 timestamp_millis = 15;
  if (this->timestamp_millis() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_millis());
  }

  // int32 video_channel_id = 19;
  if (this->video_channel_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->video_channel_id());
  }

  switch (attribute_case()) {
    // .sputnik.pb.FaceAttribute face_attribute = 9;
    case kFaceAttribute: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.face_attribute_);
      break;
    }
    // .sputnik.pb.PlateAttribute plate_attribute = 10;
    case kPlateAttribute: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.plate_attribute_);
      break;
    }
    // .sputnik.pb.VehicleAttribute vehicle_attribute = 11;
    case kVehicleAttribute: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.vehicle_attribute_);
      break;
    }
    // .sputnik.pb.HumanAttribute human_attribute = 13;
    case kHumanAttribute: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *attribute_.human_attribute_);
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trace_.MergeFrom(from.trace_);
  if (from.item_text_utf8().size() > 0) {

    item_text_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_text_utf8_);
  }
  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_box()) {
    mutable_box()->::sputnik::pb::Box::MergeFrom(from.box());
  }
  if (from.has_item_image()) {
    mutable_item_image()->::sputnik::pb::Image::MergeFrom(from.item_image());
  }
  if (from.has_mask()) {
    mutable_mask()->::sputnik::pb::Mask::MergeFrom(from.mask());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
  if (from.track_id() != 0) {
    set_track_id(from.track_id());
  }
  if (from.track_update() != 0) {
    set_track_update(from.track_update());
  }
  if (from.track_die() != 0) {
    set_track_die(from.track_die());
  }
  if (from.track_show() != 0) {
    set_track_show(from.track_show());
  }
  if (from.track_push() != 0) {
    set_track_push(from.track_push());
  }
  if (from.timestamp_millis() != 0) {
    set_timestamp_millis(from.timestamp_millis());
  }
  if (from.video_channel_id() != 0) {
    set_video_channel_id(from.video_channel_id());
  }
  switch (from.attribute_case()) {
    case kFaceAttribute: {
      mutable_face_attribute()->::sputnik::pb::FaceAttribute::MergeFrom(from.face_attribute());
      break;
    }
    case kPlateAttribute: {
      mutable_plate_attribute()->::sputnik::pb::PlateAttribute::MergeFrom(from.plate_attribute());
      break;
    }
    case kVehicleAttribute: {
      mutable_vehicle_attribute()->::sputnik::pb::VehicleAttribute::MergeFrom(from.vehicle_attribute());
      break;
    }
    case kHumanAttribute: {
      mutable_human_attribute()->::sputnik::pb::HumanAttribute::MergeFrom(from.human_attribute());
      break;
    }
    case ATTRIBUTE_NOT_SET: {
      break;
    }
  }
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::Swap(Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Item::InternalSwap(Item* other) {
  using std::swap;
  CastToBase(&trace_)->InternalSwap(CastToBase(&other->trace_));
  item_text_utf8_.Swap(&other->item_text_utf8_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blob_.Swap(&other->blob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(box_, other->box_);
  swap(item_image_, other->item_image_);
  swap(mask_, other->mask_);
  swap(type_, other->type_);
  swap(frame_id_, other->frame_id_);
  swap(track_id_, other->track_id_);
  swap(track_update_, other->track_update_);
  swap(track_die_, other->track_die_);
  swap(track_show_, other->track_show_);
  swap(track_push_, other->track_push_);
  swap(timestamp_millis_, other->timestamp_millis_);
  swap(video_channel_id_, other->video_channel_id_);
  swap(attribute_, other->attribute_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_item_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_item_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::Item* Arena::CreateMaybeMessage< ::sputnik::pb::Item >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::Item >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
