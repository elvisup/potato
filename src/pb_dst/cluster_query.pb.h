// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster_query.proto

#ifndef PROTOBUF_INCLUDED_cluster_5fquery_2eproto
#define PROTOBUF_INCLUDED_cluster_5fquery_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cluster_5fquery_2eproto 

namespace protobuf_cluster_5fquery_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cluster_5fquery_2eproto
namespace sputnik {
namespace pb {
class ClusterQuery;
class ClusterQueryDefaultTypeInternal;
extern ClusterQueryDefaultTypeInternal _ClusterQuery_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::ClusterQuery* Arena::CreateMaybeMessage<::sputnik::pb::ClusterQuery>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

enum ClusterQueryType {
  BY_CLUSTER_ID = 0,
  BY_TRACK_ID = 1,
  SYNC_ALL = 2,
  ClusterQueryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClusterQueryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClusterQueryType_IsValid(int value);
const ClusterQueryType ClusterQueryType_MIN = BY_CLUSTER_ID;
const ClusterQueryType ClusterQueryType_MAX = SYNC_ALL;
const int ClusterQueryType_ARRAYSIZE = ClusterQueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClusterQueryType_descriptor();
inline const ::std::string& ClusterQueryType_Name(ClusterQueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClusterQueryType_descriptor(), value);
}
inline bool ClusterQueryType_Parse(
    const ::std::string& name, ClusterQueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClusterQueryType>(
    ClusterQueryType_descriptor(), name, value);
}
// ===================================================================

class ClusterQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.ClusterQuery) */ {
 public:
  ClusterQuery();
  virtual ~ClusterQuery();

  ClusterQuery(const ClusterQuery& from);

  inline ClusterQuery& operator=(const ClusterQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterQuery(ClusterQuery&& from) noexcept
    : ClusterQuery() {
    *this = ::std::move(from);
  }

  inline ClusterQuery& operator=(ClusterQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterQuery* internal_default_instance() {
    return reinterpret_cast<const ClusterQuery*>(
               &_ClusterQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClusterQuery* other);
  friend void swap(ClusterQuery& a, ClusterQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterQuery* New() const final {
    return CreateMaybeMessage<ClusterQuery>(NULL);
  }

  ClusterQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClusterQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClusterQuery& from);
  void MergeFrom(const ClusterQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cluster_ids = 2;
  int cluster_ids_size() const;
  void clear_cluster_ids();
  static const int kClusterIdsFieldNumber = 2;
  ::google::protobuf::int32 cluster_ids(int index) const;
  void set_cluster_ids(int index, ::google::protobuf::int32 value);
  void add_cluster_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cluster_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cluster_ids();

  // repeated int32 track_ids = 3;
  int track_ids_size() const;
  void clear_track_ids();
  static const int kTrackIdsFieldNumber = 3;
  ::google::protobuf::int32 track_ids(int index) const;
  void set_track_ids(int index, ::google::protobuf::int32 value);
  void add_track_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      track_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_track_ids();

  // .sputnik.pb.ClusterQueryType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sputnik::pb::ClusterQueryType type() const;
  void set_type(::sputnik::pb::ClusterQueryType value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.ClusterQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cluster_ids_;
  mutable int _cluster_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > track_ids_;
  mutable int _track_ids_cached_byte_size_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cluster_5fquery_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClusterQuery

// .sputnik.pb.ClusterQueryType type = 1;
inline void ClusterQuery::clear_type() {
  type_ = 0;
}
inline ::sputnik::pb::ClusterQueryType ClusterQuery::type() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.ClusterQuery.type)
  return static_cast< ::sputnik::pb::ClusterQueryType >(type_);
}
inline void ClusterQuery::set_type(::sputnik::pb::ClusterQueryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.ClusterQuery.type)
}

// repeated int32 cluster_ids = 2;
inline int ClusterQuery::cluster_ids_size() const {
  return cluster_ids_.size();
}
inline void ClusterQuery::clear_cluster_ids() {
  cluster_ids_.Clear();
}
inline ::google::protobuf::int32 ClusterQuery::cluster_ids(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.ClusterQuery.cluster_ids)
  return cluster_ids_.Get(index);
}
inline void ClusterQuery::set_cluster_ids(int index, ::google::protobuf::int32 value) {
  cluster_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sputnik.pb.ClusterQuery.cluster_ids)
}
inline void ClusterQuery::add_cluster_ids(::google::protobuf::int32 value) {
  cluster_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sputnik.pb.ClusterQuery.cluster_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClusterQuery::cluster_ids() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.ClusterQuery.cluster_ids)
  return cluster_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClusterQuery::mutable_cluster_ids() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.ClusterQuery.cluster_ids)
  return &cluster_ids_;
}

// repeated int32 track_ids = 3;
inline int ClusterQuery::track_ids_size() const {
  return track_ids_.size();
}
inline void ClusterQuery::clear_track_ids() {
  track_ids_.Clear();
}
inline ::google::protobuf::int32 ClusterQuery::track_ids(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.ClusterQuery.track_ids)
  return track_ids_.Get(index);
}
inline void ClusterQuery::set_track_ids(int index, ::google::protobuf::int32 value) {
  track_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sputnik.pb.ClusterQuery.track_ids)
}
inline void ClusterQuery::add_track_ids(::google::protobuf::int32 value) {
  track_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sputnik.pb.ClusterQuery.track_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClusterQuery::track_ids() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.ClusterQuery.track_ids)
  return track_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClusterQuery::mutable_track_ids() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.ClusterQuery.track_ids)
  return &track_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sputnik::pb::ClusterQueryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sputnik::pb::ClusterQueryType>() {
  return ::sputnik::pb::ClusterQueryType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cluster_5fquery_2eproto
