// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meg_request.proto

#include "meg_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_face_5frequest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_face_5frequest_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_FaceRequest;
}  // namespace protobuf_face_5frequest_2eproto
namespace protobuf_token_5frequest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_token_5frequest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeleteTokenRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_token_5frequest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TokenActivationRequest;
}  // namespace protobuf_token_5frequest_2eproto
namespace sputnik {
namespace pb {
class MegRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MegRequest>
      _instance;
  const ::sputnik::pb::TokenActivationRequest* token_activation_request_;
  const ::sputnik::pb::DeleteTokenRequest* delete_token_request_;
  const ::sputnik::pb::FaceRequest* face_request_;
} _MegRequest_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_meg_5frequest_2eproto {
static void InitDefaultsMegRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_MegRequest_default_instance_;
    new (ptr) ::sputnik::pb::MegRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::MegRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_MegRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsMegRequest}, {
      &protobuf_token_5frequest_2eproto::scc_info_TokenActivationRequest.base,
      &protobuf_token_5frequest_2eproto::scc_info_DeleteTokenRequest.base,
      &protobuf_face_5frequest_2eproto::scc_info_FaceRequest.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MegRequest.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegRequest, request_id_),
  offsetof(::sputnik::pb::MegRequestDefaultTypeInternal, token_activation_request_),
  offsetof(::sputnik::pb::MegRequestDefaultTypeInternal, delete_token_request_),
  offsetof(::sputnik::pb::MegRequestDefaultTypeInternal, face_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegRequest, timestamp_millis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MegRequest, request_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::MegRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_MegRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "meg_request.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021meg_request.proto\022\nsputnik.pb\032\022face_re"
      "quest.proto\032\023token_request.proto\"\376\001\n\nMeg"
      "Request\022\022\n\nrequest_id\030\001 \001(\005\022F\n\030token_act"
      "ivation_request\030\002 \001(\0132\".sputnik.pb.Token"
      "ActivationRequestH\000\022>\n\024delete_token_requ"
      "est\030\003 \001(\0132\036.sputnik.pb.DeleteTokenReques"
      "tH\000\022/\n\014face_request\030\004 \001(\0132\027.sputnik.pb.F"
      "aceRequestH\000\022\030\n\020timestamp_millis\030\010 \001(\003B\t"
      "\n\007requestb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "meg_request.proto", &protobuf_RegisterTypes);
  ::protobuf_face_5frequest_2eproto::AddDescriptors();
  ::protobuf_token_5frequest_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_meg_5frequest_2eproto
namespace sputnik {
namespace pb {

// ===================================================================

void MegRequest::InitAsDefaultInstance() {
  ::sputnik::pb::_MegRequest_default_instance_.token_activation_request_ = const_cast< ::sputnik::pb::TokenActivationRequest*>(
      ::sputnik::pb::TokenActivationRequest::internal_default_instance());
  ::sputnik::pb::_MegRequest_default_instance_.delete_token_request_ = const_cast< ::sputnik::pb::DeleteTokenRequest*>(
      ::sputnik::pb::DeleteTokenRequest::internal_default_instance());
  ::sputnik::pb::_MegRequest_default_instance_.face_request_ = const_cast< ::sputnik::pb::FaceRequest*>(
      ::sputnik::pb::FaceRequest::internal_default_instance());
}
void MegRequest::set_allocated_token_activation_request(::sputnik::pb::TokenActivationRequest* token_activation_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (token_activation_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      token_activation_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, token_activation_request, submessage_arena);
    }
    set_has_token_activation_request();
    request_.token_activation_request_ = token_activation_request;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.MegRequest.token_activation_request)
}
void MegRequest::clear_token_activation_request() {
  if (has_token_activation_request()) {
    delete request_.token_activation_request_;
    clear_has_request();
  }
}
void MegRequest::set_allocated_delete_token_request(::sputnik::pb::DeleteTokenRequest* delete_token_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (delete_token_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delete_token_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_token_request, submessage_arena);
    }
    set_has_delete_token_request();
    request_.delete_token_request_ = delete_token_request;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.MegRequest.delete_token_request)
}
void MegRequest::clear_delete_token_request() {
  if (has_delete_token_request()) {
    delete request_.delete_token_request_;
    clear_has_request();
  }
}
void MegRequest::set_allocated_face_request(::sputnik::pb::FaceRequest* face_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (face_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      face_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, face_request, submessage_arena);
    }
    set_has_face_request();
    request_.face_request_ = face_request;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.MegRequest.face_request)
}
void MegRequest::clear_face_request() {
  if (has_face_request()) {
    delete request_.face_request_;
    clear_has_request();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MegRequest::kRequestIdFieldNumber;
const int MegRequest::kTokenActivationRequestFieldNumber;
const int MegRequest::kDeleteTokenRequestFieldNumber;
const int MegRequest::kFaceRequestFieldNumber;
const int MegRequest::kTimestampMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MegRequest::MegRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meg_5frequest_2eproto::scc_info_MegRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.MegRequest)
}
MegRequest::MegRequest(const MegRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_millis_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(timestamp_millis_));
  clear_has_request();
  switch (from.request_case()) {
    case kTokenActivationRequest: {
      mutable_token_activation_request()->::sputnik::pb::TokenActivationRequest::MergeFrom(from.token_activation_request());
      break;
    }
    case kDeleteTokenRequest: {
      mutable_delete_token_request()->::sputnik::pb::DeleteTokenRequest::MergeFrom(from.delete_token_request());
      break;
    }
    case kFaceRequest: {
      mutable_face_request()->::sputnik::pb::FaceRequest::MergeFrom(from.face_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.MegRequest)
}

void MegRequest::SharedCtor() {
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_millis_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(timestamp_millis_));
  clear_has_request();
}

MegRequest::~MegRequest() {
  // @@protoc_insertion_point(destructor:sputnik.pb.MegRequest)
  SharedDtor();
}

void MegRequest::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void MegRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MegRequest::descriptor() {
  ::protobuf_meg_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meg_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MegRequest& MegRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meg_5frequest_2eproto::scc_info_MegRequest.base);
  return *internal_default_instance();
}


void MegRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:sputnik.pb.MegRequest)
  switch (request_case()) {
    case kTokenActivationRequest: {
      delete request_.token_activation_request_;
      break;
    }
    case kDeleteTokenRequest: {
      delete request_.delete_token_request_;
      break;
    }
    case kFaceRequest: {
      delete request_.face_request_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void MegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.MegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_millis_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(timestamp_millis_));
  clear_request();
  _internal_metadata_.Clear();
}

bool MegRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.MegRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.TokenActivationRequest token_activation_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_token_activation_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.DeleteTokenRequest delete_token_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_token_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.FaceRequest face_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_face_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp_millis = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.MegRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.MegRequest)
  return false;
#undef DO_
}

void MegRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.MegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request_id(), output);
  }

  // .sputnik.pb.TokenActivationRequest token_activation_request = 2;
  if (has_token_activation_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_token_activation_request(), output);
  }

  // .sputnik.pb.DeleteTokenRequest delete_token_request = 3;
  if (has_delete_token_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_delete_token_request(), output);
  }

  // .sputnik.pb.FaceRequest face_request = 4;
  if (has_face_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_face_request(), output);
  }

  // int64 timestamp_millis = 8;
  if (this->timestamp_millis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->timestamp_millis(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.MegRequest)
}

::google::protobuf::uint8* MegRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.MegRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request_id(), target);
  }

  // .sputnik.pb.TokenActivationRequest token_activation_request = 2;
  if (has_token_activation_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_token_activation_request(), deterministic, target);
  }

  // .sputnik.pb.DeleteTokenRequest delete_token_request = 3;
  if (has_delete_token_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_delete_token_request(), deterministic, target);
  }

  // .sputnik.pb.FaceRequest face_request = 4;
  if (has_face_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_face_request(), deterministic, target);
  }

  // int64 timestamp_millis = 8;
  if (this->timestamp_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->timestamp_millis(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.MegRequest)
  return target;
}

size_t MegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.MegRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int64 timestamp_millis = 8;
  if (this->timestamp_millis() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_millis());
  }

  switch (request_case()) {
    // .sputnik.pb.TokenActivationRequest token_activation_request = 2;
    case kTokenActivationRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.token_activation_request_);
      break;
    }
    // .sputnik.pb.DeleteTokenRequest delete_token_request = 3;
    case kDeleteTokenRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.delete_token_request_);
      break;
    }
    // .sputnik.pb.FaceRequest face_request = 4;
    case kFaceRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.face_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MegRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.MegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MegRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MegRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.MegRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.MegRequest)
    MergeFrom(*source);
  }
}

void MegRequest::MergeFrom(const MegRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.MegRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.timestamp_millis() != 0) {
    set_timestamp_millis(from.timestamp_millis());
  }
  switch (from.request_case()) {
    case kTokenActivationRequest: {
      mutable_token_activation_request()->::sputnik::pb::TokenActivationRequest::MergeFrom(from.token_activation_request());
      break;
    }
    case kDeleteTokenRequest: {
      mutable_delete_token_request()->::sputnik::pb::DeleteTokenRequest::MergeFrom(from.delete_token_request());
      break;
    }
    case kFaceRequest: {
      mutable_face_request()->::sputnik::pb::FaceRequest::MergeFrom(from.face_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void MegRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.MegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MegRequest::CopyFrom(const MegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.MegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MegRequest::IsInitialized() const {
  return true;
}

void MegRequest::Swap(MegRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MegRequest::InternalSwap(MegRequest* other) {
  using std::swap;
  swap(request_id_, other->request_id_);
  swap(timestamp_millis_, other->timestamp_millis_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MegRequest::GetMetadata() const {
  protobuf_meg_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meg_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::MegRequest* Arena::CreateMaybeMessage< ::sputnik::pb::MegRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::MegRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
