// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef PROTOBUF_INCLUDED_image_2eproto
#define PROTOBUF_INCLUDED_image_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_image_2eproto 

namespace protobuf_image_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_image_2eproto
namespace sputnik {
namespace pb {
class EncodedImage;
class EncodedImageDefaultTypeInternal;
extern EncodedImageDefaultTypeInternal _EncodedImage_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::EncodedImage* Arena::CreateMaybeMessage<::sputnik::pb::EncodedImage>(Arena*);
template<> ::sputnik::pb::Image* Arena::CreateMaybeMessage<::sputnik::pb::Image>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

enum ImageEncodeFormat {
  IEF_UNKNOWN = 0,
  IEF_PNG = 1,
  IEF_JPG = 2,
  IEF_BMP = 3,
  ImageEncodeFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ImageEncodeFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ImageEncodeFormat_IsValid(int value);
const ImageEncodeFormat ImageEncodeFormat_MIN = IEF_UNKNOWN;
const ImageEncodeFormat ImageEncodeFormat_MAX = IEF_BMP;
const int ImageEncodeFormat_ARRAYSIZE = ImageEncodeFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageEncodeFormat_descriptor();
inline const ::std::string& ImageEncodeFormat_Name(ImageEncodeFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageEncodeFormat_descriptor(), value);
}
inline bool ImageEncodeFormat_Parse(
    const ::std::string& name, ImageEncodeFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageEncodeFormat>(
    ImageEncodeFormat_descriptor(), name, value);
}
// ===================================================================

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(NULL);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 h = 1;
  void clear_h();
  static const int kHFieldNumber = 1;
  ::google::protobuf::int32 h() const;
  void set_h(::google::protobuf::int32 value);

  // int32 w = 2;
  void clear_w();
  static const int kWFieldNumber = 2;
  ::google::protobuf::int32 w() const;
  void set_w(::google::protobuf::int32 value);

  // int32 c = 3;
  void clear_c();
  static const int kCFieldNumber = 3;
  ::google::protobuf::int32 c() const;
  void set_c(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 h_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 c_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_image_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncodedImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.EncodedImage) */ {
 public:
  EncodedImage();
  virtual ~EncodedImage();

  EncodedImage(const EncodedImage& from);

  inline EncodedImage& operator=(const EncodedImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncodedImage(EncodedImage&& from) noexcept
    : EncodedImage() {
    *this = ::std::move(from);
  }

  inline EncodedImage& operator=(EncodedImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncodedImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncodedImage* internal_default_instance() {
    return reinterpret_cast<const EncodedImage*>(
               &_EncodedImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EncodedImage* other);
  friend void swap(EncodedImage& a, EncodedImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncodedImage* New() const final {
    return CreateMaybeMessage<EncodedImage>(NULL);
  }

  EncodedImage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EncodedImage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EncodedImage& from);
  void MergeFrom(const EncodedImage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncodedImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes blob = 1;
  void clear_blob();
  static const int kBlobFieldNumber = 1;
  const ::std::string& blob() const;
  void set_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_blob(::std::string&& value);
  #endif
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  ::std::string* mutable_blob();
  ::std::string* release_blob();
  void set_allocated_blob(::std::string* blob);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .sputnik.pb.ImageEncodeFormat encode_format = 2;
  void clear_encode_format();
  static const int kEncodeFormatFieldNumber = 2;
  ::sputnik::pb::ImageEncodeFormat encode_format() const;
  void set_encode_format(::sputnik::pb::ImageEncodeFormat value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.EncodedImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr blob_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int encode_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_image_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// int32 h = 1;
inline void Image::clear_h() {
  h_ = 0;
}
inline ::google::protobuf::int32 Image::h() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Image.h)
  return h_;
}
inline void Image::set_h(::google::protobuf::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Image.h)
}

// int32 w = 2;
inline void Image::clear_w() {
  w_ = 0;
}
inline ::google::protobuf::int32 Image::w() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Image.w)
  return w_;
}
inline void Image::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Image.w)
}

// int32 c = 3;
inline void Image::clear_c() {
  c_ = 0;
}
inline ::google::protobuf::int32 Image::c() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Image.c)
  return c_;
}
inline void Image::set_c(::google::protobuf::int32 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Image.c)
}

// bytes data = 4;
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Image.data)
  return data_.GetNoArena();
}
inline void Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.Image.data)
}
#if LANG_CXX11
inline void Image::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.Image.data)
}
#endif
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.Image.data)
}
inline ::std::string* Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Image.data)
}

// -------------------------------------------------------------------

// EncodedImage

// bytes blob = 1;
inline void EncodedImage::clear_blob() {
  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncodedImage::blob() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.EncodedImage.blob)
  return blob_.GetNoArena();
}
inline void EncodedImage::set_blob(const ::std::string& value) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.EncodedImage.blob)
}
#if LANG_CXX11
inline void EncodedImage::set_blob(::std::string&& value) {
  
  blob_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.EncodedImage.blob)
}
#endif
inline void EncodedImage::set_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.EncodedImage.blob)
}
inline void EncodedImage::set_blob(const void* value, size_t size) {
  
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.EncodedImage.blob)
}
inline ::std::string* EncodedImage::mutable_blob() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.EncodedImage.blob)
  return blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncodedImage::release_blob() {
  // @@protoc_insertion_point(field_release:sputnik.pb.EncodedImage.blob)
  
  return blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncodedImage::set_allocated_blob(::std::string* blob) {
  if (blob != NULL) {
    
  } else {
    
  }
  blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blob);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.EncodedImage.blob)
}

// .sputnik.pb.ImageEncodeFormat encode_format = 2;
inline void EncodedImage::clear_encode_format() {
  encode_format_ = 0;
}
inline ::sputnik::pb::ImageEncodeFormat EncodedImage::encode_format() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.EncodedImage.encode_format)
  return static_cast< ::sputnik::pb::ImageEncodeFormat >(encode_format_);
}
inline void EncodedImage::set_encode_format(::sputnik::pb::ImageEncodeFormat value) {
  
  encode_format_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.EncodedImage.encode_format)
}

// string description = 3;
inline void EncodedImage::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncodedImage::description() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.EncodedImage.description)
  return description_.GetNoArena();
}
inline void EncodedImage::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.EncodedImage.description)
}
#if LANG_CXX11
inline void EncodedImage::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.EncodedImage.description)
}
#endif
inline void EncodedImage::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.EncodedImage.description)
}
inline void EncodedImage::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.EncodedImage.description)
}
inline ::std::string* EncodedImage::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.EncodedImage.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncodedImage::release_description() {
  // @@protoc_insertion_point(field_release:sputnik.pb.EncodedImage.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncodedImage::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.EncodedImage.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sputnik::pb::ImageEncodeFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sputnik::pb::ImageEncodeFormat>() {
  return ::sputnik::pb::ImageEncodeFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_image_2eproto
