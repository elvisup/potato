// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_post.proto

#include "meta_post.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_cluster_5fquery_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_cluster_5fquery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClusterQuery;
}  // namespace protobuf_cluster_5fquery_2eproto
namespace sputnik {
namespace pb {
class MetaPostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetaPost>
      _instance;
  const ::sputnik::pb::ClusterQuery* cluster_query_;
} _MetaPost_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_meta_5fpost_2eproto {
static void InitDefaultsMetaPost() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_MetaPost_default_instance_;
    new (ptr) ::sputnik::pb::MetaPost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::MetaPost::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MetaPost =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMetaPost}, {
      &protobuf_cluster_5fquery_2eproto::scc_info_ClusterQuery.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MetaPost.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaPost, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaPost, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaPost, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaPost, post_id_),
  offsetof(::sputnik::pb::MetaPostDefaultTypeInternal, cluster_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaPost, timestamp_millis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::MetaPost, post_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::MetaPost)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_MetaPost_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "meta_post.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017meta_post.proto\022\nsputnik.pb\032\023cluster_q"
      "uery.proto\"\230\001\n\010MetaPost\022&\n\004type\030\001 \001(\0162\030."
      "sputnik.pb.MetaPostType\022\017\n\007post_id\030\002 \001(\005"
      "\0221\n\rcluster_query\030\003 \001(\0132\030.sputnik.pb.Clu"
      "sterQueryH\000\022\030\n\020timestamp_millis\030\004 \001(\003B\006\n"
      "\004post*T\n\014MetaPostType\022\030\n\024COLOR_NAME_RGB_"
      "QUERY\020\000\022\027\n\023FEATURE_LIST_UPDATE\020\001\022\021\n\rCLUS"
      "TER_QUERY\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 299);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "meta_post.proto", &protobuf_RegisterTypes);
  ::protobuf_cluster_5fquery_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_meta_5fpost_2eproto
namespace sputnik {
namespace pb {
const ::google::protobuf::EnumDescriptor* MetaPostType_descriptor() {
  protobuf_meta_5fpost_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_meta_5fpost_2eproto::file_level_enum_descriptors[0];
}
bool MetaPostType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MetaPost::InitAsDefaultInstance() {
  ::sputnik::pb::_MetaPost_default_instance_.cluster_query_ = const_cast< ::sputnik::pb::ClusterQuery*>(
      ::sputnik::pb::ClusterQuery::internal_default_instance());
}
void MetaPost::set_allocated_cluster_query(::sputnik::pb::ClusterQuery* cluster_query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_post();
  if (cluster_query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cluster_query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster_query, submessage_arena);
    }
    set_has_cluster_query();
    post_.cluster_query_ = cluster_query;
  }
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.MetaPost.cluster_query)
}
void MetaPost::clear_cluster_query() {
  if (has_cluster_query()) {
    delete post_.cluster_query_;
    clear_has_post();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaPost::kTypeFieldNumber;
const int MetaPost::kPostIdFieldNumber;
const int MetaPost::kClusterQueryFieldNumber;
const int MetaPost::kTimestampMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaPost::MetaPost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meta_5fpost_2eproto::scc_info_MetaPost.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.MetaPost)
}
MetaPost::MetaPost(const MetaPost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_millis_) -
    reinterpret_cast<char*>(&type_)) + sizeof(timestamp_millis_));
  clear_has_post();
  switch (from.post_case()) {
    case kClusterQuery: {
      mutable_cluster_query()->::sputnik::pb::ClusterQuery::MergeFrom(from.cluster_query());
      break;
    }
    case POST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.MetaPost)
}

void MetaPost::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_millis_) -
      reinterpret_cast<char*>(&type_)) + sizeof(timestamp_millis_));
  clear_has_post();
}

MetaPost::~MetaPost() {
  // @@protoc_insertion_point(destructor:sputnik.pb.MetaPost)
  SharedDtor();
}

void MetaPost::SharedDtor() {
  if (has_post()) {
    clear_post();
  }
}

void MetaPost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MetaPost::descriptor() {
  ::protobuf_meta_5fpost_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fpost_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetaPost& MetaPost::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meta_5fpost_2eproto::scc_info_MetaPost.base);
  return *internal_default_instance();
}


void MetaPost::clear_post() {
// @@protoc_insertion_point(one_of_clear_start:sputnik.pb.MetaPost)
  switch (post_case()) {
    case kClusterQuery: {
      delete post_.cluster_query_;
      break;
    }
    case POST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POST_NOT_SET;
}


void MetaPost::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.MetaPost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_millis_) -
      reinterpret_cast<char*>(&type_)) + sizeof(timestamp_millis_));
  clear_post();
  _internal_metadata_.Clear();
}

bool MetaPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.MetaPost)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.MetaPostType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sputnik::pb::MetaPostType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 post_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &post_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.ClusterQuery cluster_query = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp_millis = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.MetaPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.MetaPost)
  return false;
#undef DO_
}

void MetaPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.MetaPost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.MetaPostType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 post_id = 2;
  if (this->post_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->post_id(), output);
  }

  // .sputnik.pb.ClusterQuery cluster_query = 3;
  if (has_cluster_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_cluster_query(), output);
  }

  // int64 timestamp_millis = 4;
  if (this->timestamp_millis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp_millis(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.MetaPost)
}

::google::protobuf::uint8* MetaPost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.MetaPost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.MetaPostType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 post_id = 2;
  if (this->post_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->post_id(), target);
  }

  // .sputnik.pb.ClusterQuery cluster_query = 3;
  if (has_cluster_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_cluster_query(), deterministic, target);
  }

  // int64 timestamp_millis = 4;
  if (this->timestamp_millis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp_millis(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.MetaPost)
  return target;
}

size_t MetaPost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.MetaPost)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.MetaPostType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 post_id = 2;
  if (this->post_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->post_id());
  }

  // int64 timestamp_millis = 4;
  if (this->timestamp_millis() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp_millis());
  }

  switch (post_case()) {
    // .sputnik.pb.ClusterQuery cluster_query = 3;
    case kClusterQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *post_.cluster_query_);
      break;
    }
    case POST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaPost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.MetaPost)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaPost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaPost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.MetaPost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.MetaPost)
    MergeFrom(*source);
  }
}

void MetaPost::MergeFrom(const MetaPost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.MetaPost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.post_id() != 0) {
    set_post_id(from.post_id());
  }
  if (from.timestamp_millis() != 0) {
    set_timestamp_millis(from.timestamp_millis());
  }
  switch (from.post_case()) {
    case kClusterQuery: {
      mutable_cluster_query()->::sputnik::pb::ClusterQuery::MergeFrom(from.cluster_query());
      break;
    }
    case POST_NOT_SET: {
      break;
    }
  }
}

void MetaPost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.MetaPost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaPost::CopyFrom(const MetaPost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.MetaPost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaPost::IsInitialized() const {
  return true;
}

void MetaPost::Swap(MetaPost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaPost::InternalSwap(MetaPost* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(post_id_, other->post_id_);
  swap(timestamp_millis_, other->timestamp_millis_);
  swap(post_, other->post_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MetaPost::GetMetadata() const {
  protobuf_meta_5fpost_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fpost_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::MetaPost* Arena::CreateMaybeMessage< ::sputnik::pb::MetaPost >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::MetaPost >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
