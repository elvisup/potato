// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face_attribute.proto

#ifndef PROTOBUF_INCLUDED_face_5fattribute_2eproto
#define PROTOBUF_INCLUDED_face_5fattribute_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_face_5fattribute_2eproto 

namespace protobuf_face_5fattribute_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_face_5fattribute_2eproto
namespace sputnik {
namespace pb {
class FaceAttribute;
class FaceAttributeDefaultTypeInternal;
extern FaceAttributeDefaultTypeInternal _FaceAttribute_default_instance_;
class FaceLandMark;
class FaceLandMarkDefaultTypeInternal;
extern FaceLandMarkDefaultTypeInternal _FaceLandMark_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::FaceAttribute* Arena::CreateMaybeMessage<::sputnik::pb::FaceAttribute>(Arena*);
template<> ::sputnik::pb::FaceLandMark* Arena::CreateMaybeMessage<::sputnik::pb::FaceLandMark>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

// ===================================================================

class FaceLandMark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.FaceLandMark) */ {
 public:
  FaceLandMark();
  virtual ~FaceLandMark();

  FaceLandMark(const FaceLandMark& from);

  inline FaceLandMark& operator=(const FaceLandMark& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaceLandMark(FaceLandMark&& from) noexcept
    : FaceLandMark() {
    *this = ::std::move(from);
  }

  inline FaceLandMark& operator=(FaceLandMark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceLandMark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceLandMark* internal_default_instance() {
    return reinterpret_cast<const FaceLandMark*>(
               &_FaceLandMark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FaceLandMark* other);
  friend void swap(FaceLandMark& a, FaceLandMark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceLandMark* New() const final {
    return CreateMaybeMessage<FaceLandMark>(NULL);
  }

  FaceLandMark* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FaceLandMark>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FaceLandMark& from);
  void MergeFrom(const FaceLandMark& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceLandMark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string landmark_description = 1;
  void clear_landmark_description();
  static const int kLandmarkDescriptionFieldNumber = 1;
  const ::std::string& landmark_description() const;
  void set_landmark_description(const ::std::string& value);
  #if LANG_CXX11
  void set_landmark_description(::std::string&& value);
  #endif
  void set_landmark_description(const char* value);
  void set_landmark_description(const char* value, size_t size);
  ::std::string* mutable_landmark_description();
  ::std::string* release_landmark_description();
  void set_allocated_landmark_description(::std::string* landmark_description);

  // int32 lefteye_pupil_x = 2;
  void clear_lefteye_pupil_x();
  static const int kLefteyePupilXFieldNumber = 2;
  ::google::protobuf::int32 lefteye_pupil_x() const;
  void set_lefteye_pupil_x(::google::protobuf::int32 value);

  // int32 lefteye_pupil_y = 3;
  void clear_lefteye_pupil_y();
  static const int kLefteyePupilYFieldNumber = 3;
  ::google::protobuf::int32 lefteye_pupil_y() const;
  void set_lefteye_pupil_y(::google::protobuf::int32 value);

  // int32 righteye_pupil_x = 4;
  void clear_righteye_pupil_x();
  static const int kRighteyePupilXFieldNumber = 4;
  ::google::protobuf::int32 righteye_pupil_x() const;
  void set_righteye_pupil_x(::google::protobuf::int32 value);

  // int32 righteye_pupil_y = 5;
  void clear_righteye_pupil_y();
  static const int kRighteyePupilYFieldNumber = 5;
  ::google::protobuf::int32 righteye_pupil_y() const;
  void set_righteye_pupil_y(::google::protobuf::int32 value);

  // int32 nose_tip_x = 6;
  void clear_nose_tip_x();
  static const int kNoseTipXFieldNumber = 6;
  ::google::protobuf::int32 nose_tip_x() const;
  void set_nose_tip_x(::google::protobuf::int32 value);

  // int32 nose_tip_y = 7;
  void clear_nose_tip_y();
  static const int kNoseTipYFieldNumber = 7;
  ::google::protobuf::int32 nose_tip_y() const;
  void set_nose_tip_y(::google::protobuf::int32 value);

  // int32 left_mouth_corner_x = 8;
  void clear_left_mouth_corner_x();
  static const int kLeftMouthCornerXFieldNumber = 8;
  ::google::protobuf::int32 left_mouth_corner_x() const;
  void set_left_mouth_corner_x(::google::protobuf::int32 value);

  // int32 left_mouth_corner_y = 9;
  void clear_left_mouth_corner_y();
  static const int kLeftMouthCornerYFieldNumber = 9;
  ::google::protobuf::int32 left_mouth_corner_y() const;
  void set_left_mouth_corner_y(::google::protobuf::int32 value);

  // int32 right_mouth_corner_x = 10;
  void clear_right_mouth_corner_x();
  static const int kRightMouthCornerXFieldNumber = 10;
  ::google::protobuf::int32 right_mouth_corner_x() const;
  void set_right_mouth_corner_x(::google::protobuf::int32 value);

  // int32 right_mouth_corner_y = 11;
  void clear_right_mouth_corner_y();
  static const int kRightMouthCornerYFieldNumber = 11;
  ::google::protobuf::int32 right_mouth_corner_y() const;
  void set_right_mouth_corner_y(::google::protobuf::int32 value);

  // int32 lefteye_right_corner_x = 12;
  void clear_lefteye_right_corner_x();
  static const int kLefteyeRightCornerXFieldNumber = 12;
  ::google::protobuf::int32 lefteye_right_corner_x() const;
  void set_lefteye_right_corner_x(::google::protobuf::int32 value);

  // int32 lefteye_right_corner_y = 13;
  void clear_lefteye_right_corner_y();
  static const int kLefteyeRightCornerYFieldNumber = 13;
  ::google::protobuf::int32 lefteye_right_corner_y() const;
  void set_lefteye_right_corner_y(::google::protobuf::int32 value);

  // int32 righteye_left_corner_x = 14;
  void clear_righteye_left_corner_x();
  static const int kRighteyeLeftCornerXFieldNumber = 14;
  ::google::protobuf::int32 righteye_left_corner_x() const;
  void set_righteye_left_corner_x(::google::protobuf::int32 value);

  // int32 righteye_left_corner_y = 15;
  void clear_righteye_left_corner_y();
  static const int kRighteyeLeftCornerYFieldNumber = 15;
  ::google::protobuf::int32 righteye_left_corner_y() const;
  void set_righteye_left_corner_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.FaceLandMark)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr landmark_description_;
  ::google::protobuf::int32 lefteye_pupil_x_;
  ::google::protobuf::int32 lefteye_pupil_y_;
  ::google::protobuf::int32 righteye_pupil_x_;
  ::google::protobuf::int32 righteye_pupil_y_;
  ::google::protobuf::int32 nose_tip_x_;
  ::google::protobuf::int32 nose_tip_y_;
  ::google::protobuf::int32 left_mouth_corner_x_;
  ::google::protobuf::int32 left_mouth_corner_y_;
  ::google::protobuf::int32 right_mouth_corner_x_;
  ::google::protobuf::int32 right_mouth_corner_y_;
  ::google::protobuf::int32 lefteye_right_corner_x_;
  ::google::protobuf::int32 lefteye_right_corner_y_;
  ::google::protobuf::int32 righteye_left_corner_x_;
  ::google::protobuf::int32 righteye_left_corner_y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_face_5fattribute_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FaceAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.FaceAttribute) */ {
 public:
  FaceAttribute();
  virtual ~FaceAttribute();

  FaceAttribute(const FaceAttribute& from);

  inline FaceAttribute& operator=(const FaceAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaceAttribute(FaceAttribute&& from) noexcept
    : FaceAttribute() {
    *this = ::std::move(from);
  }

  inline FaceAttribute& operator=(FaceAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceAttribute* internal_default_instance() {
    return reinterpret_cast<const FaceAttribute*>(
               &_FaceAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FaceAttribute* other);
  friend void swap(FaceAttribute& a, FaceAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceAttribute* New() const final {
    return CreateMaybeMessage<FaceAttribute>(NULL);
  }

  FaceAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FaceAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FaceAttribute& from);
  void MergeFrom(const FaceAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sputnik.pb.FaceLandMark landmark = 8;
  bool has_landmark() const;
  void clear_landmark();
  static const int kLandmarkFieldNumber = 8;
  private:
  const ::sputnik::pb::FaceLandMark& _internal_landmark() const;
  public:
  const ::sputnik::pb::FaceLandMark& landmark() const;
  ::sputnik::pb::FaceLandMark* release_landmark();
  ::sputnik::pb::FaceLandMark* mutable_landmark();
  void set_allocated_landmark(::sputnik::pb::FaceLandMark* landmark);

  // int32 blur = 1;
  void clear_blur();
  static const int kBlurFieldNumber = 1;
  ::google::protobuf::int32 blur() const;
  void set_blur(::google::protobuf::int32 value);

  // int32 age = 2;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // int32 gender = 3;
  void clear_gender();
  static const int kGenderFieldNumber = 3;
  ::google::protobuf::int32 gender() const;
  void set_gender(::google::protobuf::int32 value);

  // sint32 pitch = 4;
  void clear_pitch();
  static const int kPitchFieldNumber = 4;
  ::google::protobuf::int32 pitch() const;
  void set_pitch(::google::protobuf::int32 value);

  // sint32 yaw = 5;
  void clear_yaw();
  static const int kYawFieldNumber = 5;
  ::google::protobuf::int32 yaw() const;
  void set_yaw(::google::protobuf::int32 value);

  // sint32 roll = 6;
  void clear_roll();
  static const int kRollFieldNumber = 6;
  ::google::protobuf::int32 roll() const;
  void set_roll(::google::protobuf::int32 value);

  // int32 post_filter_score = 7;
  void clear_post_filter_score();
  static const int kPostFilterScoreFieldNumber = 7;
  ::google::protobuf::int32 post_filter_score() const;
  void set_post_filter_score(::google::protobuf::int32 value);

  // int32 minority = 9;
  void clear_minority();
  static const int kMinorityFieldNumber = 9;
  ::google::protobuf::int32 minority() const;
  void set_minority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.FaceAttribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sputnik::pb::FaceLandMark* landmark_;
  ::google::protobuf::int32 blur_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 pitch_;
  ::google::protobuf::int32 yaw_;
  ::google::protobuf::int32 roll_;
  ::google::protobuf::int32 post_filter_score_;
  ::google::protobuf::int32 minority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_face_5fattribute_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaceLandMark

// string landmark_description = 1;
inline void FaceLandMark::clear_landmark_description() {
  landmark_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FaceLandMark::landmark_description() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.landmark_description)
  return landmark_description_.GetNoArena();
}
inline void FaceLandMark::set_landmark_description(const ::std::string& value) {
  
  landmark_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.landmark_description)
}
#if LANG_CXX11
inline void FaceLandMark::set_landmark_description(::std::string&& value) {
  
  landmark_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.FaceLandMark.landmark_description)
}
#endif
inline void FaceLandMark::set_landmark_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  landmark_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.FaceLandMark.landmark_description)
}
inline void FaceLandMark::set_landmark_description(const char* value, size_t size) {
  
  landmark_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.FaceLandMark.landmark_description)
}
inline ::std::string* FaceLandMark::mutable_landmark_description() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.FaceLandMark.landmark_description)
  return landmark_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaceLandMark::release_landmark_description() {
  // @@protoc_insertion_point(field_release:sputnik.pb.FaceLandMark.landmark_description)
  
  return landmark_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaceLandMark::set_allocated_landmark_description(::std::string* landmark_description) {
  if (landmark_description != NULL) {
    
  } else {
    
  }
  landmark_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), landmark_description);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FaceLandMark.landmark_description)
}

// int32 lefteye_pupil_x = 2;
inline void FaceLandMark::clear_lefteye_pupil_x() {
  lefteye_pupil_x_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::lefteye_pupil_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.lefteye_pupil_x)
  return lefteye_pupil_x_;
}
inline void FaceLandMark::set_lefteye_pupil_x(::google::protobuf::int32 value) {
  
  lefteye_pupil_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.lefteye_pupil_x)
}

// int32 lefteye_pupil_y = 3;
inline void FaceLandMark::clear_lefteye_pupil_y() {
  lefteye_pupil_y_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::lefteye_pupil_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.lefteye_pupil_y)
  return lefteye_pupil_y_;
}
inline void FaceLandMark::set_lefteye_pupil_y(::google::protobuf::int32 value) {
  
  lefteye_pupil_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.lefteye_pupil_y)
}

// int32 righteye_pupil_x = 4;
inline void FaceLandMark::clear_righteye_pupil_x() {
  righteye_pupil_x_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::righteye_pupil_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.righteye_pupil_x)
  return righteye_pupil_x_;
}
inline void FaceLandMark::set_righteye_pupil_x(::google::protobuf::int32 value) {
  
  righteye_pupil_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.righteye_pupil_x)
}

// int32 righteye_pupil_y = 5;
inline void FaceLandMark::clear_righteye_pupil_y() {
  righteye_pupil_y_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::righteye_pupil_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.righteye_pupil_y)
  return righteye_pupil_y_;
}
inline void FaceLandMark::set_righteye_pupil_y(::google::protobuf::int32 value) {
  
  righteye_pupil_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.righteye_pupil_y)
}

// int32 nose_tip_x = 6;
inline void FaceLandMark::clear_nose_tip_x() {
  nose_tip_x_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::nose_tip_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.nose_tip_x)
  return nose_tip_x_;
}
inline void FaceLandMark::set_nose_tip_x(::google::protobuf::int32 value) {
  
  nose_tip_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.nose_tip_x)
}

// int32 nose_tip_y = 7;
inline void FaceLandMark::clear_nose_tip_y() {
  nose_tip_y_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::nose_tip_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.nose_tip_y)
  return nose_tip_y_;
}
inline void FaceLandMark::set_nose_tip_y(::google::protobuf::int32 value) {
  
  nose_tip_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.nose_tip_y)
}

// int32 left_mouth_corner_x = 8;
inline void FaceLandMark::clear_left_mouth_corner_x() {
  left_mouth_corner_x_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::left_mouth_corner_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.left_mouth_corner_x)
  return left_mouth_corner_x_;
}
inline void FaceLandMark::set_left_mouth_corner_x(::google::protobuf::int32 value) {
  
  left_mouth_corner_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.left_mouth_corner_x)
}

// int32 left_mouth_corner_y = 9;
inline void FaceLandMark::clear_left_mouth_corner_y() {
  left_mouth_corner_y_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::left_mouth_corner_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.left_mouth_corner_y)
  return left_mouth_corner_y_;
}
inline void FaceLandMark::set_left_mouth_corner_y(::google::protobuf::int32 value) {
  
  left_mouth_corner_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.left_mouth_corner_y)
}

// int32 right_mouth_corner_x = 10;
inline void FaceLandMark::clear_right_mouth_corner_x() {
  right_mouth_corner_x_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::right_mouth_corner_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.right_mouth_corner_x)
  return right_mouth_corner_x_;
}
inline void FaceLandMark::set_right_mouth_corner_x(::google::protobuf::int32 value) {
  
  right_mouth_corner_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.right_mouth_corner_x)
}

// int32 right_mouth_corner_y = 11;
inline void FaceLandMark::clear_right_mouth_corner_y() {
  right_mouth_corner_y_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::right_mouth_corner_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.right_mouth_corner_y)
  return right_mouth_corner_y_;
}
inline void FaceLandMark::set_right_mouth_corner_y(::google::protobuf::int32 value) {
  
  right_mouth_corner_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.right_mouth_corner_y)
}

// int32 lefteye_right_corner_x = 12;
inline void FaceLandMark::clear_lefteye_right_corner_x() {
  lefteye_right_corner_x_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::lefteye_right_corner_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.lefteye_right_corner_x)
  return lefteye_right_corner_x_;
}
inline void FaceLandMark::set_lefteye_right_corner_x(::google::protobuf::int32 value) {
  
  lefteye_right_corner_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.lefteye_right_corner_x)
}

// int32 lefteye_right_corner_y = 13;
inline void FaceLandMark::clear_lefteye_right_corner_y() {
  lefteye_right_corner_y_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::lefteye_right_corner_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.lefteye_right_corner_y)
  return lefteye_right_corner_y_;
}
inline void FaceLandMark::set_lefteye_right_corner_y(::google::protobuf::int32 value) {
  
  lefteye_right_corner_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.lefteye_right_corner_y)
}

// int32 righteye_left_corner_x = 14;
inline void FaceLandMark::clear_righteye_left_corner_x() {
  righteye_left_corner_x_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::righteye_left_corner_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.righteye_left_corner_x)
  return righteye_left_corner_x_;
}
inline void FaceLandMark::set_righteye_left_corner_x(::google::protobuf::int32 value) {
  
  righteye_left_corner_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.righteye_left_corner_x)
}

// int32 righteye_left_corner_y = 15;
inline void FaceLandMark::clear_righteye_left_corner_y() {
  righteye_left_corner_y_ = 0;
}
inline ::google::protobuf::int32 FaceLandMark::righteye_left_corner_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceLandMark.righteye_left_corner_y)
  return righteye_left_corner_y_;
}
inline void FaceLandMark::set_righteye_left_corner_y(::google::protobuf::int32 value) {
  
  righteye_left_corner_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceLandMark.righteye_left_corner_y)
}

// -------------------------------------------------------------------

// FaceAttribute

// int32 blur = 1;
inline void FaceAttribute::clear_blur() {
  blur_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::blur() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceAttribute.blur)
  return blur_;
}
inline void FaceAttribute::set_blur(::google::protobuf::int32 value) {
  
  blur_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceAttribute.blur)
}

// int32 age = 2;
inline void FaceAttribute::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::age() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceAttribute.age)
  return age_;
}
inline void FaceAttribute::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceAttribute.age)
}

// int32 gender = 3;
inline void FaceAttribute::clear_gender() {
  gender_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::gender() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceAttribute.gender)
  return gender_;
}
inline void FaceAttribute::set_gender(::google::protobuf::int32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceAttribute.gender)
}

// sint32 pitch = 4;
inline void FaceAttribute::clear_pitch() {
  pitch_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::pitch() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceAttribute.pitch)
  return pitch_;
}
inline void FaceAttribute::set_pitch(::google::protobuf::int32 value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceAttribute.pitch)
}

// sint32 yaw = 5;
inline void FaceAttribute::clear_yaw() {
  yaw_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::yaw() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceAttribute.yaw)
  return yaw_;
}
inline void FaceAttribute::set_yaw(::google::protobuf::int32 value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceAttribute.yaw)
}

// sint32 roll = 6;
inline void FaceAttribute::clear_roll() {
  roll_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::roll() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceAttribute.roll)
  return roll_;
}
inline void FaceAttribute::set_roll(::google::protobuf::int32 value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceAttribute.roll)
}

// int32 post_filter_score = 7;
inline void FaceAttribute::clear_post_filter_score() {
  post_filter_score_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::post_filter_score() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceAttribute.post_filter_score)
  return post_filter_score_;
}
inline void FaceAttribute::set_post_filter_score(::google::protobuf::int32 value) {
  
  post_filter_score_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceAttribute.post_filter_score)
}

// .sputnik.pb.FaceLandMark landmark = 8;
inline bool FaceAttribute::has_landmark() const {
  return this != internal_default_instance() && landmark_ != NULL;
}
inline void FaceAttribute::clear_landmark() {
  if (GetArenaNoVirtual() == NULL && landmark_ != NULL) {
    delete landmark_;
  }
  landmark_ = NULL;
}
inline const ::sputnik::pb::FaceLandMark& FaceAttribute::_internal_landmark() const {
  return *landmark_;
}
inline const ::sputnik::pb::FaceLandMark& FaceAttribute::landmark() const {
  const ::sputnik::pb::FaceLandMark* p = landmark_;
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceAttribute.landmark)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::FaceLandMark*>(
      &::sputnik::pb::_FaceLandMark_default_instance_);
}
inline ::sputnik::pb::FaceLandMark* FaceAttribute::release_landmark() {
  // @@protoc_insertion_point(field_release:sputnik.pb.FaceAttribute.landmark)
  
  ::sputnik::pb::FaceLandMark* temp = landmark_;
  landmark_ = NULL;
  return temp;
}
inline ::sputnik::pb::FaceLandMark* FaceAttribute::mutable_landmark() {
  
  if (landmark_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::FaceLandMark>(GetArenaNoVirtual());
    landmark_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.FaceAttribute.landmark)
  return landmark_;
}
inline void FaceAttribute::set_allocated_landmark(::sputnik::pb::FaceLandMark* landmark) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete landmark_;
  }
  if (landmark) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      landmark = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, landmark, submessage_arena);
    }
    
  } else {
    
  }
  landmark_ = landmark;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.FaceAttribute.landmark)
}

// int32 minority = 9;
inline void FaceAttribute::clear_minority() {
  minority_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::minority() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.FaceAttribute.minority)
  return minority_;
}
inline void FaceAttribute::set_minority(::google::protobuf::int32 value) {
  
  minority_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.FaceAttribute.minority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_face_5fattribute_2eproto
