// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_reply.proto

#ifndef PROTOBUF_INCLUDED_meta_5freply_2eproto
#define PROTOBUF_INCLUDED_meta_5freply_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cluster_reply.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_meta_5freply_2eproto 

namespace protobuf_meta_5freply_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_meta_5freply_2eproto
namespace sputnik {
namespace pb {
class MetaReply;
class MetaReplyDefaultTypeInternal;
extern MetaReplyDefaultTypeInternal _MetaReply_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::MetaReply* Arena::CreateMaybeMessage<::sputnik::pb::MetaReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

// ===================================================================

class MetaReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.MetaReply) */ {
 public:
  MetaReply();
  virtual ~MetaReply();

  MetaReply(const MetaReply& from);

  inline MetaReply& operator=(const MetaReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetaReply(MetaReply&& from) noexcept
    : MetaReply() {
    *this = ::std::move(from);
  }

  inline MetaReply& operator=(MetaReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaReply& default_instance();

  enum ReplyCase {
    kClusterReply = 2,
    REPLY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaReply* internal_default_instance() {
    return reinterpret_cast<const MetaReply*>(
               &_MetaReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MetaReply* other);
  friend void swap(MetaReply& a, MetaReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetaReply* New() const final {
    return CreateMaybeMessage<MetaReply>(NULL);
  }

  MetaReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MetaReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MetaReply& from);
  void MergeFrom(const MetaReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp_millis = 3;
  void clear_timestamp_millis();
  static const int kTimestampMillisFieldNumber = 3;
  ::google::protobuf::int64 timestamp_millis() const;
  void set_timestamp_millis(::google::protobuf::int64 value);

  // int32 post_id = 1;
  void clear_post_id();
  static const int kPostIdFieldNumber = 1;
  ::google::protobuf::int32 post_id() const;
  void set_post_id(::google::protobuf::int32 value);

  // .sputnik.pb.ClusterReply cluster_reply = 2;
  bool has_cluster_reply() const;
  void clear_cluster_reply();
  static const int kClusterReplyFieldNumber = 2;
  private:
  const ::sputnik::pb::ClusterReply& _internal_cluster_reply() const;
  public:
  const ::sputnik::pb::ClusterReply& cluster_reply() const;
  ::sputnik::pb::ClusterReply* release_cluster_reply();
  ::sputnik::pb::ClusterReply* mutable_cluster_reply();
  void set_allocated_cluster_reply(::sputnik::pb::ClusterReply* cluster_reply);

  void clear_reply();
  ReplyCase reply_case() const;
  // @@protoc_insertion_point(class_scope:sputnik.pb.MetaReply)
 private:
  void set_has_cluster_reply();

  inline bool has_reply() const;
  inline void clear_has_reply();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestamp_millis_;
  ::google::protobuf::int32 post_id_;
  union ReplyUnion {
    ReplyUnion() {}
    ::sputnik::pb::ClusterReply* cluster_reply_;
  } reply_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_meta_5freply_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetaReply

// int32 post_id = 1;
inline void MetaReply::clear_post_id() {
  post_id_ = 0;
}
inline ::google::protobuf::int32 MetaReply::post_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MetaReply.post_id)
  return post_id_;
}
inline void MetaReply::set_post_id(::google::protobuf::int32 value) {
  
  post_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.MetaReply.post_id)
}

// .sputnik.pb.ClusterReply cluster_reply = 2;
inline bool MetaReply::has_cluster_reply() const {
  return reply_case() == kClusterReply;
}
inline void MetaReply::set_has_cluster_reply() {
  _oneof_case_[0] = kClusterReply;
}
inline const ::sputnik::pb::ClusterReply& MetaReply::_internal_cluster_reply() const {
  return *reply_.cluster_reply_;
}
inline ::sputnik::pb::ClusterReply* MetaReply::release_cluster_reply() {
  // @@protoc_insertion_point(field_release:sputnik.pb.MetaReply.cluster_reply)
  if (has_cluster_reply()) {
    clear_has_reply();
      ::sputnik::pb::ClusterReply* temp = reply_.cluster_reply_;
    reply_.cluster_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sputnik::pb::ClusterReply& MetaReply::cluster_reply() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MetaReply.cluster_reply)
  return has_cluster_reply()
      ? *reply_.cluster_reply_
      : *reinterpret_cast< ::sputnik::pb::ClusterReply*>(&::sputnik::pb::_ClusterReply_default_instance_);
}
inline ::sputnik::pb::ClusterReply* MetaReply::mutable_cluster_reply() {
  if (!has_cluster_reply()) {
    clear_reply();
    set_has_cluster_reply();
    reply_.cluster_reply_ = CreateMaybeMessage< ::sputnik::pb::ClusterReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.MetaReply.cluster_reply)
  return reply_.cluster_reply_;
}

// int64 timestamp_millis = 3;
inline void MetaReply::clear_timestamp_millis() {
  timestamp_millis_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MetaReply::timestamp_millis() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.MetaReply.timestamp_millis)
  return timestamp_millis_;
}
inline void MetaReply::set_timestamp_millis(::google::protobuf::int64 value) {
  
  timestamp_millis_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.MetaReply.timestamp_millis)
}

inline bool MetaReply::has_reply() const {
  return reply_case() != REPLY_NOT_SET;
}
inline void MetaReply::clear_has_reply() {
  _oneof_case_[0] = REPLY_NOT_SET;
}
inline MetaReply::ReplyCase MetaReply::reply_case() const {
  return MetaReply::ReplyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_meta_5freply_2eproto
