// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_attribute.proto

#include "vehicle_attribute.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_box_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_box_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Box;
}  // namespace protobuf_box_2eproto
namespace protobuf_plate_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plate_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PlateAttribute;
}  // namespace protobuf_plate_5fattribute_2eproto
namespace protobuf_vehicle_5fattribute_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleAttribute_VehicleColorPredict;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleAttribute_VehicleTypePredict;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vehicle_5fattribute_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_VehicleAttribute_PlatePredict;
}  // namespace protobuf_vehicle_5fattribute_2eproto
namespace sputnik {
namespace pb {
class VehicleAttribute_PlatePredictDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleAttribute_PlatePredict>
      _instance;
} _VehicleAttribute_PlatePredict_default_instance_;
class VehicleAttribute_VehicleTypePredictDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleAttribute_VehicleTypePredict>
      _instance;
} _VehicleAttribute_VehicleTypePredict_default_instance_;
class VehicleAttribute_VehicleColorPredictDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleAttribute_VehicleColorPredict>
      _instance;
} _VehicleAttribute_VehicleColorPredict_default_instance_;
class VehicleAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleAttribute>
      _instance;
} _VehicleAttribute_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_vehicle_5fattribute_2eproto {
static void InitDefaultsVehicleAttribute_PlatePredict() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_VehicleAttribute_PlatePredict_default_instance_;
    new (ptr) ::sputnik::pb::VehicleAttribute_PlatePredict();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::VehicleAttribute_PlatePredict::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VehicleAttribute_PlatePredict =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVehicleAttribute_PlatePredict}, {
      &protobuf_box_2eproto::scc_info_Box.base,
      &protobuf_plate_5fattribute_2eproto::scc_info_PlateAttribute.base,}};

static void InitDefaultsVehicleAttribute_VehicleTypePredict() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_VehicleAttribute_VehicleTypePredict_default_instance_;
    new (ptr) ::sputnik::pb::VehicleAttribute_VehicleTypePredict();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::VehicleAttribute_VehicleTypePredict::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleAttribute_VehicleTypePredict =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleAttribute_VehicleTypePredict}, {}};

static void InitDefaultsVehicleAttribute_VehicleColorPredict() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_VehicleAttribute_VehicleColorPredict_default_instance_;
    new (ptr) ::sputnik::pb::VehicleAttribute_VehicleColorPredict();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::VehicleAttribute_VehicleColorPredict::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleAttribute_VehicleColorPredict =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleAttribute_VehicleColorPredict}, {}};

static void InitDefaultsVehicleAttribute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_VehicleAttribute_default_instance_;
    new (ptr) ::sputnik::pb::VehicleAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::VehicleAttribute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_VehicleAttribute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsVehicleAttribute}, {
      &protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute_PlatePredict.base,
      &protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute_VehicleTypePredict.base,
      &protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute_VehicleColorPredict.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleAttribute_PlatePredict.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleAttribute_VehicleTypePredict.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleAttribute_VehicleColorPredict.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleAttribute.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute_PlatePredict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute_PlatePredict, plate_relative_box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute_PlatePredict, plate_attribute_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute_VehicleTypePredict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute_VehicleTypePredict, vehicle_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute_VehicleTypePredict, type_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute_VehicleColorPredict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute_VehicleColorPredict, vehicle_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute_VehicleColorPredict, color_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, plate_predicts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, type_predicts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, color_predicts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, trademark_utf8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, trademark_utf8_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, vehicle_plateless_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, vehicle_moving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, move_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, move_direction_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, pointing_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, pointing_direction_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, vehicle_facing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::VehicleAttribute, vehicle_facing_confidence_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::VehicleAttribute_PlatePredict)},
  { 7, -1, sizeof(::sputnik::pb::VehicleAttribute_VehicleTypePredict)},
  { 14, -1, sizeof(::sputnik::pb::VehicleAttribute_VehicleColorPredict)},
  { 21, -1, sizeof(::sputnik::pb::VehicleAttribute)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_VehicleAttribute_PlatePredict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_VehicleAttribute_VehicleTypePredict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_VehicleAttribute_VehicleColorPredict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_VehicleAttribute_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "vehicle_attribute.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027vehicle_attribute.proto\022\nsputnik.pb\032\tb"
      "ox.proto\032\025plate_attribute.proto\032\017directi"
      "on.proto\"\202\007\n\020VehicleAttribute\022A\n\016plate_p"
      "redicts\030\002 \003(\0132).sputnik.pb.VehicleAttrib"
      "ute.PlatePredict\022F\n\rtype_predicts\030\003 \003(\0132"
      "/.sputnik.pb.VehicleAttribute.VehicleTyp"
      "ePredict\022H\n\016color_predicts\030\004 \003(\01320.sputn"
      "ik.pb.VehicleAttribute.VehicleColorPredi"
      "ct\022\026\n\016trademark_utf8\030\005 \001(\t\022!\n\031trademark_"
      "utf8_confidence\030\013 \001(\005\022\031\n\021vehicle_platele"
      "ss\030\006 \001(\005\022\026\n\016vehicle_moving\030\007 \001(\005\022-\n\016move"
      "_direction\030\010 \001(\0162\025.sputnik.pb.Direction\022"
      "!\n\031move_direction_confidence\030\n \001(\005\0221\n\022po"
      "inting_direction\030\016 \001(\0162\025.sputnik.pb.Dire"
      "ction\022%\n\035pointing_direction_confidence\030\017"
      " \001(\005\022*\n\016vehicle_facing\030\014 \001(\0162\022.sputnik.p"
      "b.Facing\022!\n\031vehicle_facing_confidence\030\r "
      "\001(\005\032p\n\014PlatePredict\022+\n\022plate_relative_bo"
      "x\030\001 \001(\0132\017.sputnik.pb.Box\0223\n\017plate_attrib"
      "ute\030\002 \001(\0132\032.sputnik.pb.PlateAttribute\032\\\n"
      "\022VehicleTypePredict\022-\n\014vehicle_type\030\001 \001("
      "\0162\027.sputnik.pb.VehicleType\022\027\n\017type_confi"
      "dence\030\002 \001(\005\032`\n\023VehicleColorPredict\022/\n\rve"
      "hicle_color\030\001 \001(\0162\030.sputnik.pb.VehicleCo"
      "lor\022\030\n\020color_confidence\030\002 \001(\005*Z\n\013Vehicle"
      "Type\022\007\n\003CAR\020\000\022\007\n\003SUV\020\001\022\014\n\010MICROBUS\020\002\022\013\n\007"
      "MINIBUS\020\003\022\007\n\003BUS\020\004\022\n\n\006PICKUP\020\005\022\t\n\005TRUCK\020"
      "\006*\221\001\n\014VehicleColor\022\010\n\004BLUE\020\000\022\n\n\006YELLOW\020\001"
      "\022\t\n\005BLACK\020\002\022\t\n\005WHITE\020\003\022\t\n\005GREEN\020\004\022\007\n\003RED"
      "\020\005\022\010\n\004GRAY\020\006\022\n\n\006PURPLE\020\007\022\010\n\004PINK\020\010\022\t\n\005BR"
      "OWN\020\t\022\010\n\004CYAN\020\n\022\014\n\010COLORFUL\020\013b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vehicle_attribute.proto", &protobuf_RegisterTypes);
  ::protobuf_box_2eproto::AddDescriptors();
  ::protobuf_plate_5fattribute_2eproto::AddDescriptors();
  ::protobuf_direction_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vehicle_5fattribute_2eproto
namespace sputnik {
namespace pb {
const ::google::protobuf::EnumDescriptor* VehicleType_descriptor() {
  protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fattribute_2eproto::file_level_enum_descriptors[0];
}
bool VehicleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VehicleColor_descriptor() {
  protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5fattribute_2eproto::file_level_enum_descriptors[1];
}
bool VehicleColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VehicleAttribute_PlatePredict::InitAsDefaultInstance() {
  ::sputnik::pb::_VehicleAttribute_PlatePredict_default_instance_._instance.get_mutable()->plate_relative_box_ = const_cast< ::sputnik::pb::Box*>(
      ::sputnik::pb::Box::internal_default_instance());
  ::sputnik::pb::_VehicleAttribute_PlatePredict_default_instance_._instance.get_mutable()->plate_attribute_ = const_cast< ::sputnik::pb::PlateAttribute*>(
      ::sputnik::pb::PlateAttribute::internal_default_instance());
}
void VehicleAttribute_PlatePredict::clear_plate_relative_box() {
  if (GetArenaNoVirtual() == NULL && plate_relative_box_ != NULL) {
    delete plate_relative_box_;
  }
  plate_relative_box_ = NULL;
}
void VehicleAttribute_PlatePredict::clear_plate_attribute() {
  if (GetArenaNoVirtual() == NULL && plate_attribute_ != NULL) {
    delete plate_attribute_;
  }
  plate_attribute_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleAttribute_PlatePredict::kPlateRelativeBoxFieldNumber;
const int VehicleAttribute_PlatePredict::kPlateAttributeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleAttribute_PlatePredict::VehicleAttribute_PlatePredict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute_PlatePredict.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.VehicleAttribute.PlatePredict)
}
VehicleAttribute_PlatePredict::VehicleAttribute_PlatePredict(const VehicleAttribute_PlatePredict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_plate_relative_box()) {
    plate_relative_box_ = new ::sputnik::pb::Box(*from.plate_relative_box_);
  } else {
    plate_relative_box_ = NULL;
  }
  if (from.has_plate_attribute()) {
    plate_attribute_ = new ::sputnik::pb::PlateAttribute(*from.plate_attribute_);
  } else {
    plate_attribute_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.VehicleAttribute.PlatePredict)
}

void VehicleAttribute_PlatePredict::SharedCtor() {
  ::memset(&plate_relative_box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plate_attribute_) -
      reinterpret_cast<char*>(&plate_relative_box_)) + sizeof(plate_attribute_));
}

VehicleAttribute_PlatePredict::~VehicleAttribute_PlatePredict() {
  // @@protoc_insertion_point(destructor:sputnik.pb.VehicleAttribute.PlatePredict)
  SharedDtor();
}

void VehicleAttribute_PlatePredict::SharedDtor() {
  if (this != internal_default_instance()) delete plate_relative_box_;
  if (this != internal_default_instance()) delete plate_attribute_;
}

void VehicleAttribute_PlatePredict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleAttribute_PlatePredict::descriptor() {
  ::protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleAttribute_PlatePredict& VehicleAttribute_PlatePredict::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute_PlatePredict.base);
  return *internal_default_instance();
}


void VehicleAttribute_PlatePredict::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.VehicleAttribute.PlatePredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && plate_relative_box_ != NULL) {
    delete plate_relative_box_;
  }
  plate_relative_box_ = NULL;
  if (GetArenaNoVirtual() == NULL && plate_attribute_ != NULL) {
    delete plate_attribute_;
  }
  plate_attribute_ = NULL;
  _internal_metadata_.Clear();
}

bool VehicleAttribute_PlatePredict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.VehicleAttribute.PlatePredict)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.Box plate_relative_box = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plate_relative_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.PlateAttribute plate_attribute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plate_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.VehicleAttribute.PlatePredict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.VehicleAttribute.PlatePredict)
  return false;
#undef DO_
}

void VehicleAttribute_PlatePredict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.VehicleAttribute.PlatePredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.Box plate_relative_box = 1;
  if (this->has_plate_relative_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_plate_relative_box(), output);
  }

  // .sputnik.pb.PlateAttribute plate_attribute = 2;
  if (this->has_plate_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_plate_attribute(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.VehicleAttribute.PlatePredict)
}

::google::protobuf::uint8* VehicleAttribute_PlatePredict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.VehicleAttribute.PlatePredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.Box plate_relative_box = 1;
  if (this->has_plate_relative_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_plate_relative_box(), deterministic, target);
  }

  // .sputnik.pb.PlateAttribute plate_attribute = 2;
  if (this->has_plate_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_plate_attribute(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.VehicleAttribute.PlatePredict)
  return target;
}

size_t VehicleAttribute_PlatePredict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.VehicleAttribute.PlatePredict)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.Box plate_relative_box = 1;
  if (this->has_plate_relative_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plate_relative_box_);
  }

  // .sputnik.pb.PlateAttribute plate_attribute = 2;
  if (this->has_plate_attribute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plate_attribute_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleAttribute_PlatePredict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.VehicleAttribute.PlatePredict)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAttribute_PlatePredict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleAttribute_PlatePredict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.VehicleAttribute.PlatePredict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.VehicleAttribute.PlatePredict)
    MergeFrom(*source);
  }
}

void VehicleAttribute_PlatePredict::MergeFrom(const VehicleAttribute_PlatePredict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.VehicleAttribute.PlatePredict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_plate_relative_box()) {
    mutable_plate_relative_box()->::sputnik::pb::Box::MergeFrom(from.plate_relative_box());
  }
  if (from.has_plate_attribute()) {
    mutable_plate_attribute()->::sputnik::pb::PlateAttribute::MergeFrom(from.plate_attribute());
  }
}

void VehicleAttribute_PlatePredict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.VehicleAttribute.PlatePredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAttribute_PlatePredict::CopyFrom(const VehicleAttribute_PlatePredict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.VehicleAttribute.PlatePredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAttribute_PlatePredict::IsInitialized() const {
  return true;
}

void VehicleAttribute_PlatePredict::Swap(VehicleAttribute_PlatePredict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleAttribute_PlatePredict::InternalSwap(VehicleAttribute_PlatePredict* other) {
  using std::swap;
  swap(plate_relative_box_, other->plate_relative_box_);
  swap(plate_attribute_, other->plate_attribute_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleAttribute_PlatePredict::GetMetadata() const {
  protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleAttribute_VehicleTypePredict::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleAttribute_VehicleTypePredict::kVehicleTypeFieldNumber;
const int VehicleAttribute_VehicleTypePredict::kTypeConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleAttribute_VehicleTypePredict::VehicleAttribute_VehicleTypePredict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute_VehicleTypePredict.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.VehicleAttribute.VehicleTypePredict)
}
VehicleAttribute_VehicleTypePredict::VehicleAttribute_VehicleTypePredict(const VehicleAttribute_VehicleTypePredict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_type_, &from.vehicle_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_confidence_) -
    reinterpret_cast<char*>(&vehicle_type_)) + sizeof(type_confidence_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.VehicleAttribute.VehicleTypePredict)
}

void VehicleAttribute_VehicleTypePredict::SharedCtor() {
  ::memset(&vehicle_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_confidence_) -
      reinterpret_cast<char*>(&vehicle_type_)) + sizeof(type_confidence_));
}

VehicleAttribute_VehicleTypePredict::~VehicleAttribute_VehicleTypePredict() {
  // @@protoc_insertion_point(destructor:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  SharedDtor();
}

void VehicleAttribute_VehicleTypePredict::SharedDtor() {
}

void VehicleAttribute_VehicleTypePredict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleAttribute_VehicleTypePredict::descriptor() {
  ::protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleAttribute_VehicleTypePredict& VehicleAttribute_VehicleTypePredict::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute_VehicleTypePredict.base);
  return *internal_default_instance();
}


void VehicleAttribute_VehicleTypePredict::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_confidence_) -
      reinterpret_cast<char*>(&vehicle_type_)) + sizeof(type_confidence_));
  _internal_metadata_.Clear();
}

bool VehicleAttribute_VehicleTypePredict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.VehicleType vehicle_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vehicle_type(static_cast< ::sputnik::pb::VehicleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  return false;
#undef DO_
}

void VehicleAttribute_VehicleTypePredict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.VehicleType vehicle_type = 1;
  if (this->vehicle_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vehicle_type(), output);
  }

  // int32 type_confidence = 2;
  if (this->type_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.VehicleAttribute.VehicleTypePredict)
}

::google::protobuf::uint8* VehicleAttribute_VehicleTypePredict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.VehicleType vehicle_type = 1;
  if (this->vehicle_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->vehicle_type(), target);
  }

  // int32 type_confidence = 2;
  if (this->type_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  return target;
}

size_t VehicleAttribute_VehicleTypePredict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.VehicleType vehicle_type = 1;
  if (this->vehicle_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicle_type());
  }

  // int32 type_confidence = 2;
  if (this->type_confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type_confidence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleAttribute_VehicleTypePredict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAttribute_VehicleTypePredict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleAttribute_VehicleTypePredict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.VehicleAttribute.VehicleTypePredict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.VehicleAttribute.VehicleTypePredict)
    MergeFrom(*source);
  }
}

void VehicleAttribute_VehicleTypePredict::MergeFrom(const VehicleAttribute_VehicleTypePredict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_type() != 0) {
    set_vehicle_type(from.vehicle_type());
  }
  if (from.type_confidence() != 0) {
    set_type_confidence(from.type_confidence());
  }
}

void VehicleAttribute_VehicleTypePredict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAttribute_VehicleTypePredict::CopyFrom(const VehicleAttribute_VehicleTypePredict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.VehicleAttribute.VehicleTypePredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAttribute_VehicleTypePredict::IsInitialized() const {
  return true;
}

void VehicleAttribute_VehicleTypePredict::Swap(VehicleAttribute_VehicleTypePredict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleAttribute_VehicleTypePredict::InternalSwap(VehicleAttribute_VehicleTypePredict* other) {
  using std::swap;
  swap(vehicle_type_, other->vehicle_type_);
  swap(type_confidence_, other->type_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleAttribute_VehicleTypePredict::GetMetadata() const {
  protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleAttribute_VehicleColorPredict::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleAttribute_VehicleColorPredict::kVehicleColorFieldNumber;
const int VehicleAttribute_VehicleColorPredict::kColorConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleAttribute_VehicleColorPredict::VehicleAttribute_VehicleColorPredict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute_VehicleColorPredict.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.VehicleAttribute.VehicleColorPredict)
}
VehicleAttribute_VehicleColorPredict::VehicleAttribute_VehicleColorPredict(const VehicleAttribute_VehicleColorPredict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_color_, &from.vehicle_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_confidence_) -
    reinterpret_cast<char*>(&vehicle_color_)) + sizeof(color_confidence_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.VehicleAttribute.VehicleColorPredict)
}

void VehicleAttribute_VehicleColorPredict::SharedCtor() {
  ::memset(&vehicle_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_confidence_) -
      reinterpret_cast<char*>(&vehicle_color_)) + sizeof(color_confidence_));
}

VehicleAttribute_VehicleColorPredict::~VehicleAttribute_VehicleColorPredict() {
  // @@protoc_insertion_point(destructor:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  SharedDtor();
}

void VehicleAttribute_VehicleColorPredict::SharedDtor() {
}

void VehicleAttribute_VehicleColorPredict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleAttribute_VehicleColorPredict::descriptor() {
  ::protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleAttribute_VehicleColorPredict& VehicleAttribute_VehicleColorPredict::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute_VehicleColorPredict.base);
  return *internal_default_instance();
}


void VehicleAttribute_VehicleColorPredict::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_confidence_) -
      reinterpret_cast<char*>(&vehicle_color_)) + sizeof(color_confidence_));
  _internal_metadata_.Clear();
}

bool VehicleAttribute_VehicleColorPredict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.VehicleColor vehicle_color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vehicle_color(static_cast< ::sputnik::pb::VehicleColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 color_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  return false;
#undef DO_
}

void VehicleAttribute_VehicleColorPredict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.VehicleColor vehicle_color = 1;
  if (this->vehicle_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vehicle_color(), output);
  }

  // int32 color_confidence = 2;
  if (this->color_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.VehicleAttribute.VehicleColorPredict)
}

::google::protobuf::uint8* VehicleAttribute_VehicleColorPredict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.VehicleColor vehicle_color = 1;
  if (this->vehicle_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->vehicle_color(), target);
  }

  // int32 color_confidence = 2;
  if (this->color_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color_confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  return target;
}

size_t VehicleAttribute_VehicleColorPredict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sputnik.pb.VehicleColor vehicle_color = 1;
  if (this->vehicle_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicle_color());
  }

  // int32 color_confidence = 2;
  if (this->color_confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color_confidence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleAttribute_VehicleColorPredict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAttribute_VehicleColorPredict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleAttribute_VehicleColorPredict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.VehicleAttribute.VehicleColorPredict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.VehicleAttribute.VehicleColorPredict)
    MergeFrom(*source);
  }
}

void VehicleAttribute_VehicleColorPredict::MergeFrom(const VehicleAttribute_VehicleColorPredict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_color() != 0) {
    set_vehicle_color(from.vehicle_color());
  }
  if (from.color_confidence() != 0) {
    set_color_confidence(from.color_confidence());
  }
}

void VehicleAttribute_VehicleColorPredict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAttribute_VehicleColorPredict::CopyFrom(const VehicleAttribute_VehicleColorPredict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.VehicleAttribute.VehicleColorPredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAttribute_VehicleColorPredict::IsInitialized() const {
  return true;
}

void VehicleAttribute_VehicleColorPredict::Swap(VehicleAttribute_VehicleColorPredict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleAttribute_VehicleColorPredict::InternalSwap(VehicleAttribute_VehicleColorPredict* other) {
  using std::swap;
  swap(vehicle_color_, other->vehicle_color_);
  swap(color_confidence_, other->color_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleAttribute_VehicleColorPredict::GetMetadata() const {
  protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleAttribute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleAttribute::kPlatePredictsFieldNumber;
const int VehicleAttribute::kTypePredictsFieldNumber;
const int VehicleAttribute::kColorPredictsFieldNumber;
const int VehicleAttribute::kTrademarkUtf8FieldNumber;
const int VehicleAttribute::kTrademarkUtf8ConfidenceFieldNumber;
const int VehicleAttribute::kVehiclePlatelessFieldNumber;
const int VehicleAttribute::kVehicleMovingFieldNumber;
const int VehicleAttribute::kMoveDirectionFieldNumber;
const int VehicleAttribute::kMoveDirectionConfidenceFieldNumber;
const int VehicleAttribute::kPointingDirectionFieldNumber;
const int VehicleAttribute::kPointingDirectionConfidenceFieldNumber;
const int VehicleAttribute::kVehicleFacingFieldNumber;
const int VehicleAttribute::kVehicleFacingConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleAttribute::VehicleAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.VehicleAttribute)
}
VehicleAttribute::VehicleAttribute(const VehicleAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      plate_predicts_(from.plate_predicts_),
      type_predicts_(from.type_predicts_),
      color_predicts_(from.color_predicts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trademark_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trademark_utf8().size() > 0) {
    trademark_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trademark_utf8_);
  }
  ::memcpy(&vehicle_plateless_, &from.vehicle_plateless_,
    static_cast<size_t>(reinterpret_cast<char*>(&pointing_direction_confidence_) -
    reinterpret_cast<char*>(&vehicle_plateless_)) + sizeof(pointing_direction_confidence_));
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.VehicleAttribute)
}

void VehicleAttribute::SharedCtor() {
  trademark_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vehicle_plateless_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pointing_direction_confidence_) -
      reinterpret_cast<char*>(&vehicle_plateless_)) + sizeof(pointing_direction_confidence_));
}

VehicleAttribute::~VehicleAttribute() {
  // @@protoc_insertion_point(destructor:sputnik.pb.VehicleAttribute)
  SharedDtor();
}

void VehicleAttribute::SharedDtor() {
  trademark_utf8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleAttribute::descriptor() {
  ::protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleAttribute& VehicleAttribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vehicle_5fattribute_2eproto::scc_info_VehicleAttribute.base);
  return *internal_default_instance();
}


void VehicleAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.VehicleAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plate_predicts_.Clear();
  type_predicts_.Clear();
  color_predicts_.Clear();
  trademark_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vehicle_plateless_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pointing_direction_confidence_) -
      reinterpret_cast<char*>(&vehicle_plateless_)) + sizeof(pointing_direction_confidence_));
  _internal_metadata_.Clear();
}

bool VehicleAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.VehicleAttribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sputnik.pb.VehicleAttribute.PlatePredict plate_predicts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_plate_predicts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.VehicleAttribute.VehicleTypePredict type_predicts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_type_predicts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sputnik.pb.VehicleAttribute.VehicleColorPredict color_predicts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_color_predicts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trademark_utf8 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trademark_utf8()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trademark_utf8().data(), static_cast<int>(this->trademark_utf8().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sputnik.pb.VehicleAttribute.trademark_utf8"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vehicle_plateless = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicle_plateless_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vehicle_moving = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicle_moving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.Direction move_direction = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_move_direction(static_cast< ::sputnik::pb::Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 move_direction_confidence = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_direction_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trademark_utf8_confidence = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trademark_utf8_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.Facing vehicle_facing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vehicle_facing(static_cast< ::sputnik::pb::Facing >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vehicle_facing_confidence = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicle_facing_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sputnik.pb.Direction pointing_direction = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pointing_direction(static_cast< ::sputnik::pb::Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pointing_direction_confidence = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointing_direction_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.VehicleAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.VehicleAttribute)
  return false;
#undef DO_
}

void VehicleAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.VehicleAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sputnik.pb.VehicleAttribute.PlatePredict plate_predicts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plate_predicts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->plate_predicts(static_cast<int>(i)),
      output);
  }

  // repeated .sputnik.pb.VehicleAttribute.VehicleTypePredict type_predicts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_predicts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->type_predicts(static_cast<int>(i)),
      output);
  }

  // repeated .sputnik.pb.VehicleAttribute.VehicleColorPredict color_predicts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->color_predicts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->color_predicts(static_cast<int>(i)),
      output);
  }

  // string trademark_utf8 = 5;
  if (this->trademark_utf8().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trademark_utf8().data(), static_cast<int>(this->trademark_utf8().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.VehicleAttribute.trademark_utf8");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trademark_utf8(), output);
  }

  // int32 vehicle_plateless = 6;
  if (this->vehicle_plateless() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vehicle_plateless(), output);
  }

  // int32 vehicle_moving = 7;
  if (this->vehicle_moving() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vehicle_moving(), output);
  }

  // .sputnik.pb.Direction move_direction = 8;
  if (this->move_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->move_direction(), output);
  }

  // int32 move_direction_confidence = 10;
  if (this->move_direction_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->move_direction_confidence(), output);
  }

  // int32 trademark_utf8_confidence = 11;
  if (this->trademark_utf8_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->trademark_utf8_confidence(), output);
  }

  // .sputnik.pb.Facing vehicle_facing = 12;
  if (this->vehicle_facing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->vehicle_facing(), output);
  }

  // int32 vehicle_facing_confidence = 13;
  if (this->vehicle_facing_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vehicle_facing_confidence(), output);
  }

  // .sputnik.pb.Direction pointing_direction = 14;
  if (this->pointing_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->pointing_direction(), output);
  }

  // int32 pointing_direction_confidence = 15;
  if (this->pointing_direction_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pointing_direction_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.VehicleAttribute)
}

::google::protobuf::uint8* VehicleAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.VehicleAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sputnik.pb.VehicleAttribute.PlatePredict plate_predicts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plate_predicts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->plate_predicts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sputnik.pb.VehicleAttribute.VehicleTypePredict type_predicts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_predicts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->type_predicts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sputnik.pb.VehicleAttribute.VehicleColorPredict color_predicts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->color_predicts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->color_predicts(static_cast<int>(i)), deterministic, target);
  }

  // string trademark_utf8 = 5;
  if (this->trademark_utf8().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trademark_utf8().data(), static_cast<int>(this->trademark_utf8().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sputnik.pb.VehicleAttribute.trademark_utf8");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trademark_utf8(), target);
  }

  // int32 vehicle_plateless = 6;
  if (this->vehicle_plateless() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vehicle_plateless(), target);
  }

  // int32 vehicle_moving = 7;
  if (this->vehicle_moving() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vehicle_moving(), target);
  }

  // .sputnik.pb.Direction move_direction = 8;
  if (this->move_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->move_direction(), target);
  }

  // int32 move_direction_confidence = 10;
  if (this->move_direction_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->move_direction_confidence(), target);
  }

  // int32 trademark_utf8_confidence = 11;
  if (this->trademark_utf8_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->trademark_utf8_confidence(), target);
  }

  // .sputnik.pb.Facing vehicle_facing = 12;
  if (this->vehicle_facing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->vehicle_facing(), target);
  }

  // int32 vehicle_facing_confidence = 13;
  if (this->vehicle_facing_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vehicle_facing_confidence(), target);
  }

  // .sputnik.pb.Direction pointing_direction = 14;
  if (this->pointing_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->pointing_direction(), target);
  }

  // int32 pointing_direction_confidence = 15;
  if (this->pointing_direction_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pointing_direction_confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.VehicleAttribute)
  return target;
}

size_t VehicleAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.VehicleAttribute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sputnik.pb.VehicleAttribute.PlatePredict plate_predicts = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->plate_predicts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->plate_predicts(static_cast<int>(i)));
    }
  }

  // repeated .sputnik.pb.VehicleAttribute.VehicleTypePredict type_predicts = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->type_predicts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->type_predicts(static_cast<int>(i)));
    }
  }

  // repeated .sputnik.pb.VehicleAttribute.VehicleColorPredict color_predicts = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->color_predicts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->color_predicts(static_cast<int>(i)));
    }
  }

  // string trademark_utf8 = 5;
  if (this->trademark_utf8().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trademark_utf8());
  }

  // int32 vehicle_plateless = 6;
  if (this->vehicle_plateless() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehicle_plateless());
  }

  // int32 vehicle_moving = 7;
  if (this->vehicle_moving() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehicle_moving());
  }

  // .sputnik.pb.Direction move_direction = 8;
  if (this->move_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->move_direction());
  }

  // int32 move_direction_confidence = 10;
  if (this->move_direction_confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_direction_confidence());
  }

  // int32 trademark_utf8_confidence = 11;
  if (this->trademark_utf8_confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trademark_utf8_confidence());
  }

  // .sputnik.pb.Facing vehicle_facing = 12;
  if (this->vehicle_facing() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicle_facing());
  }

  // int32 vehicle_facing_confidence = 13;
  if (this->vehicle_facing_confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehicle_facing_confidence());
  }

  // .sputnik.pb.Direction pointing_direction = 14;
  if (this->pointing_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pointing_direction());
  }

  // int32 pointing_direction_confidence = 15;
  if (this->pointing_direction_confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pointing_direction_confidence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.VehicleAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.VehicleAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.VehicleAttribute)
    MergeFrom(*source);
  }
}

void VehicleAttribute::MergeFrom(const VehicleAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.VehicleAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plate_predicts_.MergeFrom(from.plate_predicts_);
  type_predicts_.MergeFrom(from.type_predicts_);
  color_predicts_.MergeFrom(from.color_predicts_);
  if (from.trademark_utf8().size() > 0) {

    trademark_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trademark_utf8_);
  }
  if (from.vehicle_plateless() != 0) {
    set_vehicle_plateless(from.vehicle_plateless());
  }
  if (from.vehicle_moving() != 0) {
    set_vehicle_moving(from.vehicle_moving());
  }
  if (from.move_direction() != 0) {
    set_move_direction(from.move_direction());
  }
  if (from.move_direction_confidence() != 0) {
    set_move_direction_confidence(from.move_direction_confidence());
  }
  if (from.trademark_utf8_confidence() != 0) {
    set_trademark_utf8_confidence(from.trademark_utf8_confidence());
  }
  if (from.vehicle_facing() != 0) {
    set_vehicle_facing(from.vehicle_facing());
  }
  if (from.vehicle_facing_confidence() != 0) {
    set_vehicle_facing_confidence(from.vehicle_facing_confidence());
  }
  if (from.pointing_direction() != 0) {
    set_pointing_direction(from.pointing_direction());
  }
  if (from.pointing_direction_confidence() != 0) {
    set_pointing_direction_confidence(from.pointing_direction_confidence());
  }
}

void VehicleAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.VehicleAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAttribute::CopyFrom(const VehicleAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.VehicleAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAttribute::IsInitialized() const {
  return true;
}

void VehicleAttribute::Swap(VehicleAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleAttribute::InternalSwap(VehicleAttribute* other) {
  using std::swap;
  CastToBase(&plate_predicts_)->InternalSwap(CastToBase(&other->plate_predicts_));
  CastToBase(&type_predicts_)->InternalSwap(CastToBase(&other->type_predicts_));
  CastToBase(&color_predicts_)->InternalSwap(CastToBase(&other->color_predicts_));
  trademark_utf8_.Swap(&other->trademark_utf8_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vehicle_plateless_, other->vehicle_plateless_);
  swap(vehicle_moving_, other->vehicle_moving_);
  swap(move_direction_, other->move_direction_);
  swap(move_direction_confidence_, other->move_direction_confidence_);
  swap(trademark_utf8_confidence_, other->trademark_utf8_confidence_);
  swap(vehicle_facing_, other->vehicle_facing_);
  swap(vehicle_facing_confidence_, other->vehicle_facing_confidence_);
  swap(pointing_direction_, other->pointing_direction_);
  swap(pointing_direction_confidence_, other->pointing_direction_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleAttribute::GetMetadata() const {
  protobuf_vehicle_5fattribute_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5fattribute_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::VehicleAttribute_PlatePredict* Arena::CreateMaybeMessage< ::sputnik::pb::VehicleAttribute_PlatePredict >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::VehicleAttribute_PlatePredict >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::VehicleAttribute_VehicleTypePredict* Arena::CreateMaybeMessage< ::sputnik::pb::VehicleAttribute_VehicleTypePredict >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::VehicleAttribute_VehicleTypePredict >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::VehicleAttribute_VehicleColorPredict* Arena::CreateMaybeMessage< ::sputnik::pb::VehicleAttribute_VehicleColorPredict >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::VehicleAttribute_VehicleColorPredict >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::VehicleAttribute* Arena::CreateMaybeMessage< ::sputnik::pb::VehicleAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::VehicleAttribute >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
