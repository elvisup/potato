// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token_reply.proto

#include "token_reply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace sputnik {
namespace pb {
class TokenActivationReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TokenActivationReply>
      _instance;
} _TokenActivationReply_default_instance_;
class DeleteTokenReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteTokenReply>
      _instance;
} _DeleteTokenReply_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace protobuf_token_5freply_2eproto {
static void InitDefaultsTokenActivationReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_TokenActivationReply_default_instance_;
    new (ptr) ::sputnik::pb::TokenActivationReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::TokenActivationReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TokenActivationReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTokenActivationReply}, {}};

static void InitDefaultsDeleteTokenReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sputnik::pb::_DeleteTokenReply_default_instance_;
    new (ptr) ::sputnik::pb::DeleteTokenReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sputnik::pb::DeleteTokenReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteTokenReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteTokenReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TokenActivationReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteTokenReply.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::TokenActivationReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::TokenActivationReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::TokenActivationReply, active_tokens_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::DeleteTokenReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::DeleteTokenReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sputnik::pb::DeleteTokenReply, present_tokens_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sputnik::pb::TokenActivationReply)},
  { 7, -1, sizeof(::sputnik::pb::DeleteTokenReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_TokenActivationReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sputnik::pb::_DeleteTokenReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "token_reply.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021token_reply.proto\022\nsputnik.pb\"e\n\024Token"
      "ActivationReply\0226\n\006status\030\001 \001(\0162&.sputni"
      "k.pb.TokenActivationReplyStatus\022\025\n\ractiv"
      "e_tokens\030\002 \003(\005\"^\n\020DeleteTokenReply\0222\n\006st"
      "atus\030\001 \001(\0162\".sputnik.pb.DeleteTokenReply"
      "Status\022\026\n\016present_tokens\030\002 \003(\005*N\n\032TokenA"
      "ctivationReplyStatus\022\017\n\013TAR_UNKNOWN\020\000\022\017\n"
      "\013TAR_SUCCESS\020\001\022\016\n\nTAR_FAILED\020\002*J\n\026Delete"
      "TokenReplyStatus\022\017\n\013DFT_UNKNOWN\020\000\022\017\n\013DFT"
      "_SUCCESS\020\001\022\016\n\nDFT_FAILED\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "token_reply.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_token_5freply_2eproto
namespace sputnik {
namespace pb {
const ::google::protobuf::EnumDescriptor* TokenActivationReplyStatus_descriptor() {
  protobuf_token_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_token_5freply_2eproto::file_level_enum_descriptors[0];
}
bool TokenActivationReplyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeleteTokenReplyStatus_descriptor() {
  protobuf_token_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_token_5freply_2eproto::file_level_enum_descriptors[1];
}
bool DeleteTokenReplyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TokenActivationReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TokenActivationReply::kStatusFieldNumber;
const int TokenActivationReply::kActiveTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TokenActivationReply::TokenActivationReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_token_5freply_2eproto::scc_info_TokenActivationReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.TokenActivationReply)
}
TokenActivationReply::TokenActivationReply(const TokenActivationReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      active_tokens_(from.active_tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.TokenActivationReply)
}

void TokenActivationReply::SharedCtor() {
  status_ = 0;
}

TokenActivationReply::~TokenActivationReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.TokenActivationReply)
  SharedDtor();
}

void TokenActivationReply::SharedDtor() {
}

void TokenActivationReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TokenActivationReply::descriptor() {
  ::protobuf_token_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_token_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TokenActivationReply& TokenActivationReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_token_5freply_2eproto::scc_info_TokenActivationReply.base);
  return *internal_default_instance();
}


void TokenActivationReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.TokenActivationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_tokens_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

bool TokenActivationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.TokenActivationReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.TokenActivationReplyStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::sputnik::pb::TokenActivationReplyStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 active_tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_active_tokens())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_active_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.TokenActivationReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.TokenActivationReply)
  return false;
#undef DO_
}

void TokenActivationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.TokenActivationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.TokenActivationReplyStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated int32 active_tokens = 2;
  if (this->active_tokens_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _active_tokens_cached_byte_size_));
  }
  for (int i = 0, n = this->active_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->active_tokens(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.TokenActivationReply)
}

::google::protobuf::uint8* TokenActivationReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.TokenActivationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.TokenActivationReplyStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated int32 active_tokens = 2;
  if (this->active_tokens_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _active_tokens_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->active_tokens_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.TokenActivationReply)
  return target;
}

size_t TokenActivationReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.TokenActivationReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 active_tokens = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->active_tokens_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _active_tokens_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .sputnik.pb.TokenActivationReplyStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenActivationReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.TokenActivationReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenActivationReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TokenActivationReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.TokenActivationReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.TokenActivationReply)
    MergeFrom(*source);
  }
}

void TokenActivationReply::MergeFrom(const TokenActivationReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.TokenActivationReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_tokens_.MergeFrom(from.active_tokens_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TokenActivationReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.TokenActivationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenActivationReply::CopyFrom(const TokenActivationReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.TokenActivationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenActivationReply::IsInitialized() const {
  return true;
}

void TokenActivationReply::Swap(TokenActivationReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TokenActivationReply::InternalSwap(TokenActivationReply* other) {
  using std::swap;
  active_tokens_.InternalSwap(&other->active_tokens_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TokenActivationReply::GetMetadata() const {
  protobuf_token_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_token_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteTokenReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTokenReply::kStatusFieldNumber;
const int DeleteTokenReply::kPresentTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTokenReply::DeleteTokenReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_token_5freply_2eproto::scc_info_DeleteTokenReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sputnik.pb.DeleteTokenReply)
}
DeleteTokenReply::DeleteTokenReply(const DeleteTokenReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      present_tokens_(from.present_tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:sputnik.pb.DeleteTokenReply)
}

void DeleteTokenReply::SharedCtor() {
  status_ = 0;
}

DeleteTokenReply::~DeleteTokenReply() {
  // @@protoc_insertion_point(destructor:sputnik.pb.DeleteTokenReply)
  SharedDtor();
}

void DeleteTokenReply::SharedDtor() {
}

void DeleteTokenReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteTokenReply::descriptor() {
  ::protobuf_token_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_token_5freply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteTokenReply& DeleteTokenReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_token_5freply_2eproto::scc_info_DeleteTokenReply.base);
  return *internal_default_instance();
}


void DeleteTokenReply::Clear() {
// @@protoc_insertion_point(message_clear_start:sputnik.pb.DeleteTokenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  present_tokens_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

bool DeleteTokenReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sputnik.pb.DeleteTokenReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sputnik.pb.DeleteTokenReplyStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::sputnik::pb::DeleteTokenReplyStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 present_tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_present_tokens())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_present_tokens())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sputnik.pb.DeleteTokenReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sputnik.pb.DeleteTokenReply)
  return false;
#undef DO_
}

void DeleteTokenReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sputnik.pb.DeleteTokenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.DeleteTokenReplyStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated int32 present_tokens = 2;
  if (this->present_tokens_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _present_tokens_cached_byte_size_));
  }
  for (int i = 0, n = this->present_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->present_tokens(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sputnik.pb.DeleteTokenReply)
}

::google::protobuf::uint8* DeleteTokenReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sputnik.pb.DeleteTokenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sputnik.pb.DeleteTokenReplyStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated int32 present_tokens = 2;
  if (this->present_tokens_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _present_tokens_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->present_tokens_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sputnik.pb.DeleteTokenReply)
  return target;
}

size_t DeleteTokenReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sputnik.pb.DeleteTokenReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 present_tokens = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->present_tokens_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _present_tokens_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .sputnik.pb.DeleteTokenReplyStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTokenReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sputnik.pb.DeleteTokenReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTokenReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteTokenReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sputnik.pb.DeleteTokenReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sputnik.pb.DeleteTokenReply)
    MergeFrom(*source);
  }
}

void DeleteTokenReply::MergeFrom(const DeleteTokenReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sputnik.pb.DeleteTokenReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  present_tokens_.MergeFrom(from.present_tokens_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void DeleteTokenReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sputnik.pb.DeleteTokenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTokenReply::CopyFrom(const DeleteTokenReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sputnik.pb.DeleteTokenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTokenReply::IsInitialized() const {
  return true;
}

void DeleteTokenReply::Swap(DeleteTokenReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteTokenReply::InternalSwap(DeleteTokenReply* other) {
  using std::swap;
  present_tokens_.InternalSwap(&other->present_tokens_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteTokenReply::GetMetadata() const {
  protobuf_token_5freply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_token_5freply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::TokenActivationReply* Arena::CreateMaybeMessage< ::sputnik::pb::TokenActivationReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::TokenActivationReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sputnik::pb::DeleteTokenReply* Arena::CreateMaybeMessage< ::sputnik::pb::DeleteTokenReply >(Arena* arena) {
  return Arena::CreateInternal< ::sputnik::pb::DeleteTokenReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
