// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plate_attribute.proto

#ifndef PROTOBUF_INCLUDED_plate_5fattribute_2eproto
#define PROTOBUF_INCLUDED_plate_5fattribute_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_plate_5fattribute_2eproto 

namespace protobuf_plate_5fattribute_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_plate_5fattribute_2eproto
namespace sputnik {
namespace pb {
class PlateAttribute;
class PlateAttributeDefaultTypeInternal;
extern PlateAttributeDefaultTypeInternal _PlateAttribute_default_instance_;
class PlateAttribute_FourPoints;
class PlateAttribute_FourPointsDefaultTypeInternal;
extern PlateAttribute_FourPointsDefaultTypeInternal _PlateAttribute_FourPoints_default_instance_;
class PlateAttribute_PlateColorPredict;
class PlateAttribute_PlateColorPredictDefaultTypeInternal;
extern PlateAttribute_PlateColorPredictDefaultTypeInternal _PlateAttribute_PlateColorPredict_default_instance_;
class PlateAttribute_PlateTextPredict;
class PlateAttribute_PlateTextPredictDefaultTypeInternal;
extern PlateAttribute_PlateTextPredictDefaultTypeInternal _PlateAttribute_PlateTextPredict_default_instance_;
class PlateToken;
class PlateTokenDefaultTypeInternal;
extern PlateTokenDefaultTypeInternal _PlateToken_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::PlateAttribute* Arena::CreateMaybeMessage<::sputnik::pb::PlateAttribute>(Arena*);
template<> ::sputnik::pb::PlateAttribute_FourPoints* Arena::CreateMaybeMessage<::sputnik::pb::PlateAttribute_FourPoints>(Arena*);
template<> ::sputnik::pb::PlateAttribute_PlateColorPredict* Arena::CreateMaybeMessage<::sputnik::pb::PlateAttribute_PlateColorPredict>(Arena*);
template<> ::sputnik::pb::PlateAttribute_PlateTextPredict* Arena::CreateMaybeMessage<::sputnik::pb::PlateAttribute_PlateTextPredict>(Arena*);
template<> ::sputnik::pb::PlateToken* Arena::CreateMaybeMessage<::sputnik::pb::PlateToken>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

enum PlateColorType {
  PLATE_BLUE = 0,
  PLATE_YELLOW = 1,
  PLATE_BLACK = 2,
  PLATE_WHITE = 3,
  PLATE_GREEN = 4,
  PLATE_SMALL_NEW_ENERGY = 5,
  PLATE_LARGE_NEW_ENERGY = 6,
  PLATE_ABSENCE = 7,
  PlateColorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlateColorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlateColorType_IsValid(int value);
const PlateColorType PlateColorType_MIN = PLATE_BLUE;
const PlateColorType PlateColorType_MAX = PLATE_ABSENCE;
const int PlateColorType_ARRAYSIZE = PlateColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlateColorType_descriptor();
inline const ::std::string& PlateColorType_Name(PlateColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlateColorType_descriptor(), value);
}
inline bool PlateColorType_Parse(
    const ::std::string& name, PlateColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlateColorType>(
    PlateColorType_descriptor(), name, value);
}
// ===================================================================

class PlateToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.PlateToken) */ {
 public:
  PlateToken();
  virtual ~PlateToken();

  PlateToken(const PlateToken& from);

  inline PlateToken& operator=(const PlateToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlateToken(PlateToken&& from) noexcept
    : PlateToken() {
    *this = ::std::move(from);
  }

  inline PlateToken& operator=(PlateToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlateToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlateToken* internal_default_instance() {
    return reinterpret_cast<const PlateToken*>(
               &_PlateToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PlateToken* other);
  friend void swap(PlateToken& a, PlateToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlateToken* New() const final {
    return CreateMaybeMessage<PlateToken>(NULL);
  }

  PlateToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlateToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlateToken& from);
  void MergeFrom(const PlateToken& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlateToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string str_utf8 = 1;
  void clear_str_utf8();
  static const int kStrUtf8FieldNumber = 1;
  const ::std::string& str_utf8() const;
  void set_str_utf8(const ::std::string& value);
  #if LANG_CXX11
  void set_str_utf8(::std::string&& value);
  #endif
  void set_str_utf8(const char* value);
  void set_str_utf8(const char* value, size_t size);
  ::std::string* mutable_str_utf8();
  ::std::string* release_str_utf8();
  void set_allocated_str_utf8(::std::string* str_utf8);

  // int32 confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  ::google::protobuf::int32 confidence() const;
  void set_confidence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.PlateToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr str_utf8_;
  ::google::protobuf::int32 confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_plate_5fattribute_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlateAttribute_PlateTextPredict : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.PlateAttribute.PlateTextPredict) */ {
 public:
  PlateAttribute_PlateTextPredict();
  virtual ~PlateAttribute_PlateTextPredict();

  PlateAttribute_PlateTextPredict(const PlateAttribute_PlateTextPredict& from);

  inline PlateAttribute_PlateTextPredict& operator=(const PlateAttribute_PlateTextPredict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlateAttribute_PlateTextPredict(PlateAttribute_PlateTextPredict&& from) noexcept
    : PlateAttribute_PlateTextPredict() {
    *this = ::std::move(from);
  }

  inline PlateAttribute_PlateTextPredict& operator=(PlateAttribute_PlateTextPredict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlateAttribute_PlateTextPredict& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlateAttribute_PlateTextPredict* internal_default_instance() {
    return reinterpret_cast<const PlateAttribute_PlateTextPredict*>(
               &_PlateAttribute_PlateTextPredict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PlateAttribute_PlateTextPredict* other);
  friend void swap(PlateAttribute_PlateTextPredict& a, PlateAttribute_PlateTextPredict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlateAttribute_PlateTextPredict* New() const final {
    return CreateMaybeMessage<PlateAttribute_PlateTextPredict>(NULL);
  }

  PlateAttribute_PlateTextPredict* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlateAttribute_PlateTextPredict>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlateAttribute_PlateTextPredict& from);
  void MergeFrom(const PlateAttribute_PlateTextPredict& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlateAttribute_PlateTextPredict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sputnik.pb.PlateToken tokens = 3;
  int tokens_size() const;
  void clear_tokens();
  static const int kTokensFieldNumber = 3;
  ::sputnik::pb::PlateToken* mutable_tokens(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateToken >*
      mutable_tokens();
  const ::sputnik::pb::PlateToken& tokens(int index) const;
  ::sputnik::pb::PlateToken* add_tokens();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateToken >&
      tokens() const;

  // string str_utf8 = 1;
  void clear_str_utf8();
  static const int kStrUtf8FieldNumber = 1;
  const ::std::string& str_utf8() const;
  void set_str_utf8(const ::std::string& value);
  #if LANG_CXX11
  void set_str_utf8(::std::string&& value);
  #endif
  void set_str_utf8(const char* value);
  void set_str_utf8(const char* value, size_t size);
  ::std::string* mutable_str_utf8();
  ::std::string* release_str_utf8();
  void set_allocated_str_utf8(::std::string* str_utf8);

  // int32 confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  ::google::protobuf::int32 confidence() const;
  void set_confidence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.PlateAttribute.PlateTextPredict)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateToken > tokens_;
  ::google::protobuf::internal::ArenaStringPtr str_utf8_;
  ::google::protobuf::int32 confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_plate_5fattribute_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlateAttribute_PlateColorPredict : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.PlateAttribute.PlateColorPredict) */ {
 public:
  PlateAttribute_PlateColorPredict();
  virtual ~PlateAttribute_PlateColorPredict();

  PlateAttribute_PlateColorPredict(const PlateAttribute_PlateColorPredict& from);

  inline PlateAttribute_PlateColorPredict& operator=(const PlateAttribute_PlateColorPredict& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlateAttribute_PlateColorPredict(PlateAttribute_PlateColorPredict&& from) noexcept
    : PlateAttribute_PlateColorPredict() {
    *this = ::std::move(from);
  }

  inline PlateAttribute_PlateColorPredict& operator=(PlateAttribute_PlateColorPredict&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlateAttribute_PlateColorPredict& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlateAttribute_PlateColorPredict* internal_default_instance() {
    return reinterpret_cast<const PlateAttribute_PlateColorPredict*>(
               &_PlateAttribute_PlateColorPredict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlateAttribute_PlateColorPredict* other);
  friend void swap(PlateAttribute_PlateColorPredict& a, PlateAttribute_PlateColorPredict& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlateAttribute_PlateColorPredict* New() const final {
    return CreateMaybeMessage<PlateAttribute_PlateColorPredict>(NULL);
  }

  PlateAttribute_PlateColorPredict* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlateAttribute_PlateColorPredict>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlateAttribute_PlateColorPredict& from);
  void MergeFrom(const PlateAttribute_PlateColorPredict& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlateAttribute_PlateColorPredict* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sputnik.pb.PlateColorType color_type = 1;
  void clear_color_type();
  static const int kColorTypeFieldNumber = 1;
  ::sputnik::pb::PlateColorType color_type() const;
  void set_color_type(::sputnik::pb::PlateColorType value);

  // int32 color_confidence = 2;
  void clear_color_confidence();
  static const int kColorConfidenceFieldNumber = 2;
  ::google::protobuf::int32 color_confidence() const;
  void set_color_confidence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.PlateAttribute.PlateColorPredict)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int color_type_;
  ::google::protobuf::int32 color_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_plate_5fattribute_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlateAttribute_FourPoints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.PlateAttribute.FourPoints) */ {
 public:
  PlateAttribute_FourPoints();
  virtual ~PlateAttribute_FourPoints();

  PlateAttribute_FourPoints(const PlateAttribute_FourPoints& from);

  inline PlateAttribute_FourPoints& operator=(const PlateAttribute_FourPoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlateAttribute_FourPoints(PlateAttribute_FourPoints&& from) noexcept
    : PlateAttribute_FourPoints() {
    *this = ::std::move(from);
  }

  inline PlateAttribute_FourPoints& operator=(PlateAttribute_FourPoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlateAttribute_FourPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlateAttribute_FourPoints* internal_default_instance() {
    return reinterpret_cast<const PlateAttribute_FourPoints*>(
               &_PlateAttribute_FourPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PlateAttribute_FourPoints* other);
  friend void swap(PlateAttribute_FourPoints& a, PlateAttribute_FourPoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlateAttribute_FourPoints* New() const final {
    return CreateMaybeMessage<PlateAttribute_FourPoints>(NULL);
  }

  PlateAttribute_FourPoints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlateAttribute_FourPoints>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlateAttribute_FourPoints& from);
  void MergeFrom(const PlateAttribute_FourPoints& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlateAttribute_FourPoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 left_top_x = 1;
  void clear_left_top_x();
  static const int kLeftTopXFieldNumber = 1;
  ::google::protobuf::int32 left_top_x() const;
  void set_left_top_x(::google::protobuf::int32 value);

  // int32 left_top_y = 2;
  void clear_left_top_y();
  static const int kLeftTopYFieldNumber = 2;
  ::google::protobuf::int32 left_top_y() const;
  void set_left_top_y(::google::protobuf::int32 value);

  // int32 right_top_x = 3;
  void clear_right_top_x();
  static const int kRightTopXFieldNumber = 3;
  ::google::protobuf::int32 right_top_x() const;
  void set_right_top_x(::google::protobuf::int32 value);

  // int32 right_top_y = 4;
  void clear_right_top_y();
  static const int kRightTopYFieldNumber = 4;
  ::google::protobuf::int32 right_top_y() const;
  void set_right_top_y(::google::protobuf::int32 value);

  // int32 right_bottom_x = 5;
  void clear_right_bottom_x();
  static const int kRightBottomXFieldNumber = 5;
  ::google::protobuf::int32 right_bottom_x() const;
  void set_right_bottom_x(::google::protobuf::int32 value);

  // int32 right_bottom_y = 6;
  void clear_right_bottom_y();
  static const int kRightBottomYFieldNumber = 6;
  ::google::protobuf::int32 right_bottom_y() const;
  void set_right_bottom_y(::google::protobuf::int32 value);

  // int32 left_bottom_x = 7;
  void clear_left_bottom_x();
  static const int kLeftBottomXFieldNumber = 7;
  ::google::protobuf::int32 left_bottom_x() const;
  void set_left_bottom_x(::google::protobuf::int32 value);

  // int32 left_bottom_y = 8;
  void clear_left_bottom_y();
  static const int kLeftBottomYFieldNumber = 8;
  ::google::protobuf::int32 left_bottom_y() const;
  void set_left_bottom_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.PlateAttribute.FourPoints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 left_top_x_;
  ::google::protobuf::int32 left_top_y_;
  ::google::protobuf::int32 right_top_x_;
  ::google::protobuf::int32 right_top_y_;
  ::google::protobuf::int32 right_bottom_x_;
  ::google::protobuf::int32 right_bottom_y_;
  ::google::protobuf::int32 left_bottom_x_;
  ::google::protobuf::int32 left_bottom_y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_plate_5fattribute_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlateAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.PlateAttribute) */ {
 public:
  PlateAttribute();
  virtual ~PlateAttribute();

  PlateAttribute(const PlateAttribute& from);

  inline PlateAttribute& operator=(const PlateAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlateAttribute(PlateAttribute&& from) noexcept
    : PlateAttribute() {
    *this = ::std::move(from);
  }

  inline PlateAttribute& operator=(PlateAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlateAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlateAttribute* internal_default_instance() {
    return reinterpret_cast<const PlateAttribute*>(
               &_PlateAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlateAttribute* other);
  friend void swap(PlateAttribute& a, PlateAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlateAttribute* New() const final {
    return CreateMaybeMessage<PlateAttribute>(NULL);
  }

  PlateAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlateAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlateAttribute& from);
  void MergeFrom(const PlateAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlateAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlateAttribute_PlateTextPredict PlateTextPredict;
  typedef PlateAttribute_PlateColorPredict PlateColorPredict;
  typedef PlateAttribute_FourPoints FourPoints;

  // accessors -------------------------------------------------------

  // repeated .sputnik.pb.PlateAttribute.PlateColorPredict color_predicts = 5;
  int color_predicts_size() const;
  void clear_color_predicts();
  static const int kColorPredictsFieldNumber = 5;
  ::sputnik::pb::PlateAttribute_PlateColorPredict* mutable_color_predicts(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateColorPredict >*
      mutable_color_predicts();
  const ::sputnik::pb::PlateAttribute_PlateColorPredict& color_predicts(int index) const;
  ::sputnik::pb::PlateAttribute_PlateColorPredict* add_color_predicts();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateColorPredict >&
      color_predicts() const;

  // repeated .sputnik.pb.PlateAttribute.PlateTextPredict plate_numbers = 9;
  int plate_numbers_size() const;
  void clear_plate_numbers();
  static const int kPlateNumbersFieldNumber = 9;
  ::sputnik::pb::PlateAttribute_PlateTextPredict* mutable_plate_numbers(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateTextPredict >*
      mutable_plate_numbers();
  const ::sputnik::pb::PlateAttribute_PlateTextPredict& plate_numbers(int index) const;
  ::sputnik::pb::PlateAttribute_PlateTextPredict* add_plate_numbers();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateTextPredict >&
      plate_numbers() const;

  // .sputnik.pb.PlateAttribute.FourPoints fout_points = 6;
  bool has_fout_points() const;
  void clear_fout_points();
  static const int kFoutPointsFieldNumber = 6;
  private:
  const ::sputnik::pb::PlateAttribute_FourPoints& _internal_fout_points() const;
  public:
  const ::sputnik::pb::PlateAttribute_FourPoints& fout_points() const;
  ::sputnik::pb::PlateAttribute_FourPoints* release_fout_points();
  ::sputnik::pb::PlateAttribute_FourPoints* mutable_fout_points();
  void set_allocated_fout_points(::sputnik::pb::PlateAttribute_FourPoints* fout_points);

  // sint32 roll = 1;
  void clear_roll();
  static const int kRollFieldNumber = 1;
  ::google::protobuf::int32 roll() const;
  void set_roll(::google::protobuf::int32 value);

  // int32 quality = 3;
  void clear_quality();
  static const int kQualityFieldNumber = 3;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // int32 plate_style = 7;
  void clear_plate_style();
  static const int kPlateStyleFieldNumber = 7;
  ::google::protobuf::int32 plate_style() const;
  void set_plate_style(::google::protobuf::int32 value);

  // int32 adversary_occlusion = 8;
  void clear_adversary_occlusion();
  static const int kAdversaryOcclusionFieldNumber = 8;
  ::google::protobuf::int32 adversary_occlusion() const;
  void set_adversary_occlusion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.PlateAttribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateColorPredict > color_predicts_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateTextPredict > plate_numbers_;
  ::sputnik::pb::PlateAttribute_FourPoints* fout_points_;
  ::google::protobuf::int32 roll_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 plate_style_;
  ::google::protobuf::int32 adversary_occlusion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_plate_5fattribute_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlateToken

// string str_utf8 = 1;
inline void PlateToken::clear_str_utf8() {
  str_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlateToken::str_utf8() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateToken.str_utf8)
  return str_utf8_.GetNoArena();
}
inline void PlateToken::set_str_utf8(const ::std::string& value) {
  
  str_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateToken.str_utf8)
}
#if LANG_CXX11
inline void PlateToken::set_str_utf8(::std::string&& value) {
  
  str_utf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.PlateToken.str_utf8)
}
#endif
inline void PlateToken::set_str_utf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  str_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.PlateToken.str_utf8)
}
inline void PlateToken::set_str_utf8(const char* value, size_t size) {
  
  str_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.PlateToken.str_utf8)
}
inline ::std::string* PlateToken::mutable_str_utf8() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.PlateToken.str_utf8)
  return str_utf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlateToken::release_str_utf8() {
  // @@protoc_insertion_point(field_release:sputnik.pb.PlateToken.str_utf8)
  
  return str_utf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlateToken::set_allocated_str_utf8(::std::string* str_utf8) {
  if (str_utf8 != NULL) {
    
  } else {
    
  }
  str_utf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_utf8);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.PlateToken.str_utf8)
}

// int32 confidence = 2;
inline void PlateToken::clear_confidence() {
  confidence_ = 0;
}
inline ::google::protobuf::int32 PlateToken::confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateToken.confidence)
  return confidence_;
}
inline void PlateToken::set_confidence(::google::protobuf::int32 value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateToken.confidence)
}

// -------------------------------------------------------------------

// PlateAttribute_PlateTextPredict

// string str_utf8 = 1;
inline void PlateAttribute_PlateTextPredict::clear_str_utf8() {
  str_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlateAttribute_PlateTextPredict::str_utf8() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8)
  return str_utf8_.GetNoArena();
}
inline void PlateAttribute_PlateTextPredict::set_str_utf8(const ::std::string& value) {
  
  str_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8)
}
#if LANG_CXX11
inline void PlateAttribute_PlateTextPredict::set_str_utf8(::std::string&& value) {
  
  str_utf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8)
}
#endif
inline void PlateAttribute_PlateTextPredict::set_str_utf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  str_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8)
}
inline void PlateAttribute_PlateTextPredict::set_str_utf8(const char* value, size_t size) {
  
  str_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8)
}
inline ::std::string* PlateAttribute_PlateTextPredict::mutable_str_utf8() {
  
  // @@protoc_insertion_point(field_mutable:sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8)
  return str_utf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlateAttribute_PlateTextPredict::release_str_utf8() {
  // @@protoc_insertion_point(field_release:sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8)
  
  return str_utf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlateAttribute_PlateTextPredict::set_allocated_str_utf8(::std::string* str_utf8) {
  if (str_utf8 != NULL) {
    
  } else {
    
  }
  str_utf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_utf8);
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.PlateAttribute.PlateTextPredict.str_utf8)
}

// int32 confidence = 2;
inline void PlateAttribute_PlateTextPredict::clear_confidence() {
  confidence_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_PlateTextPredict::confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.PlateTextPredict.confidence)
  return confidence_;
}
inline void PlateAttribute_PlateTextPredict::set_confidence(::google::protobuf::int32 value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.PlateTextPredict.confidence)
}

// repeated .sputnik.pb.PlateToken tokens = 3;
inline int PlateAttribute_PlateTextPredict::tokens_size() const {
  return tokens_.size();
}
inline void PlateAttribute_PlateTextPredict::clear_tokens() {
  tokens_.Clear();
}
inline ::sputnik::pb::PlateToken* PlateAttribute_PlateTextPredict::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.PlateAttribute.PlateTextPredict.tokens)
  return tokens_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateToken >*
PlateAttribute_PlateTextPredict::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.PlateAttribute.PlateTextPredict.tokens)
  return &tokens_;
}
inline const ::sputnik::pb::PlateToken& PlateAttribute_PlateTextPredict::tokens(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.PlateTextPredict.tokens)
  return tokens_.Get(index);
}
inline ::sputnik::pb::PlateToken* PlateAttribute_PlateTextPredict::add_tokens() {
  // @@protoc_insertion_point(field_add:sputnik.pb.PlateAttribute.PlateTextPredict.tokens)
  return tokens_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateToken >&
PlateAttribute_PlateTextPredict::tokens() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.PlateAttribute.PlateTextPredict.tokens)
  return tokens_;
}

// -------------------------------------------------------------------

// PlateAttribute_PlateColorPredict

// .sputnik.pb.PlateColorType color_type = 1;
inline void PlateAttribute_PlateColorPredict::clear_color_type() {
  color_type_ = 0;
}
inline ::sputnik::pb::PlateColorType PlateAttribute_PlateColorPredict::color_type() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.PlateColorPredict.color_type)
  return static_cast< ::sputnik::pb::PlateColorType >(color_type_);
}
inline void PlateAttribute_PlateColorPredict::set_color_type(::sputnik::pb::PlateColorType value) {
  
  color_type_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.PlateColorPredict.color_type)
}

// int32 color_confidence = 2;
inline void PlateAttribute_PlateColorPredict::clear_color_confidence() {
  color_confidence_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_PlateColorPredict::color_confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.PlateColorPredict.color_confidence)
  return color_confidence_;
}
inline void PlateAttribute_PlateColorPredict::set_color_confidence(::google::protobuf::int32 value) {
  
  color_confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.PlateColorPredict.color_confidence)
}

// -------------------------------------------------------------------

// PlateAttribute_FourPoints

// int32 left_top_x = 1;
inline void PlateAttribute_FourPoints::clear_left_top_x() {
  left_top_x_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_FourPoints::left_top_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.FourPoints.left_top_x)
  return left_top_x_;
}
inline void PlateAttribute_FourPoints::set_left_top_x(::google::protobuf::int32 value) {
  
  left_top_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.FourPoints.left_top_x)
}

// int32 left_top_y = 2;
inline void PlateAttribute_FourPoints::clear_left_top_y() {
  left_top_y_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_FourPoints::left_top_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.FourPoints.left_top_y)
  return left_top_y_;
}
inline void PlateAttribute_FourPoints::set_left_top_y(::google::protobuf::int32 value) {
  
  left_top_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.FourPoints.left_top_y)
}

// int32 right_top_x = 3;
inline void PlateAttribute_FourPoints::clear_right_top_x() {
  right_top_x_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_FourPoints::right_top_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.FourPoints.right_top_x)
  return right_top_x_;
}
inline void PlateAttribute_FourPoints::set_right_top_x(::google::protobuf::int32 value) {
  
  right_top_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.FourPoints.right_top_x)
}

// int32 right_top_y = 4;
inline void PlateAttribute_FourPoints::clear_right_top_y() {
  right_top_y_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_FourPoints::right_top_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.FourPoints.right_top_y)
  return right_top_y_;
}
inline void PlateAttribute_FourPoints::set_right_top_y(::google::protobuf::int32 value) {
  
  right_top_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.FourPoints.right_top_y)
}

// int32 right_bottom_x = 5;
inline void PlateAttribute_FourPoints::clear_right_bottom_x() {
  right_bottom_x_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_FourPoints::right_bottom_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.FourPoints.right_bottom_x)
  return right_bottom_x_;
}
inline void PlateAttribute_FourPoints::set_right_bottom_x(::google::protobuf::int32 value) {
  
  right_bottom_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.FourPoints.right_bottom_x)
}

// int32 right_bottom_y = 6;
inline void PlateAttribute_FourPoints::clear_right_bottom_y() {
  right_bottom_y_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_FourPoints::right_bottom_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.FourPoints.right_bottom_y)
  return right_bottom_y_;
}
inline void PlateAttribute_FourPoints::set_right_bottom_y(::google::protobuf::int32 value) {
  
  right_bottom_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.FourPoints.right_bottom_y)
}

// int32 left_bottom_x = 7;
inline void PlateAttribute_FourPoints::clear_left_bottom_x() {
  left_bottom_x_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_FourPoints::left_bottom_x() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.FourPoints.left_bottom_x)
  return left_bottom_x_;
}
inline void PlateAttribute_FourPoints::set_left_bottom_x(::google::protobuf::int32 value) {
  
  left_bottom_x_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.FourPoints.left_bottom_x)
}

// int32 left_bottom_y = 8;
inline void PlateAttribute_FourPoints::clear_left_bottom_y() {
  left_bottom_y_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute_FourPoints::left_bottom_y() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.FourPoints.left_bottom_y)
  return left_bottom_y_;
}
inline void PlateAttribute_FourPoints::set_left_bottom_y(::google::protobuf::int32 value) {
  
  left_bottom_y_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.FourPoints.left_bottom_y)
}

// -------------------------------------------------------------------

// PlateAttribute

// sint32 roll = 1;
inline void PlateAttribute::clear_roll() {
  roll_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute::roll() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.roll)
  return roll_;
}
inline void PlateAttribute::set_roll(::google::protobuf::int32 value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.roll)
}

// repeated .sputnik.pb.PlateAttribute.PlateTextPredict plate_numbers = 9;
inline int PlateAttribute::plate_numbers_size() const {
  return plate_numbers_.size();
}
inline void PlateAttribute::clear_plate_numbers() {
  plate_numbers_.Clear();
}
inline ::sputnik::pb::PlateAttribute_PlateTextPredict* PlateAttribute::mutable_plate_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.PlateAttribute.plate_numbers)
  return plate_numbers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateTextPredict >*
PlateAttribute::mutable_plate_numbers() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.PlateAttribute.plate_numbers)
  return &plate_numbers_;
}
inline const ::sputnik::pb::PlateAttribute_PlateTextPredict& PlateAttribute::plate_numbers(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.plate_numbers)
  return plate_numbers_.Get(index);
}
inline ::sputnik::pb::PlateAttribute_PlateTextPredict* PlateAttribute::add_plate_numbers() {
  // @@protoc_insertion_point(field_add:sputnik.pb.PlateAttribute.plate_numbers)
  return plate_numbers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateTextPredict >&
PlateAttribute::plate_numbers() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.PlateAttribute.plate_numbers)
  return plate_numbers_;
}

// int32 quality = 3;
inline void PlateAttribute::clear_quality() {
  quality_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute::quality() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.quality)
  return quality_;
}
inline void PlateAttribute::set_quality(::google::protobuf::int32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.quality)
}

// repeated .sputnik.pb.PlateAttribute.PlateColorPredict color_predicts = 5;
inline int PlateAttribute::color_predicts_size() const {
  return color_predicts_.size();
}
inline void PlateAttribute::clear_color_predicts() {
  color_predicts_.Clear();
}
inline ::sputnik::pb::PlateAttribute_PlateColorPredict* PlateAttribute::mutable_color_predicts(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.PlateAttribute.color_predicts)
  return color_predicts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateColorPredict >*
PlateAttribute::mutable_color_predicts() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.PlateAttribute.color_predicts)
  return &color_predicts_;
}
inline const ::sputnik::pb::PlateAttribute_PlateColorPredict& PlateAttribute::color_predicts(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.color_predicts)
  return color_predicts_.Get(index);
}
inline ::sputnik::pb::PlateAttribute_PlateColorPredict* PlateAttribute::add_color_predicts() {
  // @@protoc_insertion_point(field_add:sputnik.pb.PlateAttribute.color_predicts)
  return color_predicts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::PlateAttribute_PlateColorPredict >&
PlateAttribute::color_predicts() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.PlateAttribute.color_predicts)
  return color_predicts_;
}

// .sputnik.pb.PlateAttribute.FourPoints fout_points = 6;
inline bool PlateAttribute::has_fout_points() const {
  return this != internal_default_instance() && fout_points_ != NULL;
}
inline void PlateAttribute::clear_fout_points() {
  if (GetArenaNoVirtual() == NULL && fout_points_ != NULL) {
    delete fout_points_;
  }
  fout_points_ = NULL;
}
inline const ::sputnik::pb::PlateAttribute_FourPoints& PlateAttribute::_internal_fout_points() const {
  return *fout_points_;
}
inline const ::sputnik::pb::PlateAttribute_FourPoints& PlateAttribute::fout_points() const {
  const ::sputnik::pb::PlateAttribute_FourPoints* p = fout_points_;
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.fout_points)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::PlateAttribute_FourPoints*>(
      &::sputnik::pb::_PlateAttribute_FourPoints_default_instance_);
}
inline ::sputnik::pb::PlateAttribute_FourPoints* PlateAttribute::release_fout_points() {
  // @@protoc_insertion_point(field_release:sputnik.pb.PlateAttribute.fout_points)
  
  ::sputnik::pb::PlateAttribute_FourPoints* temp = fout_points_;
  fout_points_ = NULL;
  return temp;
}
inline ::sputnik::pb::PlateAttribute_FourPoints* PlateAttribute::mutable_fout_points() {
  
  if (fout_points_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::PlateAttribute_FourPoints>(GetArenaNoVirtual());
    fout_points_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.PlateAttribute.fout_points)
  return fout_points_;
}
inline void PlateAttribute::set_allocated_fout_points(::sputnik::pb::PlateAttribute_FourPoints* fout_points) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fout_points_;
  }
  if (fout_points) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fout_points = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fout_points, submessage_arena);
    }
    
  } else {
    
  }
  fout_points_ = fout_points;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.PlateAttribute.fout_points)
}

// int32 plate_style = 7;
inline void PlateAttribute::clear_plate_style() {
  plate_style_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute::plate_style() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.plate_style)
  return plate_style_;
}
inline void PlateAttribute::set_plate_style(::google::protobuf::int32 value) {
  
  plate_style_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.plate_style)
}

// int32 adversary_occlusion = 8;
inline void PlateAttribute::clear_adversary_occlusion() {
  adversary_occlusion_ = 0;
}
inline ::google::protobuf::int32 PlateAttribute::adversary_occlusion() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.PlateAttribute.adversary_occlusion)
  return adversary_occlusion_;
}
inline void PlateAttribute::set_adversary_occlusion(::google::protobuf::int32 value) {
  
  adversary_occlusion_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.PlateAttribute.adversary_occlusion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sputnik::pb::PlateColorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sputnik::pb::PlateColorType>() {
  return ::sputnik::pb::PlateColorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_plate_5fattribute_2eproto
