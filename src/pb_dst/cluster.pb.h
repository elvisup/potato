// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster.proto

#ifndef PROTOBUF_INCLUDED_cluster_2eproto
#define PROTOBUF_INCLUDED_cluster_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "face_attribute.pb.h"
#include "plate_attribute.pb.h"
#include "vehicle_attribute.pb.h"
#include "human_attribute.pb.h"
#include "trace_point.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cluster_2eproto 

namespace protobuf_cluster_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cluster_2eproto
namespace sputnik {
namespace pb {
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::Cluster* Arena::CreateMaybeMessage<::sputnik::pb::Cluster>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

// ===================================================================

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Cluster* other);
  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const final {
    return CreateMaybeMessage<Cluster>(NULL);
  }

  Cluster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cluster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 face_track_ids = 2;
  int face_track_ids_size() const;
  void clear_face_track_ids();
  static const int kFaceTrackIdsFieldNumber = 2;
  ::google::protobuf::int32 face_track_ids(int index) const;
  void set_face_track_ids(int index, ::google::protobuf::int32 value);
  void add_face_track_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      face_track_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_face_track_ids();

  // repeated int32 human_track_ids = 3;
  int human_track_ids_size() const;
  void clear_human_track_ids();
  static const int kHumanTrackIdsFieldNumber = 3;
  ::google::protobuf::int32 human_track_ids(int index) const;
  void set_human_track_ids(int index, ::google::protobuf::int32 value);
  void add_human_track_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      human_track_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_human_track_ids();

  // repeated int32 vehicle_track_ids = 4;
  int vehicle_track_ids_size() const;
  void clear_vehicle_track_ids();
  static const int kVehicleTrackIdsFieldNumber = 4;
  ::google::protobuf::int32 vehicle_track_ids(int index) const;
  void set_vehicle_track_ids(int index, ::google::protobuf::int32 value);
  void add_vehicle_track_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vehicle_track_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vehicle_track_ids();

  // repeated int32 plate_track_ids = 5;
  int plate_track_ids_size() const;
  void clear_plate_track_ids();
  static const int kPlateTrackIdsFieldNumber = 5;
  ::google::protobuf::int32 plate_track_ids(int index) const;
  void set_plate_track_ids(int index, ::google::protobuf::int32 value);
  void add_plate_track_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      plate_track_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_plate_track_ids();

  // repeated .sputnik.pb.TracePoint face_trace = 10;
  int face_trace_size() const;
  void clear_face_trace();
  static const int kFaceTraceFieldNumber = 10;
  ::sputnik::pb::TracePoint* mutable_face_trace(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
      mutable_face_trace();
  const ::sputnik::pb::TracePoint& face_trace(int index) const;
  ::sputnik::pb::TracePoint* add_face_trace();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
      face_trace() const;

  // repeated .sputnik.pb.TracePoint human_trace = 11;
  int human_trace_size() const;
  void clear_human_trace();
  static const int kHumanTraceFieldNumber = 11;
  ::sputnik::pb::TracePoint* mutable_human_trace(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
      mutable_human_trace();
  const ::sputnik::pb::TracePoint& human_trace(int index) const;
  ::sputnik::pb::TracePoint* add_human_trace();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
      human_trace() const;

  // repeated .sputnik.pb.TracePoint vehicle_trace = 12;
  int vehicle_trace_size() const;
  void clear_vehicle_trace();
  static const int kVehicleTraceFieldNumber = 12;
  ::sputnik::pb::TracePoint* mutable_vehicle_trace(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
      mutable_vehicle_trace();
  const ::sputnik::pb::TracePoint& vehicle_trace(int index) const;
  ::sputnik::pb::TracePoint* add_vehicle_trace();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
      vehicle_trace() const;

  // repeated .sputnik.pb.TracePoint plate_trace = 13;
  int plate_trace_size() const;
  void clear_plate_trace();
  static const int kPlateTraceFieldNumber = 13;
  ::sputnik::pb::TracePoint* mutable_plate_trace(int index);
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
      mutable_plate_trace();
  const ::sputnik::pb::TracePoint& plate_trace(int index) const;
  ::sputnik::pb::TracePoint* add_plate_trace();
  const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
      plate_trace() const;

  // .sputnik.pb.FaceAttribute face_attribute = 6;
  bool has_face_attribute() const;
  void clear_face_attribute();
  static const int kFaceAttributeFieldNumber = 6;
  private:
  const ::sputnik::pb::FaceAttribute& _internal_face_attribute() const;
  public:
  const ::sputnik::pb::FaceAttribute& face_attribute() const;
  ::sputnik::pb::FaceAttribute* release_face_attribute();
  ::sputnik::pb::FaceAttribute* mutable_face_attribute();
  void set_allocated_face_attribute(::sputnik::pb::FaceAttribute* face_attribute);

  // .sputnik.pb.PlateAttribute plate_attribute = 7;
  bool has_plate_attribute() const;
  void clear_plate_attribute();
  static const int kPlateAttributeFieldNumber = 7;
  private:
  const ::sputnik::pb::PlateAttribute& _internal_plate_attribute() const;
  public:
  const ::sputnik::pb::PlateAttribute& plate_attribute() const;
  ::sputnik::pb::PlateAttribute* release_plate_attribute();
  ::sputnik::pb::PlateAttribute* mutable_plate_attribute();
  void set_allocated_plate_attribute(::sputnik::pb::PlateAttribute* plate_attribute);

  // .sputnik.pb.VehicleAttribute vehicle_attribute = 8;
  bool has_vehicle_attribute() const;
  void clear_vehicle_attribute();
  static const int kVehicleAttributeFieldNumber = 8;
  private:
  const ::sputnik::pb::VehicleAttribute& _internal_vehicle_attribute() const;
  public:
  const ::sputnik::pb::VehicleAttribute& vehicle_attribute() const;
  ::sputnik::pb::VehicleAttribute* release_vehicle_attribute();
  ::sputnik::pb::VehicleAttribute* mutable_vehicle_attribute();
  void set_allocated_vehicle_attribute(::sputnik::pb::VehicleAttribute* vehicle_attribute);

  // .sputnik.pb.HumanAttribute human_attribute = 9;
  bool has_human_attribute() const;
  void clear_human_attribute();
  static const int kHumanAttributeFieldNumber = 9;
  private:
  const ::sputnik::pb::HumanAttribute& _internal_human_attribute() const;
  public:
  const ::sputnik::pb::HumanAttribute& human_attribute() const;
  ::sputnik::pb::HumanAttribute* release_human_attribute();
  ::sputnik::pb::HumanAttribute* mutable_human_attribute();
  void set_allocated_human_attribute(::sputnik::pb::HumanAttribute* human_attribute);

  // int32 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::int32 cluster_id() const;
  void set_cluster_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.Cluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > face_track_ids_;
  mutable int _face_track_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > human_track_ids_;
  mutable int _human_track_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vehicle_track_ids_;
  mutable int _vehicle_track_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > plate_track_ids_;
  mutable int _plate_track_ids_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint > face_trace_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint > human_trace_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint > vehicle_trace_;
  ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint > plate_trace_;
  ::sputnik::pb::FaceAttribute* face_attribute_;
  ::sputnik::pb::PlateAttribute* plate_attribute_;
  ::sputnik::pb::VehicleAttribute* vehicle_attribute_;
  ::sputnik::pb::HumanAttribute* human_attribute_;
  ::google::protobuf::int32 cluster_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cluster_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cluster

// int32 cluster_id = 1;
inline void Cluster::clear_cluster_id() {
  cluster_id_ = 0;
}
inline ::google::protobuf::int32 Cluster::cluster_id() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.cluster_id)
  return cluster_id_;
}
inline void Cluster::set_cluster_id(::google::protobuf::int32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.Cluster.cluster_id)
}

// repeated int32 face_track_ids = 2;
inline int Cluster::face_track_ids_size() const {
  return face_track_ids_.size();
}
inline void Cluster::clear_face_track_ids() {
  face_track_ids_.Clear();
}
inline ::google::protobuf::int32 Cluster::face_track_ids(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.face_track_ids)
  return face_track_ids_.Get(index);
}
inline void Cluster::set_face_track_ids(int index, ::google::protobuf::int32 value) {
  face_track_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sputnik.pb.Cluster.face_track_ids)
}
inline void Cluster::add_face_track_ids(::google::protobuf::int32 value) {
  face_track_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sputnik.pb.Cluster.face_track_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cluster::face_track_ids() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Cluster.face_track_ids)
  return face_track_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cluster::mutable_face_track_ids() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Cluster.face_track_ids)
  return &face_track_ids_;
}

// repeated int32 human_track_ids = 3;
inline int Cluster::human_track_ids_size() const {
  return human_track_ids_.size();
}
inline void Cluster::clear_human_track_ids() {
  human_track_ids_.Clear();
}
inline ::google::protobuf::int32 Cluster::human_track_ids(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.human_track_ids)
  return human_track_ids_.Get(index);
}
inline void Cluster::set_human_track_ids(int index, ::google::protobuf::int32 value) {
  human_track_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sputnik.pb.Cluster.human_track_ids)
}
inline void Cluster::add_human_track_ids(::google::protobuf::int32 value) {
  human_track_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sputnik.pb.Cluster.human_track_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cluster::human_track_ids() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Cluster.human_track_ids)
  return human_track_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cluster::mutable_human_track_ids() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Cluster.human_track_ids)
  return &human_track_ids_;
}

// repeated int32 vehicle_track_ids = 4;
inline int Cluster::vehicle_track_ids_size() const {
  return vehicle_track_ids_.size();
}
inline void Cluster::clear_vehicle_track_ids() {
  vehicle_track_ids_.Clear();
}
inline ::google::protobuf::int32 Cluster::vehicle_track_ids(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.vehicle_track_ids)
  return vehicle_track_ids_.Get(index);
}
inline void Cluster::set_vehicle_track_ids(int index, ::google::protobuf::int32 value) {
  vehicle_track_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sputnik.pb.Cluster.vehicle_track_ids)
}
inline void Cluster::add_vehicle_track_ids(::google::protobuf::int32 value) {
  vehicle_track_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sputnik.pb.Cluster.vehicle_track_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cluster::vehicle_track_ids() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Cluster.vehicle_track_ids)
  return vehicle_track_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cluster::mutable_vehicle_track_ids() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Cluster.vehicle_track_ids)
  return &vehicle_track_ids_;
}

// repeated int32 plate_track_ids = 5;
inline int Cluster::plate_track_ids_size() const {
  return plate_track_ids_.size();
}
inline void Cluster::clear_plate_track_ids() {
  plate_track_ids_.Clear();
}
inline ::google::protobuf::int32 Cluster::plate_track_ids(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.plate_track_ids)
  return plate_track_ids_.Get(index);
}
inline void Cluster::set_plate_track_ids(int index, ::google::protobuf::int32 value) {
  plate_track_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sputnik.pb.Cluster.plate_track_ids)
}
inline void Cluster::add_plate_track_ids(::google::protobuf::int32 value) {
  plate_track_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sputnik.pb.Cluster.plate_track_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cluster::plate_track_ids() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Cluster.plate_track_ids)
  return plate_track_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cluster::mutable_plate_track_ids() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Cluster.plate_track_ids)
  return &plate_track_ids_;
}

// .sputnik.pb.FaceAttribute face_attribute = 6;
inline bool Cluster::has_face_attribute() const {
  return this != internal_default_instance() && face_attribute_ != NULL;
}
inline const ::sputnik::pb::FaceAttribute& Cluster::_internal_face_attribute() const {
  return *face_attribute_;
}
inline const ::sputnik::pb::FaceAttribute& Cluster::face_attribute() const {
  const ::sputnik::pb::FaceAttribute* p = face_attribute_;
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.face_attribute)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::FaceAttribute*>(
      &::sputnik::pb::_FaceAttribute_default_instance_);
}
inline ::sputnik::pb::FaceAttribute* Cluster::release_face_attribute() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Cluster.face_attribute)
  
  ::sputnik::pb::FaceAttribute* temp = face_attribute_;
  face_attribute_ = NULL;
  return temp;
}
inline ::sputnik::pb::FaceAttribute* Cluster::mutable_face_attribute() {
  
  if (face_attribute_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::FaceAttribute>(GetArenaNoVirtual());
    face_attribute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Cluster.face_attribute)
  return face_attribute_;
}
inline void Cluster::set_allocated_face_attribute(::sputnik::pb::FaceAttribute* face_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(face_attribute_);
  }
  if (face_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      face_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, face_attribute, submessage_arena);
    }
    
  } else {
    
  }
  face_attribute_ = face_attribute;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Cluster.face_attribute)
}

// .sputnik.pb.PlateAttribute plate_attribute = 7;
inline bool Cluster::has_plate_attribute() const {
  return this != internal_default_instance() && plate_attribute_ != NULL;
}
inline const ::sputnik::pb::PlateAttribute& Cluster::_internal_plate_attribute() const {
  return *plate_attribute_;
}
inline const ::sputnik::pb::PlateAttribute& Cluster::plate_attribute() const {
  const ::sputnik::pb::PlateAttribute* p = plate_attribute_;
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.plate_attribute)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::PlateAttribute*>(
      &::sputnik::pb::_PlateAttribute_default_instance_);
}
inline ::sputnik::pb::PlateAttribute* Cluster::release_plate_attribute() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Cluster.plate_attribute)
  
  ::sputnik::pb::PlateAttribute* temp = plate_attribute_;
  plate_attribute_ = NULL;
  return temp;
}
inline ::sputnik::pb::PlateAttribute* Cluster::mutable_plate_attribute() {
  
  if (plate_attribute_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::PlateAttribute>(GetArenaNoVirtual());
    plate_attribute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Cluster.plate_attribute)
  return plate_attribute_;
}
inline void Cluster::set_allocated_plate_attribute(::sputnik::pb::PlateAttribute* plate_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(plate_attribute_);
  }
  if (plate_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plate_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plate_attribute, submessage_arena);
    }
    
  } else {
    
  }
  plate_attribute_ = plate_attribute;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Cluster.plate_attribute)
}

// .sputnik.pb.VehicleAttribute vehicle_attribute = 8;
inline bool Cluster::has_vehicle_attribute() const {
  return this != internal_default_instance() && vehicle_attribute_ != NULL;
}
inline const ::sputnik::pb::VehicleAttribute& Cluster::_internal_vehicle_attribute() const {
  return *vehicle_attribute_;
}
inline const ::sputnik::pb::VehicleAttribute& Cluster::vehicle_attribute() const {
  const ::sputnik::pb::VehicleAttribute* p = vehicle_attribute_;
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.vehicle_attribute)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::VehicleAttribute*>(
      &::sputnik::pb::_VehicleAttribute_default_instance_);
}
inline ::sputnik::pb::VehicleAttribute* Cluster::release_vehicle_attribute() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Cluster.vehicle_attribute)
  
  ::sputnik::pb::VehicleAttribute* temp = vehicle_attribute_;
  vehicle_attribute_ = NULL;
  return temp;
}
inline ::sputnik::pb::VehicleAttribute* Cluster::mutable_vehicle_attribute() {
  
  if (vehicle_attribute_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::VehicleAttribute>(GetArenaNoVirtual());
    vehicle_attribute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Cluster.vehicle_attribute)
  return vehicle_attribute_;
}
inline void Cluster::set_allocated_vehicle_attribute(::sputnik::pb::VehicleAttribute* vehicle_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vehicle_attribute_);
  }
  if (vehicle_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_attribute, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_attribute_ = vehicle_attribute;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Cluster.vehicle_attribute)
}

// .sputnik.pb.HumanAttribute human_attribute = 9;
inline bool Cluster::has_human_attribute() const {
  return this != internal_default_instance() && human_attribute_ != NULL;
}
inline const ::sputnik::pb::HumanAttribute& Cluster::_internal_human_attribute() const {
  return *human_attribute_;
}
inline const ::sputnik::pb::HumanAttribute& Cluster::human_attribute() const {
  const ::sputnik::pb::HumanAttribute* p = human_attribute_;
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.human_attribute)
  return p != NULL ? *p : *reinterpret_cast<const ::sputnik::pb::HumanAttribute*>(
      &::sputnik::pb::_HumanAttribute_default_instance_);
}
inline ::sputnik::pb::HumanAttribute* Cluster::release_human_attribute() {
  // @@protoc_insertion_point(field_release:sputnik.pb.Cluster.human_attribute)
  
  ::sputnik::pb::HumanAttribute* temp = human_attribute_;
  human_attribute_ = NULL;
  return temp;
}
inline ::sputnik::pb::HumanAttribute* Cluster::mutable_human_attribute() {
  
  if (human_attribute_ == NULL) {
    auto* p = CreateMaybeMessage<::sputnik::pb::HumanAttribute>(GetArenaNoVirtual());
    human_attribute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Cluster.human_attribute)
  return human_attribute_;
}
inline void Cluster::set_allocated_human_attribute(::sputnik::pb::HumanAttribute* human_attribute) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(human_attribute_);
  }
  if (human_attribute) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      human_attribute = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, human_attribute, submessage_arena);
    }
    
  } else {
    
  }
  human_attribute_ = human_attribute;
  // @@protoc_insertion_point(field_set_allocated:sputnik.pb.Cluster.human_attribute)
}

// repeated .sputnik.pb.TracePoint face_trace = 10;
inline int Cluster::face_trace_size() const {
  return face_trace_.size();
}
inline ::sputnik::pb::TracePoint* Cluster::mutable_face_trace(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Cluster.face_trace)
  return face_trace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
Cluster::mutable_face_trace() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Cluster.face_trace)
  return &face_trace_;
}
inline const ::sputnik::pb::TracePoint& Cluster::face_trace(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.face_trace)
  return face_trace_.Get(index);
}
inline ::sputnik::pb::TracePoint* Cluster::add_face_trace() {
  // @@protoc_insertion_point(field_add:sputnik.pb.Cluster.face_trace)
  return face_trace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
Cluster::face_trace() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Cluster.face_trace)
  return face_trace_;
}

// repeated .sputnik.pb.TracePoint human_trace = 11;
inline int Cluster::human_trace_size() const {
  return human_trace_.size();
}
inline ::sputnik::pb::TracePoint* Cluster::mutable_human_trace(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Cluster.human_trace)
  return human_trace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
Cluster::mutable_human_trace() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Cluster.human_trace)
  return &human_trace_;
}
inline const ::sputnik::pb::TracePoint& Cluster::human_trace(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.human_trace)
  return human_trace_.Get(index);
}
inline ::sputnik::pb::TracePoint* Cluster::add_human_trace() {
  // @@protoc_insertion_point(field_add:sputnik.pb.Cluster.human_trace)
  return human_trace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
Cluster::human_trace() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Cluster.human_trace)
  return human_trace_;
}

// repeated .sputnik.pb.TracePoint vehicle_trace = 12;
inline int Cluster::vehicle_trace_size() const {
  return vehicle_trace_.size();
}
inline ::sputnik::pb::TracePoint* Cluster::mutable_vehicle_trace(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Cluster.vehicle_trace)
  return vehicle_trace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
Cluster::mutable_vehicle_trace() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Cluster.vehicle_trace)
  return &vehicle_trace_;
}
inline const ::sputnik::pb::TracePoint& Cluster::vehicle_trace(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.vehicle_trace)
  return vehicle_trace_.Get(index);
}
inline ::sputnik::pb::TracePoint* Cluster::add_vehicle_trace() {
  // @@protoc_insertion_point(field_add:sputnik.pb.Cluster.vehicle_trace)
  return vehicle_trace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
Cluster::vehicle_trace() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Cluster.vehicle_trace)
  return vehicle_trace_;
}

// repeated .sputnik.pb.TracePoint plate_trace = 13;
inline int Cluster::plate_trace_size() const {
  return plate_trace_.size();
}
inline ::sputnik::pb::TracePoint* Cluster::mutable_plate_trace(int index) {
  // @@protoc_insertion_point(field_mutable:sputnik.pb.Cluster.plate_trace)
  return plate_trace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >*
Cluster::mutable_plate_trace() {
  // @@protoc_insertion_point(field_mutable_list:sputnik.pb.Cluster.plate_trace)
  return &plate_trace_;
}
inline const ::sputnik::pb::TracePoint& Cluster::plate_trace(int index) const {
  // @@protoc_insertion_point(field_get:sputnik.pb.Cluster.plate_trace)
  return plate_trace_.Get(index);
}
inline ::sputnik::pb::TracePoint* Cluster::add_plate_trace() {
  // @@protoc_insertion_point(field_add:sputnik.pb.Cluster.plate_trace)
  return plate_trace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sputnik::pb::TracePoint >&
Cluster::plate_trace() const {
  // @@protoc_insertion_point(field_list:sputnik.pb.Cluster.plate_trace)
  return plate_trace_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cluster_2eproto
