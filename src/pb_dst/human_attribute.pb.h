// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: human_attribute.proto

#ifndef PROTOBUF_INCLUDED_human_5fattribute_2eproto
#define PROTOBUF_INCLUDED_human_5fattribute_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "direction.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_human_5fattribute_2eproto 

namespace protobuf_human_5fattribute_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_human_5fattribute_2eproto
namespace sputnik {
namespace pb {
class HumanAttribute;
class HumanAttributeDefaultTypeInternal;
extern HumanAttributeDefaultTypeInternal _HumanAttribute_default_instance_;
}  // namespace pb
}  // namespace sputnik
namespace google {
namespace protobuf {
template<> ::sputnik::pb::HumanAttribute* Arena::CreateMaybeMessage<::sputnik::pb::HumanAttribute>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sputnik {
namespace pb {

// ===================================================================

class HumanAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sputnik.pb.HumanAttribute) */ {
 public:
  HumanAttribute();
  virtual ~HumanAttribute();

  HumanAttribute(const HumanAttribute& from);

  inline HumanAttribute& operator=(const HumanAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanAttribute(HumanAttribute&& from) noexcept
    : HumanAttribute() {
    *this = ::std::move(from);
  }

  inline HumanAttribute& operator=(HumanAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanAttribute* internal_default_instance() {
    return reinterpret_cast<const HumanAttribute*>(
               &_HumanAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HumanAttribute* other);
  friend void swap(HumanAttribute& a, HumanAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanAttribute* New() const final {
    return CreateMaybeMessage<HumanAttribute>(NULL);
  }

  HumanAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanAttribute& from);
  void MergeFrom(const HumanAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 gender = 1;
  void clear_gender();
  static const int kGenderFieldNumber = 1;
  ::google::protobuf::int32 gender() const;
  void set_gender(::google::protobuf::int32 value);

  // int32 age = 2;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // int32 backpack = 3;
  void clear_backpack();
  static const int kBackpackFieldNumber = 3;
  ::google::protobuf::int32 backpack() const;
  void set_backpack(::google::protobuf::int32 value);

  // int32 human_move = 4;
  void clear_human_move();
  static const int kHumanMoveFieldNumber = 4;
  ::google::protobuf::int32 human_move() const;
  void set_human_move(::google::protobuf::int32 value);

  // .sputnik.pb.Direction move_direction = 5;
  void clear_move_direction();
  static const int kMoveDirectionFieldNumber = 5;
  ::sputnik::pb::Direction move_direction() const;
  void set_move_direction(::sputnik::pb::Direction value);

  // int32 ride_bike = 6;
  void clear_ride_bike();
  static const int kRideBikeFieldNumber = 6;
  ::google::protobuf::int32 ride_bike() const;
  void set_ride_bike(::google::protobuf::int32 value);

  // int32 ride_motorbike = 7;
  void clear_ride_motorbike();
  static const int kRideMotorbikeFieldNumber = 7;
  ::google::protobuf::int32 ride_motorbike() const;
  void set_ride_motorbike(::google::protobuf::int32 value);

  // int32 human_face_visible = 8;
  void clear_human_face_visible();
  static const int kHumanFaceVisibleFieldNumber = 8;
  ::google::protobuf::int32 human_face_visible() const;
  void set_human_face_visible(::google::protobuf::int32 value);

  // .sputnik.pb.Facing human_facing = 9;
  void clear_human_facing();
  static const int kHumanFacingFieldNumber = 9;
  ::sputnik::pb::Facing human_facing() const;
  void set_human_facing(::sputnik::pb::Facing value);

  // int32 human_facing_confidence = 10;
  void clear_human_facing_confidence();
  static const int kHumanFacingConfidenceFieldNumber = 10;
  ::google::protobuf::int32 human_facing_confidence() const;
  void set_human_facing_confidence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sputnik.pb.HumanAttribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 backpack_;
  ::google::protobuf::int32 human_move_;
  int move_direction_;
  ::google::protobuf::int32 ride_bike_;
  ::google::protobuf::int32 ride_motorbike_;
  ::google::protobuf::int32 human_face_visible_;
  int human_facing_;
  ::google::protobuf::int32 human_facing_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_human_5fattribute_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HumanAttribute

// int32 gender = 1;
inline void HumanAttribute::clear_gender() {
  gender_ = 0;
}
inline ::google::protobuf::int32 HumanAttribute::gender() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.gender)
  return gender_;
}
inline void HumanAttribute::set_gender(::google::protobuf::int32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.gender)
}

// int32 age = 2;
inline void HumanAttribute::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 HumanAttribute::age() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.age)
  return age_;
}
inline void HumanAttribute::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.age)
}

// int32 backpack = 3;
inline void HumanAttribute::clear_backpack() {
  backpack_ = 0;
}
inline ::google::protobuf::int32 HumanAttribute::backpack() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.backpack)
  return backpack_;
}
inline void HumanAttribute::set_backpack(::google::protobuf::int32 value) {
  
  backpack_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.backpack)
}

// int32 human_move = 4;
inline void HumanAttribute::clear_human_move() {
  human_move_ = 0;
}
inline ::google::protobuf::int32 HumanAttribute::human_move() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.human_move)
  return human_move_;
}
inline void HumanAttribute::set_human_move(::google::protobuf::int32 value) {
  
  human_move_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.human_move)
}

// .sputnik.pb.Direction move_direction = 5;
inline void HumanAttribute::clear_move_direction() {
  move_direction_ = 0;
}
inline ::sputnik::pb::Direction HumanAttribute::move_direction() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.move_direction)
  return static_cast< ::sputnik::pb::Direction >(move_direction_);
}
inline void HumanAttribute::set_move_direction(::sputnik::pb::Direction value) {
  
  move_direction_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.move_direction)
}

// int32 ride_bike = 6;
inline void HumanAttribute::clear_ride_bike() {
  ride_bike_ = 0;
}
inline ::google::protobuf::int32 HumanAttribute::ride_bike() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.ride_bike)
  return ride_bike_;
}
inline void HumanAttribute::set_ride_bike(::google::protobuf::int32 value) {
  
  ride_bike_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.ride_bike)
}

// int32 ride_motorbike = 7;
inline void HumanAttribute::clear_ride_motorbike() {
  ride_motorbike_ = 0;
}
inline ::google::protobuf::int32 HumanAttribute::ride_motorbike() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.ride_motorbike)
  return ride_motorbike_;
}
inline void HumanAttribute::set_ride_motorbike(::google::protobuf::int32 value) {
  
  ride_motorbike_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.ride_motorbike)
}

// int32 human_face_visible = 8;
inline void HumanAttribute::clear_human_face_visible() {
  human_face_visible_ = 0;
}
inline ::google::protobuf::int32 HumanAttribute::human_face_visible() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.human_face_visible)
  return human_face_visible_;
}
inline void HumanAttribute::set_human_face_visible(::google::protobuf::int32 value) {
  
  human_face_visible_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.human_face_visible)
}

// .sputnik.pb.Facing human_facing = 9;
inline void HumanAttribute::clear_human_facing() {
  human_facing_ = 0;
}
inline ::sputnik::pb::Facing HumanAttribute::human_facing() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.human_facing)
  return static_cast< ::sputnik::pb::Facing >(human_facing_);
}
inline void HumanAttribute::set_human_facing(::sputnik::pb::Facing value) {
  
  human_facing_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.human_facing)
}

// int32 human_facing_confidence = 10;
inline void HumanAttribute::clear_human_facing_confidence() {
  human_facing_confidence_ = 0;
}
inline ::google::protobuf::int32 HumanAttribute::human_facing_confidence() const {
  // @@protoc_insertion_point(field_get:sputnik.pb.HumanAttribute.human_facing_confidence)
  return human_facing_confidence_;
}
inline void HumanAttribute::set_human_facing_confidence(::google::protobuf::int32 value) {
  
  human_facing_confidence_ = value;
  // @@protoc_insertion_point(field_set:sputnik.pb.HumanAttribute.human_facing_confidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace sputnik

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_human_5fattribute_2eproto
